# 1 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/cuZFP.cu"
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
# 1
#pragma GCC diagnostic push
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"
# 1
#pragma GCC diagnostic ignored "-Wunused-function"
# 1
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
# 1
#pragma GCC diagnostic pop
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"

# 1
#define __nv_is_extended_device_lambda_closure_type(X) false
#define __nv_is_extended_host_device_lambda_closure_type(X) false

# 1
# 61 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
#pragma GCC diagnostic push
# 64
#pragma GCC diagnostic ignored "-Wunused-function"
# 66 "/sw/summit/cuda/10.1.168/include/device_types.h"
#if 0
# 66
enum cudaRoundMode { 
# 68
cudaRoundNearest, 
# 69
cudaRoundZero, 
# 70
cudaRoundPosInf, 
# 71
cudaRoundMinInf
# 72
}; 
#endif
# 98 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 98
struct char1 { 
# 100
signed char x; 
# 101
}; 
#endif
# 103 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 103
struct uchar1 { 
# 105
unsigned char x; 
# 106
}; 
#endif
# 109 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 109
struct __attribute((aligned(2))) char2 { 
# 111
signed char x, y; 
# 112
}; 
#endif
# 114 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 114
struct __attribute((aligned(2))) uchar2 { 
# 116
unsigned char x, y; 
# 117
}; 
#endif
# 119 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 119
struct char3 { 
# 121
signed char x, y, z; 
# 122
}; 
#endif
# 124 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 124
struct uchar3 { 
# 126
unsigned char x, y, z; 
# 127
}; 
#endif
# 129 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 129
struct __attribute((aligned(4))) char4 { 
# 131
signed char x, y, z, w; 
# 132
}; 
#endif
# 134 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 134
struct __attribute((aligned(4))) uchar4 { 
# 136
unsigned char x, y, z, w; 
# 137
}; 
#endif
# 139 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 139
struct short1 { 
# 141
short x; 
# 142
}; 
#endif
# 144 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 144
struct ushort1 { 
# 146
unsigned short x; 
# 147
}; 
#endif
# 149 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 149
struct __attribute((aligned(4))) short2 { 
# 151
short x, y; 
# 152
}; 
#endif
# 154 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 154
struct __attribute((aligned(4))) ushort2 { 
# 156
unsigned short x, y; 
# 157
}; 
#endif
# 159 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 159
struct short3 { 
# 161
short x, y, z; 
# 162
}; 
#endif
# 164 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 164
struct ushort3 { 
# 166
unsigned short x, y, z; 
# 167
}; 
#endif
# 169 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 169
struct __attribute((aligned(8))) short4 { short x; short y; short z; short w; }; 
#endif
# 170 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 170
struct __attribute((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
# 172 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 172
struct int1 { 
# 174
int x; 
# 175
}; 
#endif
# 177 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 177
struct uint1 { 
# 179
unsigned x; 
# 180
}; 
#endif
# 182 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 182
struct __attribute((aligned(8))) int2 { int x; int y; }; 
#endif
# 183 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 183
struct __attribute((aligned(8))) uint2 { unsigned x; unsigned y; }; 
#endif
# 185 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 185
struct int3 { 
# 187
int x, y, z; 
# 188
}; 
#endif
# 190 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 190
struct uint3 { 
# 192
unsigned x, y, z; 
# 193
}; 
#endif
# 195 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 195
struct __attribute((aligned(16))) int4 { 
# 197
int x, y, z, w; 
# 198
}; 
#endif
# 200 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 200
struct __attribute((aligned(16))) uint4 { 
# 202
unsigned x, y, z, w; 
# 203
}; 
#endif
# 205 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 205
struct long1 { 
# 207
long x; 
# 208
}; 
#endif
# 210 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 210
struct ulong1 { 
# 212
unsigned long x; 
# 213
}; 
#endif
# 220 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 220
struct __attribute((aligned((2) * sizeof(long)))) long2 { 
# 222
long x, y; 
# 223
}; 
#endif
# 225 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 225
struct __attribute((aligned((2) * sizeof(unsigned long)))) ulong2 { 
# 227
unsigned long x, y; 
# 228
}; 
#endif
# 232 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 232
struct long3 { 
# 234
long x, y, z; 
# 235
}; 
#endif
# 237 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 237
struct ulong3 { 
# 239
unsigned long x, y, z; 
# 240
}; 
#endif
# 242 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 242
struct __attribute((aligned(16))) long4 { 
# 244
long x, y, z, w; 
# 245
}; 
#endif
# 247 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 247
struct __attribute((aligned(16))) ulong4 { 
# 249
unsigned long x, y, z, w; 
# 250
}; 
#endif
# 252 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 252
struct float1 { 
# 254
float x; 
# 255
}; 
#endif
# 274 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 274
struct __attribute((aligned(8))) float2 { float x; float y; }; 
#endif
# 279 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 279
struct float3 { 
# 281
float x, y, z; 
# 282
}; 
#endif
# 284 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 284
struct __attribute((aligned(16))) float4 { 
# 286
float x, y, z, w; 
# 287
}; 
#endif
# 289 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 289
struct longlong1 { 
# 291
long long x; 
# 292
}; 
#endif
# 294 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 294
struct ulonglong1 { 
# 296
unsigned long long x; 
# 297
}; 
#endif
# 299 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 299
struct __attribute((aligned(16))) longlong2 { 
# 301
long long x, y; 
# 302
}; 
#endif
# 304 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 304
struct __attribute((aligned(16))) ulonglong2 { 
# 306
unsigned long long x, y; 
# 307
}; 
#endif
# 309 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 309
struct longlong3 { 
# 311
long long x, y, z; 
# 312
}; 
#endif
# 314 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 314
struct ulonglong3 { 
# 316
unsigned long long x, y, z; 
# 317
}; 
#endif
# 319 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 319
struct __attribute((aligned(16))) longlong4 { 
# 321
long long x, y, z, w; 
# 322
}; 
#endif
# 324 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 324
struct __attribute((aligned(16))) ulonglong4 { 
# 326
unsigned long long x, y, z, w; 
# 327
}; 
#endif
# 329 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 329
struct double1 { 
# 331
double x; 
# 332
}; 
#endif
# 334 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 334
struct __attribute((aligned(16))) double2 { 
# 336
double x, y; 
# 337
}; 
#endif
# 339 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 339
struct double3 { 
# 341
double x, y, z; 
# 342
}; 
#endif
# 344 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 344
struct __attribute((aligned(16))) double4 { 
# 346
double x, y, z, w; 
# 347
}; 
#endif
# 361 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef char1 
# 361
char1; 
#endif
# 362 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef uchar1 
# 362
uchar1; 
#endif
# 363 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef char2 
# 363
char2; 
#endif
# 364 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef uchar2 
# 364
uchar2; 
#endif
# 365 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef char3 
# 365
char3; 
#endif
# 366 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef uchar3 
# 366
uchar3; 
#endif
# 367 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef char4 
# 367
char4; 
#endif
# 368 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef uchar4 
# 368
uchar4; 
#endif
# 369 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef short1 
# 369
short1; 
#endif
# 370 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef ushort1 
# 370
ushort1; 
#endif
# 371 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef short2 
# 371
short2; 
#endif
# 372 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef ushort2 
# 372
ushort2; 
#endif
# 373 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef short3 
# 373
short3; 
#endif
# 374 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef ushort3 
# 374
ushort3; 
#endif
# 375 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef short4 
# 375
short4; 
#endif
# 376 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef ushort4 
# 376
ushort4; 
#endif
# 377 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef int1 
# 377
int1; 
#endif
# 378 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef uint1 
# 378
uint1; 
#endif
# 379 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef int2 
# 379
int2; 
#endif
# 380 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef uint2 
# 380
uint2; 
#endif
# 381 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef int3 
# 381
int3; 
#endif
# 382 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef uint3 
# 382
uint3; 
#endif
# 383 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef int4 
# 383
int4; 
#endif
# 384 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef uint4 
# 384
uint4; 
#endif
# 385 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef long1 
# 385
long1; 
#endif
# 386 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef ulong1 
# 386
ulong1; 
#endif
# 387 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef long2 
# 387
long2; 
#endif
# 388 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef ulong2 
# 388
ulong2; 
#endif
# 389 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef long3 
# 389
long3; 
#endif
# 390 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef ulong3 
# 390
ulong3; 
#endif
# 391 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef long4 
# 391
long4; 
#endif
# 392 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef ulong4 
# 392
ulong4; 
#endif
# 393 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef float1 
# 393
float1; 
#endif
# 394 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef float2 
# 394
float2; 
#endif
# 395 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef float3 
# 395
float3; 
#endif
# 396 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef float4 
# 396
float4; 
#endif
# 397 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef longlong1 
# 397
longlong1; 
#endif
# 398 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef ulonglong1 
# 398
ulonglong1; 
#endif
# 399 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef longlong2 
# 399
longlong2; 
#endif
# 400 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef ulonglong2 
# 400
ulonglong2; 
#endif
# 401 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef longlong3 
# 401
longlong3; 
#endif
# 402 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef ulonglong3 
# 402
ulonglong3; 
#endif
# 403 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef longlong4 
# 403
longlong4; 
#endif
# 404 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef ulonglong4 
# 404
ulonglong4; 
#endif
# 405 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef double1 
# 405
double1; 
#endif
# 406 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef double2 
# 406
double2; 
#endif
# 407 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef double3 
# 407
double3; 
#endif
# 408 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef double4 
# 408
double4; 
#endif
# 416 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
# 416
struct dim3 { 
# 418
unsigned x, y, z; 
# 428
}; 
#endif
# 430 "/sw/summit/cuda/10.1.168/include/vector_types.h"
#if 0
typedef dim3 
# 430
dim3; 
#endif
# 147 "/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/include/stddef.h" 3
typedef long ptrdiff_t; 
# 212 "/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/include/stddef.h" 3
typedef unsigned long size_t; 
#if !defined(__CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__)
#define __CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__
#endif
#include "crt/host_runtime.h"
# 189 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 189
enum cudaError { 
# 196
cudaSuccess, 
# 202
cudaErrorInvalidValue, 
# 208
cudaErrorMemoryAllocation, 
# 214
cudaErrorInitializationError, 
# 221
cudaErrorCudartUnloading, 
# 228
cudaErrorProfilerDisabled, 
# 236
cudaErrorProfilerNotInitialized, 
# 243
cudaErrorProfilerAlreadyStarted, 
# 250
cudaErrorProfilerAlreadyStopped, 
# 259 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorInvalidConfiguration, 
# 265
cudaErrorInvalidPitchValue = 12, 
# 271
cudaErrorInvalidSymbol, 
# 279
cudaErrorInvalidHostPointer = 16, 
# 287
cudaErrorInvalidDevicePointer, 
# 293
cudaErrorInvalidTexture, 
# 299
cudaErrorInvalidTextureBinding, 
# 306
cudaErrorInvalidChannelDescriptor, 
# 312
cudaErrorInvalidMemcpyDirection, 
# 322 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorAddressOfConstant, 
# 331 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorTextureFetchFailed, 
# 340 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorTextureNotBound, 
# 349 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorSynchronizationError, 
# 355
cudaErrorInvalidFilterSetting, 
# 361
cudaErrorInvalidNormSetting, 
# 369
cudaErrorMixedDeviceExecution, 
# 377
cudaErrorNotYetImplemented = 31, 
# 386 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorMemoryValueTooLarge, 
# 393
cudaErrorInsufficientDriver = 35, 
# 399
cudaErrorInvalidSurface = 37, 
# 405
cudaErrorDuplicateVariableName = 43, 
# 411
cudaErrorDuplicateTextureName, 
# 417
cudaErrorDuplicateSurfaceName, 
# 427 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorDevicesUnavailable, 
# 440 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorIncompatibleDriverContext = 49, 
# 446
cudaErrorMissingConfiguration = 52, 
# 455 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorPriorLaunchFailure, 
# 462
cudaErrorLaunchMaxDepthExceeded = 65, 
# 470
cudaErrorLaunchFileScopedTex, 
# 478
cudaErrorLaunchFileScopedSurf, 
# 493 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorSyncDepthExceeded, 
# 505 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorLaunchPendingCountExceeded, 
# 511
cudaErrorInvalidDeviceFunction = 98, 
# 517
cudaErrorNoDevice = 100, 
# 523
cudaErrorInvalidDevice, 
# 528
cudaErrorStartupFailure = 127, 
# 533
cudaErrorInvalidKernelImage = 200, 
# 543 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorDeviceUninitilialized, 
# 548
cudaErrorMapBufferObjectFailed = 205, 
# 553
cudaErrorUnmapBufferObjectFailed, 
# 559
cudaErrorArrayIsMapped, 
# 564
cudaErrorAlreadyMapped, 
# 572
cudaErrorNoKernelImageForDevice, 
# 577
cudaErrorAlreadyAcquired, 
# 582
cudaErrorNotMapped, 
# 588
cudaErrorNotMappedAsArray, 
# 594
cudaErrorNotMappedAsPointer, 
# 600
cudaErrorECCUncorrectable, 
# 606
cudaErrorUnsupportedLimit, 
# 612
cudaErrorDeviceAlreadyInUse, 
# 618
cudaErrorPeerAccessUnsupported, 
# 624
cudaErrorInvalidPtx, 
# 629
cudaErrorInvalidGraphicsContext, 
# 635
cudaErrorNvlinkUncorrectable, 
# 642
cudaErrorJitCompilerNotFound, 
# 647
cudaErrorInvalidSource = 300, 
# 652
cudaErrorFileNotFound, 
# 657
cudaErrorSharedObjectSymbolNotFound, 
# 662
cudaErrorSharedObjectInitFailed, 
# 667
cudaErrorOperatingSystem, 
# 674
cudaErrorInvalidResourceHandle = 400, 
# 680
cudaErrorIllegalState, 
# 686
cudaErrorSymbolNotFound = 500, 
# 694
cudaErrorNotReady = 600, 
# 702
cudaErrorIllegalAddress = 700, 
# 711 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorLaunchOutOfResources, 
# 722 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorLaunchTimeout, 
# 728
cudaErrorLaunchIncompatibleTexturing, 
# 735
cudaErrorPeerAccessAlreadyEnabled, 
# 742
cudaErrorPeerAccessNotEnabled, 
# 755 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorSetOnActiveProcess = 708, 
# 762
cudaErrorContextIsDestroyed, 
# 769
cudaErrorAssert, 
# 776
cudaErrorTooManyPeers, 
# 782
cudaErrorHostMemoryAlreadyRegistered, 
# 788
cudaErrorHostMemoryNotRegistered, 
# 797 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorHardwareStackError, 
# 805
cudaErrorIllegalInstruction, 
# 814 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorMisalignedAddress, 
# 825 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorInvalidAddressSpace, 
# 833
cudaErrorInvalidPc, 
# 844 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorLaunchFailure, 
# 853 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorCooperativeLaunchTooLarge, 
# 858
cudaErrorNotPermitted = 800, 
# 864
cudaErrorNotSupported, 
# 873 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorSystemNotReady, 
# 880
cudaErrorSystemDriverMismatch, 
# 889 "/sw/summit/cuda/10.1.168/include/driver_types.h"
cudaErrorCompatNotSupportedOnDevice, 
# 894
cudaErrorStreamCaptureUnsupported = 900, 
# 900
cudaErrorStreamCaptureInvalidated, 
# 906
cudaErrorStreamCaptureMerge, 
# 911
cudaErrorStreamCaptureUnmatched, 
# 917
cudaErrorStreamCaptureUnjoined, 
# 924
cudaErrorStreamCaptureIsolation, 
# 930
cudaErrorStreamCaptureImplicit, 
# 936
cudaErrorCapturedEvent, 
# 943
cudaErrorStreamCaptureWrongThread, 
# 948
cudaErrorUnknown = 999, 
# 956
cudaErrorApiFailureBase = 10000
# 957
}; 
#endif
# 962 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 962
enum cudaChannelFormatKind { 
# 964
cudaChannelFormatKindSigned, 
# 965
cudaChannelFormatKindUnsigned, 
# 966
cudaChannelFormatKindFloat, 
# 967
cudaChannelFormatKindNone
# 968
}; 
#endif
# 973 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 973
struct cudaChannelFormatDesc { 
# 975
int x; 
# 976
int y; 
# 977
int z; 
# 978
int w; 
# 979
cudaChannelFormatKind f; 
# 980
}; 
#endif
# 985 "/sw/summit/cuda/10.1.168/include/driver_types.h"
typedef struct cudaArray *cudaArray_t; 
# 990
typedef const cudaArray *cudaArray_const_t; 
# 992
struct cudaArray; 
# 997
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
# 1002
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
# 1004
struct cudaMipmappedArray; 
# 1009
#if 0
# 1009
enum cudaMemoryType { 
# 1011
cudaMemoryTypeUnregistered, 
# 1012
cudaMemoryTypeHost, 
# 1013
cudaMemoryTypeDevice, 
# 1014
cudaMemoryTypeManaged
# 1015
}; 
#endif
# 1020 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1020
enum cudaMemcpyKind { 
# 1022
cudaMemcpyHostToHost, 
# 1023
cudaMemcpyHostToDevice, 
# 1024
cudaMemcpyDeviceToHost, 
# 1025
cudaMemcpyDeviceToDevice, 
# 1026
cudaMemcpyDefault
# 1027
}; 
#endif
# 1034 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1034
struct cudaPitchedPtr { 
# 1036
void *ptr; 
# 1037
size_t pitch; 
# 1038
size_t xsize; 
# 1039
size_t ysize; 
# 1040
}; 
#endif
# 1047 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1047
struct cudaExtent { 
# 1049
size_t width; 
# 1050
size_t height; 
# 1051
size_t depth; 
# 1052
}; 
#endif
# 1059 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1059
struct cudaPos { 
# 1061
size_t x; 
# 1062
size_t y; 
# 1063
size_t z; 
# 1064
}; 
#endif
# 1069 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1069
struct cudaMemcpy3DParms { 
# 1071
cudaArray_t srcArray; 
# 1072
cudaPos srcPos; 
# 1073
cudaPitchedPtr srcPtr; 
# 1075
cudaArray_t dstArray; 
# 1076
cudaPos dstPos; 
# 1077
cudaPitchedPtr dstPtr; 
# 1079
cudaExtent extent; 
# 1080
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1081
}; 
#endif
# 1086 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1086
struct cudaMemcpy3DPeerParms { 
# 1088
cudaArray_t srcArray; 
# 1089
cudaPos srcPos; 
# 1090
cudaPitchedPtr srcPtr; 
# 1091
int srcDevice; 
# 1093
cudaArray_t dstArray; 
# 1094
cudaPos dstPos; 
# 1095
cudaPitchedPtr dstPtr; 
# 1096
int dstDevice; 
# 1098
cudaExtent extent; 
# 1099
}; 
#endif
# 1104 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1104
struct cudaMemsetParams { 
# 1105
void *dst; 
# 1106
size_t pitch; 
# 1107
unsigned value; 
# 1108
unsigned elementSize; 
# 1109
size_t width; 
# 1110
size_t height; 
# 1111
}; 
#endif
# 1123 "/sw/summit/cuda/10.1.168/include/driver_types.h"
typedef void (*cudaHostFn_t)(void * userData); 
# 1128
#if 0
# 1128
struct cudaHostNodeParams { 
# 1129
cudaHostFn_t fn; 
# 1130
void *userData; 
# 1131
}; 
#endif
# 1136 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1136
enum cudaStreamCaptureStatus { 
# 1137
cudaStreamCaptureStatusNone, 
# 1138
cudaStreamCaptureStatusActive, 
# 1139
cudaStreamCaptureStatusInvalidated
# 1141
}; 
#endif
# 1147 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1147
enum cudaStreamCaptureMode { 
# 1148
cudaStreamCaptureModeGlobal, 
# 1149
cudaStreamCaptureModeThreadLocal, 
# 1150
cudaStreamCaptureModeRelaxed
# 1151
}; 
#endif
# 1156 "/sw/summit/cuda/10.1.168/include/driver_types.h"
struct cudaGraphicsResource; 
# 1161
#if 0
# 1161
enum cudaGraphicsRegisterFlags { 
# 1163
cudaGraphicsRegisterFlagsNone, 
# 1164
cudaGraphicsRegisterFlagsReadOnly, 
# 1165
cudaGraphicsRegisterFlagsWriteDiscard, 
# 1166
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
# 1167
cudaGraphicsRegisterFlagsTextureGather = 8
# 1168
}; 
#endif
# 1173 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1173
enum cudaGraphicsMapFlags { 
# 1175
cudaGraphicsMapFlagsNone, 
# 1176
cudaGraphicsMapFlagsReadOnly, 
# 1177
cudaGraphicsMapFlagsWriteDiscard
# 1178
}; 
#endif
# 1183 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1183
enum cudaGraphicsCubeFace { 
# 1185
cudaGraphicsCubeFacePositiveX, 
# 1186
cudaGraphicsCubeFaceNegativeX, 
# 1187
cudaGraphicsCubeFacePositiveY, 
# 1188
cudaGraphicsCubeFaceNegativeY, 
# 1189
cudaGraphicsCubeFacePositiveZ, 
# 1190
cudaGraphicsCubeFaceNegativeZ
# 1191
}; 
#endif
# 1196 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1196
enum cudaResourceType { 
# 1198
cudaResourceTypeArray, 
# 1199
cudaResourceTypeMipmappedArray, 
# 1200
cudaResourceTypeLinear, 
# 1201
cudaResourceTypePitch2D
# 1202
}; 
#endif
# 1207 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1207
enum cudaResourceViewFormat { 
# 1209
cudaResViewFormatNone, 
# 1210
cudaResViewFormatUnsignedChar1, 
# 1211
cudaResViewFormatUnsignedChar2, 
# 1212
cudaResViewFormatUnsignedChar4, 
# 1213
cudaResViewFormatSignedChar1, 
# 1214
cudaResViewFormatSignedChar2, 
# 1215
cudaResViewFormatSignedChar4, 
# 1216
cudaResViewFormatUnsignedShort1, 
# 1217
cudaResViewFormatUnsignedShort2, 
# 1218
cudaResViewFormatUnsignedShort4, 
# 1219
cudaResViewFormatSignedShort1, 
# 1220
cudaResViewFormatSignedShort2, 
# 1221
cudaResViewFormatSignedShort4, 
# 1222
cudaResViewFormatUnsignedInt1, 
# 1223
cudaResViewFormatUnsignedInt2, 
# 1224
cudaResViewFormatUnsignedInt4, 
# 1225
cudaResViewFormatSignedInt1, 
# 1226
cudaResViewFormatSignedInt2, 
# 1227
cudaResViewFormatSignedInt4, 
# 1228
cudaResViewFormatHalf1, 
# 1229
cudaResViewFormatHalf2, 
# 1230
cudaResViewFormatHalf4, 
# 1231
cudaResViewFormatFloat1, 
# 1232
cudaResViewFormatFloat2, 
# 1233
cudaResViewFormatFloat4, 
# 1234
cudaResViewFormatUnsignedBlockCompressed1, 
# 1235
cudaResViewFormatUnsignedBlockCompressed2, 
# 1236
cudaResViewFormatUnsignedBlockCompressed3, 
# 1237
cudaResViewFormatUnsignedBlockCompressed4, 
# 1238
cudaResViewFormatSignedBlockCompressed4, 
# 1239
cudaResViewFormatUnsignedBlockCompressed5, 
# 1240
cudaResViewFormatSignedBlockCompressed5, 
# 1241
cudaResViewFormatUnsignedBlockCompressed6H, 
# 1242
cudaResViewFormatSignedBlockCompressed6H, 
# 1243
cudaResViewFormatUnsignedBlockCompressed7
# 1244
}; 
#endif
# 1249 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1249
struct cudaResourceDesc { 
# 1250
cudaResourceType resType; 
# 1252
union { 
# 1253
struct { 
# 1254
cudaArray_t array; 
# 1255
} array; 
# 1256
struct { 
# 1257
cudaMipmappedArray_t mipmap; 
# 1258
} mipmap; 
# 1259
struct { 
# 1260
void *devPtr; 
# 1261
cudaChannelFormatDesc desc; 
# 1262
size_t sizeInBytes; 
# 1263
} linear; 
# 1264
struct { 
# 1265
void *devPtr; 
# 1266
cudaChannelFormatDesc desc; 
# 1267
size_t width; 
# 1268
size_t height; 
# 1269
size_t pitchInBytes; 
# 1270
} pitch2D; 
# 1271
} res; 
# 1272
}; 
#endif
# 1277 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1277
struct cudaResourceViewDesc { 
# 1279
cudaResourceViewFormat format; 
# 1280
size_t width; 
# 1281
size_t height; 
# 1282
size_t depth; 
# 1283
unsigned firstMipmapLevel; 
# 1284
unsigned lastMipmapLevel; 
# 1285
unsigned firstLayer; 
# 1286
unsigned lastLayer; 
# 1287
}; 
#endif
# 1292 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1292
struct cudaPointerAttributes { 
# 1302 "/sw/summit/cuda/10.1.168/include/driver_types.h"
__attribute((deprecated)) cudaMemoryType memoryType; 
# 1308
cudaMemoryType type; 
# 1319 "/sw/summit/cuda/10.1.168/include/driver_types.h"
int device; 
# 1325
void *devicePointer; 
# 1334 "/sw/summit/cuda/10.1.168/include/driver_types.h"
void *hostPointer; 
# 1341
__attribute((deprecated)) int isManaged; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1342
}; 
#endif
# 1347 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1347
struct cudaFuncAttributes { 
# 1354
size_t sharedSizeBytes; 
# 1360
size_t constSizeBytes; 
# 1365
size_t localSizeBytes; 
# 1372
int maxThreadsPerBlock; 
# 1377
int numRegs; 
# 1384
int ptxVersion; 
# 1391
int binaryVersion; 
# 1397
int cacheModeCA; 
# 1404
int maxDynamicSharedSizeBytes; 
# 1413 "/sw/summit/cuda/10.1.168/include/driver_types.h"
int preferredShmemCarveout; 
# 1414
}; 
#endif
# 1419 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1419
enum cudaFuncAttribute { 
# 1421
cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
# 1422
cudaFuncAttributePreferredSharedMemoryCarveout, 
# 1423
cudaFuncAttributeMax
# 1424
}; 
#endif
# 1429 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1429
enum cudaFuncCache { 
# 1431
cudaFuncCachePreferNone, 
# 1432
cudaFuncCachePreferShared, 
# 1433
cudaFuncCachePreferL1, 
# 1434
cudaFuncCachePreferEqual
# 1435
}; 
#endif
# 1441 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1441
enum cudaSharedMemConfig { 
# 1443
cudaSharedMemBankSizeDefault, 
# 1444
cudaSharedMemBankSizeFourByte, 
# 1445
cudaSharedMemBankSizeEightByte
# 1446
}; 
#endif
# 1451 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1451
enum cudaSharedCarveout { 
# 1452
cudaSharedmemCarveoutDefault = (-1), 
# 1453
cudaSharedmemCarveoutMaxShared = 100, 
# 1454
cudaSharedmemCarveoutMaxL1 = 0
# 1455
}; 
#endif
# 1460 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1460
enum cudaComputeMode { 
# 1462
cudaComputeModeDefault, 
# 1463
cudaComputeModeExclusive, 
# 1464
cudaComputeModeProhibited, 
# 1465
cudaComputeModeExclusiveProcess
# 1466
}; 
#endif
# 1471 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1471
enum cudaLimit { 
# 1473
cudaLimitStackSize, 
# 1474
cudaLimitPrintfFifoSize, 
# 1475
cudaLimitMallocHeapSize, 
# 1476
cudaLimitDevRuntimeSyncDepth, 
# 1477
cudaLimitDevRuntimePendingLaunchCount, 
# 1478
cudaLimitMaxL2FetchGranularity
# 1479
}; 
#endif
# 1484 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1484
enum cudaMemoryAdvise { 
# 1486
cudaMemAdviseSetReadMostly = 1, 
# 1487
cudaMemAdviseUnsetReadMostly, 
# 1488
cudaMemAdviseSetPreferredLocation, 
# 1489
cudaMemAdviseUnsetPreferredLocation, 
# 1490
cudaMemAdviseSetAccessedBy, 
# 1491
cudaMemAdviseUnsetAccessedBy
# 1492
}; 
#endif
# 1497 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1497
enum cudaMemRangeAttribute { 
# 1499
cudaMemRangeAttributeReadMostly = 1, 
# 1500
cudaMemRangeAttributePreferredLocation, 
# 1501
cudaMemRangeAttributeAccessedBy, 
# 1502
cudaMemRangeAttributeLastPrefetchLocation
# 1503
}; 
#endif
# 1508 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1508
enum cudaOutputMode { 
# 1510
cudaKeyValuePair, 
# 1511
cudaCSV
# 1512
}; 
#endif
# 1517 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1517
enum cudaDeviceAttr { 
# 1519
cudaDevAttrMaxThreadsPerBlock = 1, 
# 1520
cudaDevAttrMaxBlockDimX, 
# 1521
cudaDevAttrMaxBlockDimY, 
# 1522
cudaDevAttrMaxBlockDimZ, 
# 1523
cudaDevAttrMaxGridDimX, 
# 1524
cudaDevAttrMaxGridDimY, 
# 1525
cudaDevAttrMaxGridDimZ, 
# 1526
cudaDevAttrMaxSharedMemoryPerBlock, 
# 1527
cudaDevAttrTotalConstantMemory, 
# 1528
cudaDevAttrWarpSize, 
# 1529
cudaDevAttrMaxPitch, 
# 1530
cudaDevAttrMaxRegistersPerBlock, 
# 1531
cudaDevAttrClockRate, 
# 1532
cudaDevAttrTextureAlignment, 
# 1533
cudaDevAttrGpuOverlap, 
# 1534
cudaDevAttrMultiProcessorCount, 
# 1535
cudaDevAttrKernelExecTimeout, 
# 1536
cudaDevAttrIntegrated, 
# 1537
cudaDevAttrCanMapHostMemory, 
# 1538
cudaDevAttrComputeMode, 
# 1539
cudaDevAttrMaxTexture1DWidth, 
# 1540
cudaDevAttrMaxTexture2DWidth, 
# 1541
cudaDevAttrMaxTexture2DHeight, 
# 1542
cudaDevAttrMaxTexture3DWidth, 
# 1543
cudaDevAttrMaxTexture3DHeight, 
# 1544
cudaDevAttrMaxTexture3DDepth, 
# 1545
cudaDevAttrMaxTexture2DLayeredWidth, 
# 1546
cudaDevAttrMaxTexture2DLayeredHeight, 
# 1547
cudaDevAttrMaxTexture2DLayeredLayers, 
# 1548
cudaDevAttrSurfaceAlignment, 
# 1549
cudaDevAttrConcurrentKernels, 
# 1550
cudaDevAttrEccEnabled, 
# 1551
cudaDevAttrPciBusId, 
# 1552
cudaDevAttrPciDeviceId, 
# 1553
cudaDevAttrTccDriver, 
# 1554
cudaDevAttrMemoryClockRate, 
# 1555
cudaDevAttrGlobalMemoryBusWidth, 
# 1556
cudaDevAttrL2CacheSize, 
# 1557
cudaDevAttrMaxThreadsPerMultiProcessor, 
# 1558
cudaDevAttrAsyncEngineCount, 
# 1559
cudaDevAttrUnifiedAddressing, 
# 1560
cudaDevAttrMaxTexture1DLayeredWidth, 
# 1561
cudaDevAttrMaxTexture1DLayeredLayers, 
# 1562
cudaDevAttrMaxTexture2DGatherWidth = 45, 
# 1563
cudaDevAttrMaxTexture2DGatherHeight, 
# 1564
cudaDevAttrMaxTexture3DWidthAlt, 
# 1565
cudaDevAttrMaxTexture3DHeightAlt, 
# 1566
cudaDevAttrMaxTexture3DDepthAlt, 
# 1567
cudaDevAttrPciDomainId, 
# 1568
cudaDevAttrTexturePitchAlignment, 
# 1569
cudaDevAttrMaxTextureCubemapWidth, 
# 1570
cudaDevAttrMaxTextureCubemapLayeredWidth, 
# 1571
cudaDevAttrMaxTextureCubemapLayeredLayers, 
# 1572
cudaDevAttrMaxSurface1DWidth, 
# 1573
cudaDevAttrMaxSurface2DWidth, 
# 1574
cudaDevAttrMaxSurface2DHeight, 
# 1575
cudaDevAttrMaxSurface3DWidth, 
# 1576
cudaDevAttrMaxSurface3DHeight, 
# 1577
cudaDevAttrMaxSurface3DDepth, 
# 1578
cudaDevAttrMaxSurface1DLayeredWidth, 
# 1579
cudaDevAttrMaxSurface1DLayeredLayers, 
# 1580
cudaDevAttrMaxSurface2DLayeredWidth, 
# 1581
cudaDevAttrMaxSurface2DLayeredHeight, 
# 1582
cudaDevAttrMaxSurface2DLayeredLayers, 
# 1583
cudaDevAttrMaxSurfaceCubemapWidth, 
# 1584
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
# 1585
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
# 1586
cudaDevAttrMaxTexture1DLinearWidth, 
# 1587
cudaDevAttrMaxTexture2DLinearWidth, 
# 1588
cudaDevAttrMaxTexture2DLinearHeight, 
# 1589
cudaDevAttrMaxTexture2DLinearPitch, 
# 1590
cudaDevAttrMaxTexture2DMipmappedWidth, 
# 1591
cudaDevAttrMaxTexture2DMipmappedHeight, 
# 1592
cudaDevAttrComputeCapabilityMajor, 
# 1593
cudaDevAttrComputeCapabilityMinor, 
# 1594
cudaDevAttrMaxTexture1DMipmappedWidth, 
# 1595
cudaDevAttrStreamPrioritiesSupported, 
# 1596
cudaDevAttrGlobalL1CacheSupported, 
# 1597
cudaDevAttrLocalL1CacheSupported, 
# 1598
cudaDevAttrMaxSharedMemoryPerMultiprocessor, 
# 1599
cudaDevAttrMaxRegistersPerMultiprocessor, 
# 1600
cudaDevAttrManagedMemory, 
# 1601
cudaDevAttrIsMultiGpuBoard, 
# 1602
cudaDevAttrMultiGpuBoardGroupID, 
# 1603
cudaDevAttrHostNativeAtomicSupported, 
# 1604
cudaDevAttrSingleToDoublePrecisionPerfRatio, 
# 1605
cudaDevAttrPageableMemoryAccess, 
# 1606
cudaDevAttrConcurrentManagedAccess, 
# 1607
cudaDevAttrComputePreemptionSupported, 
# 1608
cudaDevAttrCanUseHostPointerForRegisteredMem, 
# 1609
cudaDevAttrReserved92, 
# 1610
cudaDevAttrReserved93, 
# 1611
cudaDevAttrReserved94, 
# 1612
cudaDevAttrCooperativeLaunch, 
# 1613
cudaDevAttrCooperativeMultiDeviceLaunch, 
# 1614
cudaDevAttrMaxSharedMemoryPerBlockOptin, 
# 1615
cudaDevAttrCanFlushRemoteWrites, 
# 1616
cudaDevAttrHostRegisterSupported, 
# 1617
cudaDevAttrPageableMemoryAccessUsesHostPageTables, 
# 1618
cudaDevAttrDirectManagedMemAccessFromHost
# 1619
}; 
#endif
# 1625 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1625
enum cudaDeviceP2PAttr { 
# 1626
cudaDevP2PAttrPerformanceRank = 1, 
# 1627
cudaDevP2PAttrAccessSupported, 
# 1628
cudaDevP2PAttrNativeAtomicSupported, 
# 1629
cudaDevP2PAttrCudaArrayAccessSupported
# 1630
}; 
#endif
# 1637 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1637
struct CUuuid_st { 
# 1638
char bytes[16]; 
# 1639
}; 
#endif
# 1640 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
typedef CUuuid_st 
# 1640
CUuuid; 
#endif
# 1642 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
typedef CUuuid_st 
# 1642
cudaUUID_t; 
#endif
# 1647 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1647
struct cudaDeviceProp { 
# 1649
char name[256]; 
# 1650
cudaUUID_t uuid; 
# 1651
char luid[8]; 
# 1652
unsigned luidDeviceNodeMask; 
# 1653
size_t totalGlobalMem; 
# 1654
size_t sharedMemPerBlock; 
# 1655
int regsPerBlock; 
# 1656
int warpSize; 
# 1657
size_t memPitch; 
# 1658
int maxThreadsPerBlock; 
# 1659
int maxThreadsDim[3]; 
# 1660
int maxGridSize[3]; 
# 1661
int clockRate; 
# 1662
size_t totalConstMem; 
# 1663
int major; 
# 1664
int minor; 
# 1665
size_t textureAlignment; 
# 1666
size_t texturePitchAlignment; 
# 1667
int deviceOverlap; 
# 1668
int multiProcessorCount; 
# 1669
int kernelExecTimeoutEnabled; 
# 1670
int integrated; 
# 1671
int canMapHostMemory; 
# 1672
int computeMode; 
# 1673
int maxTexture1D; 
# 1674
int maxTexture1DMipmap; 
# 1675
int maxTexture1DLinear; 
# 1676
int maxTexture2D[2]; 
# 1677
int maxTexture2DMipmap[2]; 
# 1678
int maxTexture2DLinear[3]; 
# 1679
int maxTexture2DGather[2]; 
# 1680
int maxTexture3D[3]; 
# 1681
int maxTexture3DAlt[3]; 
# 1682
int maxTextureCubemap; 
# 1683
int maxTexture1DLayered[2]; 
# 1684
int maxTexture2DLayered[3]; 
# 1685
int maxTextureCubemapLayered[2]; 
# 1686
int maxSurface1D; 
# 1687
int maxSurface2D[2]; 
# 1688
int maxSurface3D[3]; 
# 1689
int maxSurface1DLayered[2]; 
# 1690
int maxSurface2DLayered[3]; 
# 1691
int maxSurfaceCubemap; 
# 1692
int maxSurfaceCubemapLayered[2]; 
# 1693
size_t surfaceAlignment; 
# 1694
int concurrentKernels; 
# 1695
int ECCEnabled; 
# 1696
int pciBusID; 
# 1697
int pciDeviceID; 
# 1698
int pciDomainID; 
# 1699
int tccDriver; 
# 1700
int asyncEngineCount; 
# 1701
int unifiedAddressing; 
# 1702
int memoryClockRate; 
# 1703
int memoryBusWidth; 
# 1704
int l2CacheSize; 
# 1705
int maxThreadsPerMultiProcessor; 
# 1706
int streamPrioritiesSupported; 
# 1707
int globalL1CacheSupported; 
# 1708
int localL1CacheSupported; 
# 1709
size_t sharedMemPerMultiprocessor; 
# 1710
int regsPerMultiprocessor; 
# 1711
int managedMemory; 
# 1712
int isMultiGpuBoard; 
# 1713
int multiGpuBoardGroupID; 
# 1714
int hostNativeAtomicSupported; 
# 1715
int singleToDoublePrecisionPerfRatio; 
# 1716
int pageableMemoryAccess; 
# 1717
int concurrentManagedAccess; 
# 1718
int computePreemptionSupported; 
# 1719
int canUseHostPointerForRegisteredMem; 
# 1720
int cooperativeLaunch; 
# 1721
int cooperativeMultiDeviceLaunch; 
# 1722
size_t sharedMemPerBlockOptin; 
# 1723
int pageableMemoryAccessUsesHostPageTables; 
# 1724
int directManagedMemAccessFromHost; 
# 1725
}; 
#endif
# 1818 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
typedef 
# 1815
struct cudaIpcEventHandle_st { 
# 1817
char reserved[64]; 
# 1818
} cudaIpcEventHandle_t; 
#endif
# 1826 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
typedef 
# 1823
struct cudaIpcMemHandle_st { 
# 1825
char reserved[64]; 
# 1826
} cudaIpcMemHandle_t; 
#endif
# 1831 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1831
enum cudaExternalMemoryHandleType { 
# 1835
cudaExternalMemoryHandleTypeOpaqueFd = 1, 
# 1839
cudaExternalMemoryHandleTypeOpaqueWin32, 
# 1843
cudaExternalMemoryHandleTypeOpaqueWin32Kmt, 
# 1847
cudaExternalMemoryHandleTypeD3D12Heap, 
# 1851
cudaExternalMemoryHandleTypeD3D12Resource
# 1852
}; 
#endif
# 1862 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1862
struct cudaExternalMemoryHandleDesc { 
# 1866
cudaExternalMemoryHandleType type; 
# 1867
union { 
# 1873
int fd; 
# 1885 "/sw/summit/cuda/10.1.168/include/driver_types.h"
struct { 
# 1889
void *handle; 
# 1894
const void *name; 
# 1895
} win32; 
# 1896
} handle; 
# 1900
unsigned long long size; 
# 1904
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1905
}; 
#endif
# 1910 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1910
struct cudaExternalMemoryBufferDesc { 
# 1914
unsigned long long offset; 
# 1918
unsigned long long size; 
# 1922
unsigned flags; 
# 1923
}; 
#endif
# 1928 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1928
struct cudaExternalMemoryMipmappedArrayDesc { 
# 1933
unsigned long long offset; 
# 1937
cudaChannelFormatDesc formatDesc; 
# 1941
cudaExtent extent; 
# 1946
unsigned flags; 
# 1950
unsigned numLevels; 
# 1951
}; 
#endif
# 1956 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1956
enum cudaExternalSemaphoreHandleType { 
# 1960
cudaExternalSemaphoreHandleTypeOpaqueFd = 1, 
# 1964
cudaExternalSemaphoreHandleTypeOpaqueWin32, 
# 1968
cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt, 
# 1972
cudaExternalSemaphoreHandleTypeD3D12Fence
# 1973
}; 
#endif
# 1978 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 1978
struct cudaExternalSemaphoreHandleDesc { 
# 1982
cudaExternalSemaphoreHandleType type; 
# 1983
union { 
# 1988
int fd; 
# 1999 "/sw/summit/cuda/10.1.168/include/driver_types.h"
struct { 
# 2003
void *handle; 
# 2008
const void *name; 
# 2009
} win32; 
# 2010
} handle; 
# 2014
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2015
}; 
#endif
# 2020 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 2020
struct cudaExternalSemaphoreSignalParams { 
# 2021
union { 
# 2025
struct { 
# 2029
unsigned long long value; 
# 2030
} fence; 
# 2031
} params; 
# 2035
unsigned flags; 
# 2036
}; 
#endif
# 2041 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 2041
struct cudaExternalSemaphoreWaitParams { 
# 2042
union { 
# 2046
struct { 
# 2050
unsigned long long value; 
# 2051
} fence; 
# 2052
} params; 
# 2056
unsigned flags; 
# 2057
}; 
#endif
# 2069 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
typedef cudaError 
# 2069
cudaError_t; 
#endif
# 2074 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
typedef struct CUstream_st *
# 2074
cudaStream_t; 
#endif
# 2079 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
typedef struct CUevent_st *
# 2079
cudaEvent_t; 
#endif
# 2084 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
typedef cudaGraphicsResource *
# 2084
cudaGraphicsResource_t; 
#endif
# 2089 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
typedef cudaOutputMode 
# 2089
cudaOutputMode_t; 
#endif
# 2094 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
typedef struct CUexternalMemory_st *
# 2094
cudaExternalMemory_t; 
#endif
# 2099 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
typedef struct CUexternalSemaphore_st *
# 2099
cudaExternalSemaphore_t; 
#endif
# 2104 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
typedef struct CUgraph_st *
# 2104
cudaGraph_t; 
#endif
# 2109 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
typedef struct CUgraphNode_st *
# 2109
cudaGraphNode_t; 
#endif
# 2114 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 2114
enum cudaCGScope { 
# 2115
cudaCGScopeInvalid, 
# 2116
cudaCGScopeGrid, 
# 2117
cudaCGScopeMultiGrid
# 2118
}; 
#endif
# 2123 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 2123
struct cudaLaunchParams { 
# 2125
void *func; 
# 2126
dim3 gridDim; 
# 2127
dim3 blockDim; 
# 2128
void **args; 
# 2129
size_t sharedMem; 
# 2130
cudaStream_t stream; 
# 2131
}; 
#endif
# 2136 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 2136
struct cudaKernelNodeParams { 
# 2137
void *func; 
# 2138
dim3 gridDim; 
# 2139
dim3 blockDim; 
# 2140
unsigned sharedMemBytes; 
# 2141
void **kernelParams; 
# 2142
void **extra; 
# 2143
}; 
#endif
# 2148 "/sw/summit/cuda/10.1.168/include/driver_types.h"
#if 0
# 2148
enum cudaGraphNodeType { 
# 2149
cudaGraphNodeTypeKernel, 
# 2150
cudaGraphNodeTypeMemcpy, 
# 2151
cudaGraphNodeTypeMemset, 
# 2152
cudaGraphNodeTypeHost, 
# 2153
cudaGraphNodeTypeGraph, 
# 2154
cudaGraphNodeTypeEmpty, 
# 2155
cudaGraphNodeTypeCount
# 2156
}; 
#endif
# 2161 "/sw/summit/cuda/10.1.168/include/driver_types.h"
typedef struct CUgraphExec_st *cudaGraphExec_t; 
# 84 "/sw/summit/cuda/10.1.168/include/surface_types.h"
#if 0
# 84
enum cudaSurfaceBoundaryMode { 
# 86
cudaBoundaryModeZero, 
# 87
cudaBoundaryModeClamp, 
# 88
cudaBoundaryModeTrap
# 89
}; 
#endif
# 94 "/sw/summit/cuda/10.1.168/include/surface_types.h"
#if 0
# 94
enum cudaSurfaceFormatMode { 
# 96
cudaFormatModeForced, 
# 97
cudaFormatModeAuto
# 98
}; 
#endif
# 103 "/sw/summit/cuda/10.1.168/include/surface_types.h"
#if 0
# 103
struct surfaceReference { 
# 108
cudaChannelFormatDesc channelDesc; 
# 109
}; 
#endif
# 114 "/sw/summit/cuda/10.1.168/include/surface_types.h"
#if 0
typedef unsigned long long 
# 114
cudaSurfaceObject_t; 
#endif
# 84 "/sw/summit/cuda/10.1.168/include/texture_types.h"
#if 0
# 84
enum cudaTextureAddressMode { 
# 86
cudaAddressModeWrap, 
# 87
cudaAddressModeClamp, 
# 88
cudaAddressModeMirror, 
# 89
cudaAddressModeBorder
# 90
}; 
#endif
# 95 "/sw/summit/cuda/10.1.168/include/texture_types.h"
#if 0
# 95
enum cudaTextureFilterMode { 
# 97
cudaFilterModePoint, 
# 98
cudaFilterModeLinear
# 99
}; 
#endif
# 104 "/sw/summit/cuda/10.1.168/include/texture_types.h"
#if 0
# 104
enum cudaTextureReadMode { 
# 106
cudaReadModeElementType, 
# 107
cudaReadModeNormalizedFloat
# 108
}; 
#endif
# 113 "/sw/summit/cuda/10.1.168/include/texture_types.h"
#if 0
# 113
struct textureReference { 
# 118
int normalized; 
# 122
cudaTextureFilterMode filterMode; 
# 126
cudaTextureAddressMode addressMode[3]; 
# 130
cudaChannelFormatDesc channelDesc; 
# 134
int sRGB; 
# 138
unsigned maxAnisotropy; 
# 142
cudaTextureFilterMode mipmapFilterMode; 
# 146
float mipmapLevelBias; 
# 150
float minMipmapLevelClamp; 
# 154
float maxMipmapLevelClamp; 
# 155
int __cudaReserved[15]; 
# 156
}; 
#endif
# 161 "/sw/summit/cuda/10.1.168/include/texture_types.h"
#if 0
# 161
struct cudaTextureDesc { 
# 166
cudaTextureAddressMode addressMode[3]; 
# 170
cudaTextureFilterMode filterMode; 
# 174
cudaTextureReadMode readMode; 
# 178
int sRGB; 
# 182
float borderColor[4]; 
# 186
int normalizedCoords; 
# 190
unsigned maxAnisotropy; 
# 194
cudaTextureFilterMode mipmapFilterMode; 
# 198
float mipmapLevelBias; 
# 202
float minMipmapLevelClamp; 
# 206
float maxMipmapLevelClamp; 
# 207
}; 
#endif
# 212 "/sw/summit/cuda/10.1.168/include/texture_types.h"
#if 0
typedef unsigned long long 
# 212
cudaTextureObject_t; 
#endif
# 70 "/sw/summit/cuda/10.1.168/include/library_types.h"
typedef 
# 54
enum cudaDataType_t { 
# 56
CUDA_R_16F = 2, 
# 57
CUDA_C_16F = 6, 
# 58
CUDA_R_32F = 0, 
# 59
CUDA_C_32F = 4, 
# 60
CUDA_R_64F = 1, 
# 61
CUDA_C_64F = 5, 
# 62
CUDA_R_8I = 3, 
# 63
CUDA_C_8I = 7, 
# 64
CUDA_R_8U, 
# 65
CUDA_C_8U, 
# 66
CUDA_R_32I, 
# 67
CUDA_C_32I, 
# 68
CUDA_R_32U, 
# 69
CUDA_C_32U
# 70
} cudaDataType; 
# 78
typedef 
# 73
enum libraryPropertyType_t { 
# 75
MAJOR_VERSION, 
# 76
MINOR_VERSION, 
# 77
PATCH_LEVEL
# 78
} libraryPropertyType; 
# 121 "/sw/summit/cuda/10.1.168/include/cuda_device_runtime_api.h"
extern "C" {
# 123
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 124
extern cudaError_t cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 125
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 126
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 127
extern cudaError_t cudaDeviceSynchronize(); 
# 128
extern cudaError_t cudaGetLastError(); 
# 129
extern cudaError_t cudaPeekAtLastError(); 
# 130
extern const char *cudaGetErrorString(cudaError_t error); 
# 131
extern const char *cudaGetErrorName(cudaError_t error); 
# 132
extern cudaError_t cudaGetDeviceCount(int * count); 
# 133
extern cudaError_t cudaGetDevice(int * device); 
# 134
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 135
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 136
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 137
__attribute__((unused)) extern cudaError_t cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 138
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 139
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream); 
# 140
__attribute__((unused)) extern cudaError_t cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
# 141
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 142
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 143
extern cudaError_t cudaFree(void * devPtr); 
# 144
extern cudaError_t cudaMalloc(void ** devPtr, size_t size); 
# 145
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 146
__attribute__((unused)) extern cudaError_t cudaMemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 147
extern cudaError_t cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 148
__attribute__((unused)) extern cudaError_t cudaMemcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 149
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 150
__attribute__((unused)) extern cudaError_t cudaMemcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 151
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
# 152
__attribute__((unused)) extern cudaError_t cudaMemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); 
# 153
extern cudaError_t cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
# 154
__attribute__((unused)) extern cudaError_t cudaMemset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
# 155
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 156
__attribute__((unused)) extern cudaError_t cudaMemset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 157
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 178 "/sw/summit/cuda/10.1.168/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern void *cudaGetParameterBuffer(size_t alignment, size_t size); 
# 206 "/sw/summit/cuda/10.1.168/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern void *cudaGetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
# 207
__attribute__((unused)) extern cudaError_t cudaLaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 208
__attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
# 226 "/sw/summit/cuda/10.1.168/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaLaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 227
__attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
# 230
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
# 231
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 233
__attribute__((unused)) extern unsigned long long cudaCGGetIntrinsicHandle(cudaCGScope scope); 
# 234
__attribute__((unused)) extern cudaError_t cudaCGSynchronize(unsigned long long handle, unsigned flags); 
# 235
__attribute__((unused)) extern cudaError_t cudaCGSynchronizeGrid(unsigned long long handle, unsigned flags); 
# 236
__attribute__((unused)) extern cudaError_t cudaCGGetSize(unsigned * numThreads, unsigned * numGrids, unsigned long long handle); 
# 237
__attribute__((unused)) extern cudaError_t cudaCGGetRank(unsigned * threadRank, unsigned * gridRank, unsigned long long handle); 
# 238
}
# 240
template< class T> static inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
# 241
template< class T> static inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
# 242
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
# 243
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 245 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern "C" {
# 280 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceReset(); 
# 301 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSynchronize(); 
# 386 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value); 
# 420 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 453 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 490 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
# 534 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
# 565 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 609 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
# 636 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
# 666 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
# 713 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
# 753 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
# 796 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
# 854 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
# 889 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcCloseMemHandle(void * devPtr); 
# 931 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadExit(); 
# 957 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSynchronize(); 
# 1006 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSetLimit(cudaLimit limit, size_t value); 
# 1039 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
# 1075 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 1122 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
# 1181 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetLastError(); 
# 1227 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaPeekAtLastError(); 
# 1243 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern const char *cudaGetErrorName(cudaError_t error); 
# 1259 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern const char *cudaGetErrorString(cudaError_t error); 
# 1288 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceCount(int * count); 
# 1559 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceProperties(cudaDeviceProp * prop, int device); 
# 1748 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 1788 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
# 1809 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
# 1846 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDevice(int device); 
# 1867 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDevice(int * device); 
# 1898 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaSetValidDevices(int * device_arr, int len); 
# 1967 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDeviceFlags(unsigned flags); 
# 2013 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceFlags(unsigned * flags); 
# 2053 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreate(cudaStream_t * pStream); 
# 2085 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 2131 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
# 2158 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
# 2183 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
# 2214 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 2240 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 2248
typedef void (*cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
# 2315 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
# 2339 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamSynchronize(cudaStream_t stream); 
# 2364 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamQuery(cudaStream_t stream); 
# 2447 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4); 
# 2483 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode); 
# 2534 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode * mode); 
# 2562 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t * pGraph); 
# 2600 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus); 
# 2628 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetCaptureInfo(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus, unsigned long long * pId); 
# 2666 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreate(cudaEvent_t * event); 
# 2703 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 2742 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
# 2773 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaEventQuery(cudaEvent_t event); 
# 2803 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaEventSynchronize(cudaEvent_t event); 
# 2830 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 2873 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
# 3012 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaImportExternalMemory(cudaExternalMemory_t * extMem_out, const cudaExternalMemoryHandleDesc * memHandleDesc); 
# 3066 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaExternalMemoryGetMappedBuffer(void ** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc * bufferDesc); 
# 3121 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t * mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc * mipmapDesc); 
# 3144 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem); 
# 3238 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t * extSem_out, const cudaExternalSemaphoreHandleDesc * semHandleDesc); 
# 3277 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaSignalExternalSemaphoresAsync(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreSignalParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 3320 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaWaitExternalSemaphoresAsync(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreWaitParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 3342 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem); 
# 3407 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
# 3464 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchCooperativeKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
# 3563 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchCooperativeKernelMultiDevice(cudaLaunchParams * launchParamsList, unsigned numDevices, unsigned flags = 0); 
# 3612 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
# 3667 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
# 3702 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 3741 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetAttribute(const void * func, cudaFuncAttribute attr, int value); 
# 3765 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForDevice(double * d); 
# 3789 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForHost(double * d); 
# 3855 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void * userData); 
# 3910 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
# 3954 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
# 4074 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1); 
# 4105 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc(void ** devPtr, size_t size); 
# 4138 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocHost(void ** ptr, size_t size); 
# 4181 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
# 4227 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
# 4256 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaFree(void * devPtr); 
# 4279 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeHost(void * ptr); 
# 4302 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeArray(cudaArray_t array); 
# 4325 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
# 4391 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
# 4475 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaHostRegister(void * ptr, size_t size, unsigned flags); 
# 4498 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaHostUnregister(void * ptr); 
# 4543 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
# 4565 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetFlags(unsigned * pFlags, void * pHost); 
# 4604 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
# 4743 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
# 4882 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
# 4911 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
# 5016 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms * p); 
# 5047 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
# 5165 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
# 5191 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
# 5213 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemGetInfo(size_t * free, size_t * total); 
# 5239 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
# 5282 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 5317 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
# 5365 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 5414 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 5463 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
# 5510 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 5553 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
# 5596 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
# 5652 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 5687 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
# 5749 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 5806 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 5862 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 5913 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 5964 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 5993 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset(void * devPtr, int value, size_t count); 
# 6027 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
# 6071 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
# 6107 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
# 6148 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
# 6199 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
# 6227 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
# 6254 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolSize(size_t * size, const void * symbol); 
# 6324 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0); 
# 6440 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device); 
# 6499 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count); 
# 6538 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count); 
# 6598 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
# 6640 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
# 6683 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 6734 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6784 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6950 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
# 6991 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
# 7033 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
# 7055 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice); 
# 7118 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
# 7153 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
# 7192 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 7227 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 7259 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
# 7297 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
# 7326 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
# 7397 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaBindTexture(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t size = ((2147483647) * 2U) + 1U); 
# 7456 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaBindTexture2D(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t width, size_t height, size_t pitch); 
# 7494 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaBindTextureToArray(const textureReference * texref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
# 7534 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaBindTextureToMipmappedArray(const textureReference * texref, cudaMipmappedArray_const_t mipmappedArray, const cudaChannelFormatDesc * desc); 
# 7560 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaUnbindTexture(const textureReference * texref); 
# 7589 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureAlignmentOffset(size_t * offset, const textureReference * texref); 
# 7619 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureReference(const textureReference ** texref, const void * symbol); 
# 7664 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaBindSurfaceToArray(const surfaceReference * surfref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
# 7689 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSurfaceReference(const surfaceReference ** surfref, const void * symbol); 
# 7724 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
# 7754 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
# 7969 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
# 7988 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject); 
# 8008 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
# 8028 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
# 8049 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
# 8094 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
# 8113 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
# 8132 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
# 8166 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaDriverGetVersion(int * driverVersion); 
# 8191 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 8238 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphCreate(cudaGraph_t * pGraph, unsigned flags); 
# 8335 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaKernelNodeParams * pNodeParams); 
# 8368 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams * pNodeParams); 
# 8393 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 8437 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemcpy3DParms * pCopyParams); 
# 8460 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms * pNodeParams); 
# 8483 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 8525 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemsetParams * pMemsetParams); 
# 8548 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams * pNodeParams); 
# 8571 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 8612 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddHostNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaHostNodeParams * pNodeParams); 
# 8635 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams * pNodeParams); 
# 8658 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 8696 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaGraph_t childGraph); 
# 8720 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t * pGraph); 
# 8757 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies); 
# 8784 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphClone(cudaGraph_t * pGraphClone, cudaGraph_t originalGraph); 
# 8812 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t * pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph); 
# 8843 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType * pType); 
# 8874 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t * nodes, size_t * numNodes); 
# 8905 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t * pRootNodes, size_t * pNumRootNodes); 
# 8939 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, size_t * numEdges); 
# 8970 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, size_t * pNumDependencies); 
# 9002 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, size_t * pNumDependentNodes); 
# 9033 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
# 9064 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
# 9090 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node); 
# 9126 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiate(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, cudaGraphNode_t * pErrorNode, char * pLogBuffer, size_t bufferSize); 
# 9160 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 9185 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 9206 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec); 
# 9226 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDestroy(cudaGraph_t graph); 
# 9231
extern cudaError_t cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
# 9476 "/sw/summit/cuda/10.1.168/include/cuda_runtime_api.h"
}
# 104 "/sw/summit/cuda/10.1.168/include/channel_descriptor.h"
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 105
{ 
# 106
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 107
} 
# 109
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
# 110
{ 
# 111
int e = (((int)sizeof(unsigned short)) * 8); 
# 113
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 114
} 
# 116
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
# 117
{ 
# 118
int e = (((int)sizeof(unsigned short)) * 8); 
# 120
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 121
} 
# 123
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
# 124
{ 
# 125
int e = (((int)sizeof(unsigned short)) * 8); 
# 127
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 128
} 
# 130
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
# 131
{ 
# 132
int e = (((int)sizeof(unsigned short)) * 8); 
# 134
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 135
} 
# 137
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
# 138
{ 
# 139
int e = (((int)sizeof(char)) * 8); 
# 142
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 146
} 
# 148
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
# 149
{ 
# 150
int e = (((int)sizeof(signed char)) * 8); 
# 152
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 153
} 
# 155
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
# 156
{ 
# 157
int e = (((int)sizeof(unsigned char)) * 8); 
# 159
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 160
} 
# 162
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
# 163
{ 
# 164
int e = (((int)sizeof(signed char)) * 8); 
# 166
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 167
} 
# 169
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
# 170
{ 
# 171
int e = (((int)sizeof(unsigned char)) * 8); 
# 173
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 174
} 
# 176
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
# 177
{ 
# 178
int e = (((int)sizeof(signed char)) * 8); 
# 180
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 181
} 
# 183
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
# 184
{ 
# 185
int e = (((int)sizeof(unsigned char)) * 8); 
# 187
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 188
} 
# 190
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
# 191
{ 
# 192
int e = (((int)sizeof(signed char)) * 8); 
# 194
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 195
} 
# 197
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
# 198
{ 
# 199
int e = (((int)sizeof(unsigned char)) * 8); 
# 201
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 202
} 
# 204
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
# 205
{ 
# 206
int e = (((int)sizeof(short)) * 8); 
# 208
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 209
} 
# 211
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
# 212
{ 
# 213
int e = (((int)sizeof(unsigned short)) * 8); 
# 215
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 216
} 
# 218
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
# 219
{ 
# 220
int e = (((int)sizeof(short)) * 8); 
# 222
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 223
} 
# 225
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
# 226
{ 
# 227
int e = (((int)sizeof(unsigned short)) * 8); 
# 229
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 230
} 
# 232
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
# 233
{ 
# 234
int e = (((int)sizeof(short)) * 8); 
# 236
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 237
} 
# 239
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
# 240
{ 
# 241
int e = (((int)sizeof(unsigned short)) * 8); 
# 243
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 244
} 
# 246
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
# 247
{ 
# 248
int e = (((int)sizeof(short)) * 8); 
# 250
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 251
} 
# 253
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
# 254
{ 
# 255
int e = (((int)sizeof(unsigned short)) * 8); 
# 257
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 258
} 
# 260
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
# 261
{ 
# 262
int e = (((int)sizeof(int)) * 8); 
# 264
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 265
} 
# 267
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
# 268
{ 
# 269
int e = (((int)sizeof(unsigned)) * 8); 
# 271
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 272
} 
# 274
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
# 275
{ 
# 276
int e = (((int)sizeof(int)) * 8); 
# 278
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 279
} 
# 281
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
# 282
{ 
# 283
int e = (((int)sizeof(unsigned)) * 8); 
# 285
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 286
} 
# 288
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
# 289
{ 
# 290
int e = (((int)sizeof(int)) * 8); 
# 292
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 293
} 
# 295
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
# 296
{ 
# 297
int e = (((int)sizeof(unsigned)) * 8); 
# 299
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 300
} 
# 302
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
# 303
{ 
# 304
int e = (((int)sizeof(int)) * 8); 
# 306
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 307
} 
# 309
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
# 310
{ 
# 311
int e = (((int)sizeof(unsigned)) * 8); 
# 313
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 314
} 
# 376 "/sw/summit/cuda/10.1.168/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
# 377
{ 
# 378
int e = (((int)sizeof(float)) * 8); 
# 380
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 381
} 
# 383
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
# 384
{ 
# 385
int e = (((int)sizeof(float)) * 8); 
# 387
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 388
} 
# 390
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
# 391
{ 
# 392
int e = (((int)sizeof(float)) * 8); 
# 394
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 395
} 
# 397
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
# 398
{ 
# 399
int e = (((int)sizeof(float)) * 8); 
# 401
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 402
} 
# 79 "/sw/summit/cuda/10.1.168/include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
# 80
{ 
# 81
cudaPitchedPtr s; 
# 83
(s.ptr) = d; 
# 84
(s.pitch) = p; 
# 85
(s.xsize) = xsz; 
# 86
(s.ysize) = ysz; 
# 88
return s; 
# 89
} 
# 106 "/sw/summit/cuda/10.1.168/include/driver_functions.h"
static inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
# 107
{ 
# 108
cudaPos p; 
# 110
(p.x) = x; 
# 111
(p.y) = y; 
# 112
(p.z) = z; 
# 114
return p; 
# 115
} 
# 132 "/sw/summit/cuda/10.1.168/include/driver_functions.h"
static inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
# 133
{ 
# 134
cudaExtent e; 
# 136
(e.width) = w; 
# 137
(e.height) = h; 
# 138
(e.depth) = d; 
# 140
return e; 
# 141
} 
# 73 "/sw/summit/cuda/10.1.168/include/vector_functions.h"
static inline char1 make_char1(signed char x); 
# 75
static inline uchar1 make_uchar1(unsigned char x); 
# 77
static inline char2 make_char2(signed char x, signed char y); 
# 79
static inline uchar2 make_uchar2(unsigned char x, unsigned char y); 
# 81
static inline char3 make_char3(signed char x, signed char y, signed char z); 
# 83
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z); 
# 85
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w); 
# 87
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w); 
# 89
static inline short1 make_short1(short x); 
# 91
static inline ushort1 make_ushort1(unsigned short x); 
# 93
static inline short2 make_short2(short x, short y); 
# 95
static inline ushort2 make_ushort2(unsigned short x, unsigned short y); 
# 97
static inline short3 make_short3(short x, short y, short z); 
# 99
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z); 
# 101
static inline short4 make_short4(short x, short y, short z, short w); 
# 103
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w); 
# 105
static inline int1 make_int1(int x); 
# 107
static inline uint1 make_uint1(unsigned x); 
# 109
static inline int2 make_int2(int x, int y); 
# 111
static inline uint2 make_uint2(unsigned x, unsigned y); 
# 113
static inline int3 make_int3(int x, int y, int z); 
# 115
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z); 
# 117
static inline int4 make_int4(int x, int y, int z, int w); 
# 119
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w); 
# 121
static inline long1 make_long1(long x); 
# 123
static inline ulong1 make_ulong1(unsigned long x); 
# 125
static inline long2 make_long2(long x, long y); 
# 127
static inline ulong2 make_ulong2(unsigned long x, unsigned long y); 
# 129
static inline long3 make_long3(long x, long y, long z); 
# 131
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z); 
# 133
static inline long4 make_long4(long x, long y, long z, long w); 
# 135
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w); 
# 137
static inline float1 make_float1(float x); 
# 139
static inline float2 make_float2(float x, float y); 
# 141
static inline float3 make_float3(float x, float y, float z); 
# 143
static inline float4 make_float4(float x, float y, float z, float w); 
# 145
static inline longlong1 make_longlong1(long long x); 
# 147
static inline ulonglong1 make_ulonglong1(unsigned long long x); 
# 149
static inline longlong2 make_longlong2(long long x, long long y); 
# 151
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y); 
# 153
static inline longlong3 make_longlong3(long long x, long long y, long long z); 
# 155
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z); 
# 157
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w); 
# 159
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w); 
# 161
static inline double1 make_double1(double x); 
# 163
static inline double2 make_double2(double x, double y); 
# 165
static inline double3 make_double3(double x, double y, double z); 
# 167
static inline double4 make_double4(double x, double y, double z, double w); 
# 73 "/sw/summit/cuda/10.1.168/include/vector_functions.hpp"
static inline char1 make_char1(signed char x) 
# 74
{ 
# 75
char1 t; (t.x) = x; return t; 
# 76
} 
# 78
static inline uchar1 make_uchar1(unsigned char x) 
# 79
{ 
# 80
uchar1 t; (t.x) = x; return t; 
# 81
} 
# 83
static inline char2 make_char2(signed char x, signed char y) 
# 84
{ 
# 85
char2 t; (t.x) = x; (t.y) = y; return t; 
# 86
} 
# 88
static inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
# 89
{ 
# 90
uchar2 t; (t.x) = x; (t.y) = y; return t; 
# 91
} 
# 93
static inline char3 make_char3(signed char x, signed char y, signed char z) 
# 94
{ 
# 95
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 96
} 
# 98
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
# 99
{ 
# 100
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 101
} 
# 103
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
# 104
{ 
# 105
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 106
} 
# 108
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
# 109
{ 
# 110
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 111
} 
# 113
static inline short1 make_short1(short x) 
# 114
{ 
# 115
short1 t; (t.x) = x; return t; 
# 116
} 
# 118
static inline ushort1 make_ushort1(unsigned short x) 
# 119
{ 
# 120
ushort1 t; (t.x) = x; return t; 
# 121
} 
# 123
static inline short2 make_short2(short x, short y) 
# 124
{ 
# 125
short2 t; (t.x) = x; (t.y) = y; return t; 
# 126
} 
# 128
static inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
# 129
{ 
# 130
ushort2 t; (t.x) = x; (t.y) = y; return t; 
# 131
} 
# 133
static inline short3 make_short3(short x, short y, short z) 
# 134
{ 
# 135
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 136
} 
# 138
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
# 139
{ 
# 140
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 141
} 
# 143
static inline short4 make_short4(short x, short y, short z, short w) 
# 144
{ 
# 145
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 146
} 
# 148
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
# 149
{ 
# 150
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 151
} 
# 153
static inline int1 make_int1(int x) 
# 154
{ 
# 155
int1 t; (t.x) = x; return t; 
# 156
} 
# 158
static inline uint1 make_uint1(unsigned x) 
# 159
{ 
# 160
uint1 t; (t.x) = x; return t; 
# 161
} 
# 163
static inline int2 make_int2(int x, int y) 
# 164
{ 
# 165
int2 t; (t.x) = x; (t.y) = y; return t; 
# 166
} 
# 168
static inline uint2 make_uint2(unsigned x, unsigned y) 
# 169
{ 
# 170
uint2 t; (t.x) = x; (t.y) = y; return t; 
# 171
} 
# 173
static inline int3 make_int3(int x, int y, int z) 
# 174
{ 
# 175
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 176
} 
# 178
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
# 179
{ 
# 180
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 181
} 
# 183
static inline int4 make_int4(int x, int y, int z, int w) 
# 184
{ 
# 185
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 186
} 
# 188
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
# 189
{ 
# 190
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 191
} 
# 193
static inline long1 make_long1(long x) 
# 194
{ 
# 195
long1 t; (t.x) = x; return t; 
# 196
} 
# 198
static inline ulong1 make_ulong1(unsigned long x) 
# 199
{ 
# 200
ulong1 t; (t.x) = x; return t; 
# 201
} 
# 203
static inline long2 make_long2(long x, long y) 
# 204
{ 
# 205
long2 t; (t.x) = x; (t.y) = y; return t; 
# 206
} 
# 208
static inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
# 209
{ 
# 210
ulong2 t; (t.x) = x; (t.y) = y; return t; 
# 211
} 
# 213
static inline long3 make_long3(long x, long y, long z) 
# 214
{ 
# 215
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 216
} 
# 218
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
# 219
{ 
# 220
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 221
} 
# 223
static inline long4 make_long4(long x, long y, long z, long w) 
# 224
{ 
# 225
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 226
} 
# 228
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
# 229
{ 
# 230
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 231
} 
# 233
static inline float1 make_float1(float x) 
# 234
{ 
# 235
float1 t; (t.x) = x; return t; 
# 236
} 
# 238
static inline float2 make_float2(float x, float y) 
# 239
{ 
# 240
float2 t; (t.x) = x; (t.y) = y; return t; 
# 241
} 
# 243
static inline float3 make_float3(float x, float y, float z) 
# 244
{ 
# 245
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 246
} 
# 248
static inline float4 make_float4(float x, float y, float z, float w) 
# 249
{ 
# 250
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 251
} 
# 253
static inline longlong1 make_longlong1(long long x) 
# 254
{ 
# 255
longlong1 t; (t.x) = x; return t; 
# 256
} 
# 258
static inline ulonglong1 make_ulonglong1(unsigned long long x) 
# 259
{ 
# 260
ulonglong1 t; (t.x) = x; return t; 
# 261
} 
# 263
static inline longlong2 make_longlong2(long long x, long long y) 
# 264
{ 
# 265
longlong2 t; (t.x) = x; (t.y) = y; return t; 
# 266
} 
# 268
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y) 
# 269
{ 
# 270
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
# 271
} 
# 273
static inline longlong3 make_longlong3(long long x, long long y, long long z) 
# 274
{ 
# 275
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 276
} 
# 278
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z) 
# 279
{ 
# 280
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 281
} 
# 283
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w) 
# 284
{ 
# 285
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 286
} 
# 288
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w) 
# 289
{ 
# 290
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 291
} 
# 293
static inline double1 make_double1(double x) 
# 294
{ 
# 295
double1 t; (t.x) = x; return t; 
# 296
} 
# 298
static inline double2 make_double2(double x, double y) 
# 299
{ 
# 300
double2 t; (t.x) = x; (t.y) = y; return t; 
# 301
} 
# 303
static inline double3 make_double3(double x, double y, double z) 
# 304
{ 
# 305
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 306
} 
# 308
static inline double4 make_double4(double x, double y, double z, double w) 
# 309
{ 
# 310
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 311
} 
# 27 "/usr/include/string.h" 3
extern "C" {
# 42 "/usr/include/string.h" 3
extern void *memcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 43
 __attribute((__nonnull__(1, 2))); 
# 46
extern void *memmove(void * __dest, const void * __src, size_t __n) throw()
# 47
 __attribute((__nonnull__(1, 2))); 
# 54
extern void *memccpy(void *__restrict__ __dest, const void *__restrict__ __src, int __c, size_t __n) throw()
# 56
 __attribute((__nonnull__(1, 2))); 
# 62
extern void *memset(void * __s, int __c, size_t __n) throw() __attribute((__nonnull__(1))); 
# 65
extern int memcmp(const void * __s1, const void * __s2, size_t __n) throw()
# 66
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 70
extern "C++" {
# 72
extern __attribute((gnu_inline)) inline void *memchr(void * __s, int __c, size_t __n) throw() __asm__("memchr")
# 73
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 74
extern __attribute((gnu_inline)) inline const void *memchr(const void * __s, int __c, size_t __n) throw() __asm__("memchr")
# 75
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 78
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline void *
# 79
memchr(void *__s, int __c, size_t __n) throw() 
# 80
{ 
# 81
return __builtin_memchr(__s, __c, __n); 
# 82
} 
# 84
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const void *
# 85
memchr(const void *__s, int __c, size_t __n) throw() 
# 86
{ 
# 87
return __builtin_memchr(__s, __c, __n); 
# 88
} 
# 90
}
# 101
extern "C++" void *rawmemchr(void * __s, int __c) throw() __asm__("rawmemchr")
# 102
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 103
extern "C++" const void *rawmemchr(const void * __s, int __c) throw() __asm__("rawmemchr")
# 104
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 112
extern "C++" void *memrchr(void * __s, int __c, size_t __n) throw() __asm__("memrchr")
# 113
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 114
extern "C++" const void *memrchr(const void * __s, int __c, size_t __n) throw() __asm__("memrchr")
# 115
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 125
extern char *strcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 126
 __attribute((__nonnull__(1, 2))); 
# 128
extern char *strncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 130
 __attribute((__nonnull__(1, 2))); 
# 133
extern char *strcat(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 134
 __attribute((__nonnull__(1, 2))); 
# 136
extern char *strncat(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 137
 __attribute((__nonnull__(1, 2))); 
# 140
extern int strcmp(const char * __s1, const char * __s2) throw()
# 141
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 143
extern int strncmp(const char * __s1, const char * __s2, size_t __n) throw()
# 144
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 147
extern int strcoll(const char * __s1, const char * __s2) throw()
# 148
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 150
extern size_t strxfrm(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 152
 __attribute((__nonnull__(2))); 
# 39 "/usr/include/xlocale.h" 3
typedef 
# 27
struct __locale_struct { 
# 30
struct __locale_data *__locales[13]; 
# 33
const unsigned short *__ctype_b; 
# 34
const int *__ctype_tolower; 
# 35
const int *__ctype_toupper; 
# 38
const char *__names[13]; 
# 39
} *__locale_t; 
# 42
typedef __locale_t locale_t; 
# 162 "/usr/include/string.h" 3
extern int strcoll_l(const char * __s1, const char * __s2, __locale_t __l) throw()
# 163
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 165
extern size_t strxfrm_l(char * __dest, const char * __src, size_t __n, __locale_t __l) throw()
# 166
 __attribute((__nonnull__(2, 4))); 
# 172
extern char *strdup(const char * __s) throw()
# 173
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 180
extern char *strndup(const char * __string, size_t __n) throw()
# 181
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 210 "/usr/include/string.h" 3
extern "C++" {
# 212
extern __attribute((gnu_inline)) inline char *strchr(char * __s, int __c) throw() __asm__("strchr")
# 213
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 214
extern __attribute((gnu_inline)) inline const char *strchr(const char * __s, int __c) throw() __asm__("strchr")
# 215
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 218
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 219
strchr(char *__s, int __c) throw() 
# 220
{ 
# 221
return __builtin_strchr(__s, __c); 
# 222
} 
# 224
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 225
strchr(const char *__s, int __c) throw() 
# 226
{ 
# 227
return __builtin_strchr(__s, __c); 
# 228
} 
# 230
}
# 237
extern "C++" {
# 239
extern __attribute((gnu_inline)) inline char *strrchr(char * __s, int __c) throw() __asm__("strrchr")
# 240
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 241
extern __attribute((gnu_inline)) inline const char *strrchr(const char * __s, int __c) throw() __asm__("strrchr")
# 242
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 245
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 246
strrchr(char *__s, int __c) throw() 
# 247
{ 
# 248
return __builtin_strrchr(__s, __c); 
# 249
} 
# 251
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 252
strrchr(const char *__s, int __c) throw() 
# 253
{ 
# 254
return __builtin_strrchr(__s, __c); 
# 255
} 
# 257
}
# 268
extern "C++" char *strchrnul(char * __s, int __c) throw() __asm__("strchrnul")
# 269
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 270
extern "C++" const char *strchrnul(const char * __s, int __c) throw() __asm__("strchrnul")
# 271
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 281
extern size_t strcspn(const char * __s, const char * __reject) throw()
# 282
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 285
extern size_t strspn(const char * __s, const char * __accept) throw()
# 286
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 289
extern "C++" {
# 291
extern __attribute((gnu_inline)) inline char *strpbrk(char * __s, const char * __accept) throw() __asm__("strpbrk")
# 292
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 293
extern __attribute((gnu_inline)) inline const char *strpbrk(const char * __s, const char * __accept) throw() __asm__("strpbrk")
# 294
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 297
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 298
strpbrk(char *__s, const char *__accept) throw() 
# 299
{ 
# 300
return __builtin_strpbrk(__s, __accept); 
# 301
} 
# 303
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 304
strpbrk(const char *__s, const char *__accept) throw() 
# 305
{ 
# 306
return __builtin_strpbrk(__s, __accept); 
# 307
} 
# 309
}
# 316
extern "C++" {
# 318
extern __attribute((gnu_inline)) inline char *strstr(char * __haystack, const char * __needle) throw() __asm__("strstr")
# 319
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 320
extern __attribute((gnu_inline)) inline const char *strstr(const char * __haystack, const char * __needle) throw() __asm__("strstr")
# 321
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 324
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 325
strstr(char *__haystack, const char *__needle) throw() 
# 326
{ 
# 327
return __builtin_strstr(__haystack, __needle); 
# 328
} 
# 330
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 331
strstr(const char *__haystack, const char *__needle) throw() 
# 332
{ 
# 333
return __builtin_strstr(__haystack, __needle); 
# 334
} 
# 336
}
# 344
extern char *strtok(char *__restrict__ __s, const char *__restrict__ __delim) throw()
# 345
 __attribute((__nonnull__(2))); 
# 350
extern char *__strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 353
 __attribute((__nonnull__(2, 3))); 
# 355
extern char *strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 357
 __attribute((__nonnull__(2, 3))); 
# 363
extern "C++" char *strcasestr(char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 364
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 365
extern "C++" const char *strcasestr(const char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 367
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 378 "/usr/include/string.h" 3
extern void *memmem(const void * __haystack, size_t __haystacklen, const void * __needle, size_t __needlelen) throw()
# 380
 __attribute((__pure__)) __attribute((__nonnull__(1, 3))); 
# 384
extern void *__mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 386
 __attribute((__nonnull__(1, 2))); 
# 387
extern void *mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 389
 __attribute((__nonnull__(1, 2))); 
# 395
extern size_t strlen(const char * __s) throw()
# 396
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 402
extern size_t strnlen(const char * __string, size_t __maxlen) throw()
# 403
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 409
extern char *strerror(int __errnum) throw(); 
# 434 "/usr/include/string.h" 3
extern char *strerror_r(int __errnum, char * __buf, size_t __buflen) throw()
# 435
 __attribute((__nonnull__(2))); 
# 441
extern char *strerror_l(int __errnum, __locale_t __l) throw(); 
# 447
extern void __bzero(void * __s, size_t __n) throw() __attribute((__nonnull__(1))); 
# 451
extern void bcopy(const void * __src, void * __dest, size_t __n) throw()
# 452
 __attribute((__nonnull__(1, 2))); 
# 455
extern void bzero(void * __s, size_t __n) throw() __attribute((__nonnull__(1))); 
# 458
extern int bcmp(const void * __s1, const void * __s2, size_t __n) throw()
# 459
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 463
extern "C++" {
# 465
extern __attribute((gnu_inline)) inline char *index(char * __s, int __c) throw() __asm__("index")
# 466
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 467
extern __attribute((gnu_inline)) inline const char *index(const char * __s, int __c) throw() __asm__("index")
# 468
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 471
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 472
index(char *__s, int __c) throw() 
# 473
{ 
# 474
return __builtin_index(__s, __c); 
# 475
} 
# 477
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 478
index(const char *__s, int __c) throw() 
# 479
{ 
# 480
return __builtin_index(__s, __c); 
# 481
} 
# 483
}
# 491
extern "C++" {
# 493
extern __attribute((gnu_inline)) inline char *rindex(char * __s, int __c) throw() __asm__("rindex")
# 494
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 495
extern __attribute((gnu_inline)) inline const char *rindex(const char * __s, int __c) throw() __asm__("rindex")
# 496
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 499
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 500
rindex(char *__s, int __c) throw() 
# 501
{ 
# 502
return __builtin_rindex(__s, __c); 
# 503
} 
# 505
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 506
rindex(const char *__s, int __c) throw() 
# 507
{ 
# 508
return __builtin_rindex(__s, __c); 
# 509
} 
# 511
}
# 519
extern int ffs(int __i) throw() __attribute((const)); 
# 524
extern int ffsl(long __l) throw() __attribute((const)); 
# 526
__extension__ extern int ffsll(long long __ll) throw()
# 527
 __attribute((const)); 
# 532
extern int strcasecmp(const char * __s1, const char * __s2) throw()
# 533
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 536
extern int strncasecmp(const char * __s1, const char * __s2, size_t __n) throw()
# 537
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 543
extern int strcasecmp_l(const char * __s1, const char * __s2, __locale_t __loc) throw()
# 545
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 547
extern int strncasecmp_l(const char * __s1, const char * __s2, size_t __n, __locale_t __loc) throw()
# 549
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 4))); 
# 555
extern char *strsep(char **__restrict__ __stringp, const char *__restrict__ __delim) throw()
# 557
 __attribute((__nonnull__(1, 2))); 
# 562
extern char *strsignal(int __sig) throw(); 
# 565
extern char *__stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 566
 __attribute((__nonnull__(1, 2))); 
# 567
extern char *stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 568
 __attribute((__nonnull__(1, 2))); 
# 572
extern char *__stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 574
 __attribute((__nonnull__(1, 2))); 
# 575
extern char *stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 577
 __attribute((__nonnull__(1, 2))); 
# 582
extern int strverscmp(const char * __s1, const char * __s2) throw()
# 583
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 586
extern char *strfry(char * __string) throw() __attribute((__nonnull__(1))); 
# 589
extern void *memfrob(void * __s, size_t __n) throw() __attribute((__nonnull__(1))); 
# 597
extern "C++" char *basename(char * __filename) throw() __asm__("basename")
# 598
 __attribute((__nonnull__(1))); 
# 599
extern "C++" const char *basename(const char * __filename) throw() __asm__("basename")
# 600
 __attribute((__nonnull__(1))); 
# 642 "/usr/include/string.h" 3
}
# 29 "/usr/include/time.h" 3
extern "C" {
# 30 "/usr/include/bits/types.h" 3
typedef unsigned char __u_char; 
# 31
typedef unsigned short __u_short; 
# 32
typedef unsigned __u_int; 
# 33
typedef unsigned long __u_long; 
# 36
typedef signed char __int8_t; 
# 37
typedef unsigned char __uint8_t; 
# 38
typedef signed short __int16_t; 
# 39
typedef unsigned short __uint16_t; 
# 40
typedef signed int __int32_t; 
# 41
typedef unsigned __uint32_t; 
# 43
typedef signed long __int64_t; 
# 44
typedef unsigned long __uint64_t; 
# 52
typedef long __quad_t; 
# 53
typedef unsigned long __u_quad_t; 
# 133 "/usr/include/bits/types.h" 3
typedef unsigned long __dev_t; 
# 134
typedef unsigned __uid_t; 
# 135
typedef unsigned __gid_t; 
# 136
typedef unsigned long __ino_t; 
# 137
typedef unsigned long __ino64_t; 
# 138
typedef unsigned __mode_t; 
# 139
typedef unsigned long __nlink_t; 
# 140
typedef long __off_t; 
# 141
typedef long __off64_t; 
# 142
typedef int __pid_t; 
# 143
typedef struct { int __val[2]; } __fsid_t; 
# 144
typedef long __clock_t; 
# 145
typedef unsigned long __rlim_t; 
# 146
typedef unsigned long __rlim64_t; 
# 147
typedef unsigned __id_t; 
# 148
typedef long __time_t; 
# 149
typedef unsigned __useconds_t; 
# 150
typedef long __suseconds_t; 
# 152
typedef int __daddr_t; 
# 153
typedef int __key_t; 
# 156
typedef int __clockid_t; 
# 159
typedef void *__timer_t; 
# 162
typedef long __blksize_t; 
# 167
typedef long __blkcnt_t; 
# 168
typedef long __blkcnt64_t; 
# 171
typedef unsigned long __fsblkcnt_t; 
# 172
typedef unsigned long __fsblkcnt64_t; 
# 175
typedef unsigned long __fsfilcnt_t; 
# 176
typedef unsigned long __fsfilcnt64_t; 
# 179
typedef long __fsword_t; 
# 181
typedef long __ssize_t; 
# 184
typedef long __syscall_slong_t; 
# 186
typedef unsigned long __syscall_ulong_t; 
# 190
typedef __off64_t __loff_t; 
# 191
typedef __quad_t *__qaddr_t; 
# 192
typedef char *__caddr_t; 
# 195
typedef long __intptr_t; 
# 198
typedef unsigned __socklen_t; 
# 30 "/usr/include/bits/time.h" 3
struct timeval { 
# 32
__time_t tv_sec; 
# 33
__suseconds_t tv_usec; 
# 34
}; 
# 25 "/usr/include/bits/timex.h" 3
struct timex { 
# 27
unsigned modes; 
# 28
__syscall_slong_t offset; 
# 29
__syscall_slong_t freq; 
# 30
__syscall_slong_t maxerror; 
# 31
__syscall_slong_t esterror; 
# 32
int status; 
# 33
__syscall_slong_t constant; 
# 34
__syscall_slong_t precision; 
# 35
__syscall_slong_t tolerance; 
# 36
timeval time; 
# 37
__syscall_slong_t tick; 
# 38
__syscall_slong_t ppsfreq; 
# 39
__syscall_slong_t jitter; 
# 40
int shift; 
# 41
__syscall_slong_t stabil; 
# 42
__syscall_slong_t jitcnt; 
# 43
__syscall_slong_t calcnt; 
# 44
__syscall_slong_t errcnt; 
# 45
__syscall_slong_t stbcnt; 
# 47
int tai; 
# 50
int:32; int:32; int:32; int:32; 
# 51
int:32; int:32; int:32; int:32; 
# 52
int:32; int:32; int:32; 
# 53
}; 
# 90 "/usr/include/bits/time.h" 3
extern "C" {
# 93
extern int clock_adjtime(__clockid_t __clock_id, timex * __utx) throw(); 
# 95
}
# 59 "/usr/include/time.h" 3
typedef __clock_t clock_t; 
# 75 "/usr/include/time.h" 3
typedef __time_t time_t; 
# 91 "/usr/include/time.h" 3
typedef __clockid_t clockid_t; 
# 103 "/usr/include/time.h" 3
typedef __timer_t timer_t; 
# 120 "/usr/include/time.h" 3
struct timespec { 
# 122
__time_t tv_sec; 
# 123
__syscall_slong_t tv_nsec; 
# 124
}; 
# 133
struct tm { 
# 135
int tm_sec; 
# 136
int tm_min; 
# 137
int tm_hour; 
# 138
int tm_mday; 
# 139
int tm_mon; 
# 140
int tm_year; 
# 141
int tm_wday; 
# 142
int tm_yday; 
# 143
int tm_isdst; 
# 146
long tm_gmtoff; 
# 147
const char *tm_zone; 
# 152
}; 
# 161
struct itimerspec { 
# 163
timespec it_interval; 
# 164
timespec it_value; 
# 165
}; 
# 168
struct sigevent; 
# 174
typedef __pid_t pid_t; 
# 189 "/usr/include/time.h" 3
extern clock_t clock() throw(); 
# 192
extern time_t time(time_t * __timer) throw(); 
# 195
extern double difftime(time_t __time1, time_t __time0) throw()
# 196
 __attribute((const)); 
# 199
extern time_t mktime(tm * __tp) throw(); 
# 205
extern size_t strftime(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp) throw(); 
# 213
extern char *strptime(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp) throw(); 
# 223
extern size_t strftime_l(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp, __locale_t __loc) throw(); 
# 230
extern char *strptime_l(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp, __locale_t __loc) throw(); 
# 239
extern tm *gmtime(const time_t * __timer) throw(); 
# 243
extern tm *localtime(const time_t * __timer) throw(); 
# 249
extern tm *gmtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw(); 
# 254
extern tm *localtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw(); 
# 261
extern char *asctime(const tm * __tp) throw(); 
# 264
extern char *ctime(const time_t * __timer) throw(); 
# 272
extern char *asctime_r(const tm *__restrict__ __tp, char *__restrict__ __buf) throw(); 
# 276
extern char *ctime_r(const time_t *__restrict__ __timer, char *__restrict__ __buf) throw(); 
# 282
extern char *__tzname[2]; 
# 283
extern int __daylight; 
# 284
extern long __timezone; 
# 289
extern char *tzname[2]; 
# 293
extern void tzset() throw(); 
# 297
extern int daylight; 
# 298
extern long timezone; 
# 304
extern int stime(const time_t * __when) throw(); 
# 319 "/usr/include/time.h" 3
extern time_t timegm(tm * __tp) throw(); 
# 322
extern time_t timelocal(tm * __tp) throw(); 
# 325
extern int dysize(int __year) throw() __attribute((const)); 
# 334 "/usr/include/time.h" 3
extern int nanosleep(const timespec * __requested_time, timespec * __remaining); 
# 339
extern int clock_getres(clockid_t __clock_id, timespec * __res) throw(); 
# 342
extern int clock_gettime(clockid_t __clock_id, timespec * __tp) throw(); 
# 345
extern int clock_settime(clockid_t __clock_id, const timespec * __tp) throw(); 
# 353
extern int clock_nanosleep(clockid_t __clock_id, int __flags, const timespec * __req, timespec * __rem); 
# 358
extern int clock_getcpuclockid(pid_t __pid, clockid_t * __clock_id) throw(); 
# 363
extern int timer_create(clockid_t __clock_id, sigevent *__restrict__ __evp, timer_t *__restrict__ __timerid) throw(); 
# 368
extern int timer_delete(timer_t __timerid) throw(); 
# 371
extern int timer_settime(timer_t __timerid, int __flags, const itimerspec *__restrict__ __value, itimerspec *__restrict__ __ovalue) throw(); 
# 376
extern int timer_gettime(timer_t __timerid, itimerspec * __value) throw(); 
# 380
extern int timer_getoverrun(timer_t __timerid) throw(); 
# 386
extern int timespec_get(timespec * __ts, int __base) throw()
# 387
 __attribute((__nonnull__(1))); 
# 403 "/usr/include/time.h" 3
extern int getdate_err; 
# 412 "/usr/include/time.h" 3
extern tm *getdate(const char * __string); 
# 426 "/usr/include/time.h" 3
extern int getdate_r(const char *__restrict__ __string, tm *__restrict__ __resbufp); 
# 430
}
# 80 "/sw/summit/cuda/10.1.168/include/crt/common_functions.h"
extern "C" {
# 83
extern clock_t clock() throw(); 
# 88
extern void *memset(void *, int, size_t) throw(); 
# 89
extern void *memcpy(void *, const void *, size_t) throw(); 
# 91
}
# 108 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern "C" {
# 192 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern int abs(int) throw(); 
# 193
extern long labs(long) throw(); 
# 194
extern long long llabs(long long) throw(); 
# 244 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double fabs(double x) throw(); 
# 285 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float fabsf(float x) throw(); 
# 289
extern inline int min(int, int); 
# 291
extern inline unsigned umin(unsigned, unsigned); 
# 292
extern inline long long llmin(long long, long long); 
# 293
extern inline unsigned long long ullmin(unsigned long long, unsigned long long); 
# 314 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float fminf(float x, float y) throw(); 
# 334 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double fmin(double x, double y) throw(); 
# 341
extern inline int max(int, int); 
# 343
extern inline unsigned umax(unsigned, unsigned); 
# 344
extern inline long long llmax(long long, long long); 
# 345
extern inline unsigned long long ullmax(unsigned long long, unsigned long long); 
# 366 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float fmaxf(float x, float y) throw(); 
# 386 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double fmax(double, double) throw(); 
# 430 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double sin(double x) throw(); 
# 463 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double cos(double x) throw(); 
# 482 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern void sincos(double x, double * sptr, double * cptr) throw(); 
# 498 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern void sincosf(float x, float * sptr, float * cptr) throw(); 
# 543 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double tan(double x) throw(); 
# 612 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double sqrt(double x) throw(); 
# 684 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double rsqrt(double x); 
# 754 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float rsqrtf(float x); 
# 810 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double log2(double x) throw(); 
# 835 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double exp2(double x) throw(); 
# 860 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float exp2f(float x) throw(); 
# 887 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double exp10(double x) throw(); 
# 910 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float exp10f(float x) throw(); 
# 956 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double expm1(double x) throw(); 
# 1001 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float expm1f(float x) throw(); 
# 1056 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float log2f(float x) throw(); 
# 1110 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double log10(double x) throw(); 
# 1181 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double log(double x) throw(); 
# 1275 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double log1p(double x) throw(); 
# 1372 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float log1pf(float x) throw(); 
# 1447 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double floor(double x) throw(); 
# 1486 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double exp(double x) throw(); 
# 1517 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double cosh(double x) throw(); 
# 1547 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double sinh(double x) throw(); 
# 1577 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double tanh(double x) throw(); 
# 1612 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double acosh(double x) throw(); 
# 1650 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float acoshf(float x) throw(); 
# 1666 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double asinh(double x) throw(); 
# 1682 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float asinhf(float x) throw(); 
# 1736 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double atanh(double x) throw(); 
# 1790 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float atanhf(float x) throw(); 
# 1849 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double ldexp(double x, int exp) throw(); 
# 1905 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float ldexpf(float x, int exp) throw(); 
# 1957 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double logb(double x) throw(); 
# 2012 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float logbf(float x) throw(); 
# 2042 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern int ilogb(double x) throw(); 
# 2072 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern int ilogbf(float x) throw(); 
# 2148 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double scalbn(double x, int n) throw(); 
# 2224 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float scalbnf(float x, int n) throw(); 
# 2300 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double scalbln(double x, long n) throw(); 
# 2376 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float scalblnf(float x, long n) throw(); 
# 2454 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double frexp(double x, int * nptr) throw(); 
# 2529 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float frexpf(float x, int * nptr) throw(); 
# 2543 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double round(double x) throw(); 
# 2560 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float roundf(float x) throw(); 
# 2578 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern long lround(double x) throw(); 
# 2596 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern long lroundf(float x) throw(); 
# 2614 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern long long llround(double x) throw(); 
# 2632 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern long long llroundf(float x) throw(); 
# 2684 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float rintf(float x) throw(); 
# 2701 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern long lrint(double x) throw(); 
# 2718 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern long lrintf(float x) throw(); 
# 2735 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern long long llrint(double x) throw(); 
# 2752 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern long long llrintf(float x) throw(); 
# 2805 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double nearbyint(double x) throw(); 
# 2858 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float nearbyintf(float x) throw(); 
# 2920 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double ceil(double x) throw(); 
# 2932 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double trunc(double x) throw(); 
# 2947 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float truncf(float x) throw(); 
# 2973 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern __attribute((gnu_inline)) inline double fdim(double x, double y) throw(); 
# 2999 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern __attribute((gnu_inline)) inline float fdimf(float x, float y) throw(); 
# 3035 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double atan2(double y, double x) throw(); 
# 3066 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double atan(double x) throw(); 
# 3089 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double acos(double x) throw(); 
# 3121 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double asin(double x) throw(); 
# 3167 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double hypot(double x, double y) throw(); 
# 3219 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double rhypot(double x, double y) throw(); 
# 3265 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float hypotf(float x, float y) throw(); 
# 3317 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float rhypotf(float x, float y) throw(); 
# 3361 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double norm3d(double a, double b, double c) throw(); 
# 3412 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double rnorm3d(double a, double b, double c) throw(); 
# 3461 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double norm4d(double a, double b, double c, double d) throw(); 
# 3517 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double rnorm4d(double a, double b, double c, double d) throw(); 
# 3562 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double norm(int dim, const double * t) throw(); 
# 3613 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double rnorm(int dim, const double * t) throw(); 
# 3665 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float rnormf(int dim, const float * a) throw(); 
# 3709 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float normf(int dim, const float * a) throw(); 
# 3754 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float norm3df(float a, float b, float c) throw(); 
# 3805 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float rnorm3df(float a, float b, float c) throw(); 
# 3854 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float norm4df(float a, float b, float c, float d) throw(); 
# 3910 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float rnorm4df(float a, float b, float c, float d) throw(); 
# 3997 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double cbrt(double x) throw(); 
# 4083 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float cbrtf(float x) throw(); 
# 4138 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double rcbrt(double x); 
# 4188 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float rcbrtf(float x); 
# 4248 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double sinpi(double x); 
# 4308 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float sinpif(float x); 
# 4360 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double cospi(double x); 
# 4412 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float cospif(float x); 
# 4442 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern void sincospi(double x, double * sptr, double * cptr); 
# 4472 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern void sincospif(float x, float * sptr, float * cptr); 
# 4784 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double pow(double x, double y) throw(); 
# 4840 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double modf(double x, double * iptr) throw(); 
# 4899 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double fmod(double x, double y) throw(); 
# 4985 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double remainder(double x, double y) throw(); 
# 5075 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float remainderf(float x, float y) throw(); 
# 5129 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double remquo(double x, double y, int * quo) throw(); 
# 5183 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float remquof(float x, float y, int * quo) throw(); 
# 5224 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double j0(double x) throw(); 
# 5266 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float j0f(float x) throw(); 
# 5327 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double j1(double x) throw(); 
# 5388 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float j1f(float x) throw(); 
# 5431 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double jn(int n, double x) throw(); 
# 5474 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float jnf(int n, float x) throw(); 
# 5526 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double y0(double x) throw(); 
# 5578 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float y0f(float x) throw(); 
# 5630 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double y1(double x) throw(); 
# 5682 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float y1f(float x) throw(); 
# 5735 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double yn(int n, double x) throw(); 
# 5788 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float ynf(int n, float x) throw(); 
# 5815 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double cyl_bessel_i0(double x) throw(); 
# 5841 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float cyl_bessel_i0f(float x) throw(); 
# 5868 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double cyl_bessel_i1(double x) throw(); 
# 5894 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float cyl_bessel_i1f(float x) throw(); 
# 5977 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double erf(double x) throw(); 
# 6059 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float erff(float x) throw(); 
# 6123 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double erfinv(double y); 
# 6180 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float erfinvf(float y); 
# 6219 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double erfc(double x) throw(); 
# 6257 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float erfcf(float x) throw(); 
# 6385 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double lgamma(double x) throw(); 
# 6448 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double erfcinv(double y); 
# 6504 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float erfcinvf(float y); 
# 6562 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double normcdfinv(double y); 
# 6620 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float normcdfinvf(float y); 
# 6663 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double normcdf(double y); 
# 6706 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float normcdff(float y); 
# 6781 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double erfcx(double x); 
# 6856 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float erfcxf(float x); 
# 6990 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float lgammaf(float x) throw(); 
# 7099 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double tgamma(double x) throw(); 
# 7208 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float tgammaf(float x) throw(); 
# 7221 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double copysign(double x, double y) throw(); 
# 7234 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float copysignf(float x, float y) throw(); 
# 7271 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double nextafter(double x, double y) throw(); 
# 7308 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float nextafterf(float x, float y) throw(); 
# 7324 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double nan(const char * tagp) throw(); 
# 7340 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float nanf(const char * tagp) throw(); 
# 7347
extern int __isinff(float) throw(); 
# 7348
extern int __isnanf(float) throw(); 
# 7358 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern int __finite(double) throw(); 
# 7359
extern int __finitef(float) throw(); 
# 7360
extern __attribute((gnu_inline)) inline int __signbit(double) throw(); 
# 7361
extern int __isnan(double) throw(); 
# 7362
extern int __isinf(double) throw(); 
# 7365
extern __attribute((gnu_inline)) inline int __signbitf(float) throw(); 
# 7524 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern double fma(double x, double y, double z) throw(); 
# 7682 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float fmaf(float x, float y, float z) throw(); 
# 7693 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern __attribute((gnu_inline)) inline int __signbitl(long double) throw(); 
# 7699
extern int __finitel(long double) throw(); 
# 7700
extern int __isinfl(long double) throw(); 
# 7701
extern int __isnanl(long double) throw(); 
# 7751 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float acosf(float x) throw(); 
# 7791 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float asinf(float x) throw(); 
# 7831 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float atanf(float x) throw(); 
# 7864 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float atan2f(float y, float x) throw(); 
# 7888 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float cosf(float x) throw(); 
# 7930 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float sinf(float x) throw(); 
# 7972 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float tanf(float x) throw(); 
# 7996 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float coshf(float x) throw(); 
# 8037 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float sinhf(float x) throw(); 
# 8067 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float tanhf(float x) throw(); 
# 8118 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float logf(float x) throw(); 
# 8168 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float expf(float x) throw(); 
# 8219 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float log10f(float x) throw(); 
# 8274 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float modff(float x, float * iptr) throw(); 
# 8582 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float powf(float x, float y) throw(); 
# 8651 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float sqrtf(float x) throw(); 
# 8710 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float ceilf(float x) throw(); 
# 8782 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float floorf(float x) throw(); 
# 8841 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern float fmodf(float x, float y) throw(); 
# 8856 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
}
# 29 "/usr/include/math.h" 3
extern "C" {
# 34 "/usr/include/bits/mathdef.h" 3
typedef float float_t; 
# 35
typedef double double_t; 
# 54 "/usr/include/bits/mathcalls.h" 3
extern double acos(double __x) throw(); extern double __acos(double __x) throw(); 
# 56
extern double asin(double __x) throw(); extern double __asin(double __x) throw(); 
# 58
extern double atan(double __x) throw(); extern double __atan(double __x) throw(); 
# 60
extern double atan2(double __y, double __x) throw(); extern double __atan2(double __y, double __x) throw(); 
# 63
extern double cos(double __x) throw(); extern double __cos(double __x) throw(); 
# 65
extern double sin(double __x) throw(); extern double __sin(double __x) throw(); 
# 67
extern double tan(double __x) throw(); extern double __tan(double __x) throw(); 
# 72
extern double cosh(double __x) throw(); extern double __cosh(double __x) throw(); 
# 74
extern double sinh(double __x) throw(); extern double __sinh(double __x) throw(); 
# 76
extern double tanh(double __x) throw(); extern double __tanh(double __x) throw(); 
# 81
extern void sincos(double __x, double * __sinx, double * __cosx) throw(); extern void __sincos(double __x, double * __sinx, double * __cosx) throw(); 
# 88
extern double acosh(double __x) throw(); extern double __acosh(double __x) throw(); 
# 90
extern double asinh(double __x) throw(); extern double __asinh(double __x) throw(); 
# 92
extern double atanh(double __x) throw(); extern double __atanh(double __x) throw(); 
# 100
extern double exp(double __x) throw(); extern double __exp(double __x) throw(); 
# 103
extern double frexp(double __x, int * __exponent) throw(); extern double __frexp(double __x, int * __exponent) throw(); 
# 106
extern double ldexp(double __x, int __exponent) throw(); extern double __ldexp(double __x, int __exponent) throw(); 
# 109
extern double log(double __x) throw(); extern double __log(double __x) throw(); 
# 112
extern double log10(double __x) throw(); extern double __log10(double __x) throw(); 
# 115
extern double modf(double __x, double * __iptr) throw(); extern double __modf(double __x, double * __iptr) throw()
# 116
 __attribute((__nonnull__(2))); 
# 121
extern double exp10(double __x) throw(); extern double __exp10(double __x) throw(); 
# 123
extern double pow10(double __x) throw(); extern double __pow10(double __x) throw(); 
# 129
extern double expm1(double __x) throw(); extern double __expm1(double __x) throw(); 
# 132
extern double log1p(double __x) throw(); extern double __log1p(double __x) throw(); 
# 135
extern double logb(double __x) throw(); extern double __logb(double __x) throw(); 
# 142
extern double exp2(double __x) throw(); extern double __exp2(double __x) throw(); 
# 145
extern double log2(double __x) throw(); extern double __log2(double __x) throw(); 
# 154
extern double pow(double __x, double __y) throw(); extern double __pow(double __x, double __y) throw(); 
# 157
extern double sqrt(double __x) throw(); extern double __sqrt(double __x) throw(); 
# 163
extern double hypot(double __x, double __y) throw(); extern double __hypot(double __x, double __y) throw(); 
# 170
extern double cbrt(double __x) throw(); extern double __cbrt(double __x) throw(); 
# 179
extern double ceil(double __x) throw() __attribute((const)); extern double __ceil(double __x) throw() __attribute((const)); 
# 182
extern double fabs(double __x) throw() __attribute((const)); extern double __fabs(double __x) throw() __attribute((const)); 
# 185
extern double floor(double __x) throw() __attribute((const)); extern double __floor(double __x) throw() __attribute((const)); 
# 188
extern double fmod(double __x, double __y) throw(); extern double __fmod(double __x, double __y) throw(); 
# 193
extern int __isinf(double __value) throw() __attribute((const)); 
# 196
extern int __finite(double __value) throw() __attribute((const)); 
# 202
extern inline int isinf(double __value) throw() __attribute((const)); 
# 205
extern int finite(double __value) throw() __attribute((const)); 
# 208
extern double drem(double __x, double __y) throw(); extern double __drem(double __x, double __y) throw(); 
# 212
extern double significand(double __x) throw(); extern double __significand(double __x) throw(); 
# 218
extern double copysign(double __x, double __y) throw() __attribute((const)); extern double __copysign(double __x, double __y) throw() __attribute((const)); 
# 225
extern double nan(const char * __tagb) throw() __attribute((const)); extern double __nan(const char * __tagb) throw() __attribute((const)); 
# 231
extern int __isnan(double __value) throw() __attribute((const)); 
# 235
extern inline int isnan(double __value) throw() __attribute((const)); 
# 238
extern double j0(double) throw(); extern double __j0(double) throw(); 
# 239
extern double j1(double) throw(); extern double __j1(double) throw(); 
# 240
extern double jn(int, double) throw(); extern double __jn(int, double) throw(); 
# 241
extern double y0(double) throw(); extern double __y0(double) throw(); 
# 242
extern double y1(double) throw(); extern double __y1(double) throw(); 
# 243
extern double yn(int, double) throw(); extern double __yn(int, double) throw(); 
# 250
extern double erf(double) throw(); extern double __erf(double) throw(); 
# 251
extern double erfc(double) throw(); extern double __erfc(double) throw(); 
# 252
extern double lgamma(double) throw(); extern double __lgamma(double) throw(); 
# 259
extern double tgamma(double) throw(); extern double __tgamma(double) throw(); 
# 265
extern double gamma(double) throw(); extern double __gamma(double) throw(); 
# 272
extern double lgamma_r(double, int * __signgamp) throw(); extern double __lgamma_r(double, int * __signgamp) throw(); 
# 280
extern double rint(double __x) throw(); extern double __rint(double __x) throw(); 
# 283
extern double nextafter(double __x, double __y) throw() __attribute((const)); extern double __nextafter(double __x, double __y) throw() __attribute((const)); 
# 285
extern double nexttoward(double __x, long double __y) throw() __attribute((const)); extern double __nexttoward(double __x, long double __y) throw() __attribute((const)); 
# 289
extern double remainder(double __x, double __y) throw(); extern double __remainder(double __x, double __y) throw(); 
# 293
extern double scalbn(double __x, int __n) throw(); extern double __scalbn(double __x, int __n) throw(); 
# 297
extern int ilogb(double __x) throw(); extern int __ilogb(double __x) throw(); 
# 302
extern double scalbln(double __x, long __n) throw(); extern double __scalbln(double __x, long __n) throw(); 
# 306
extern double nearbyint(double __x) throw(); extern double __nearbyint(double __x) throw(); 
# 310
extern double round(double __x) throw() __attribute((const)); extern double __round(double __x) throw() __attribute((const)); 
# 314
extern double trunc(double __x) throw() __attribute((const)); extern double __trunc(double __x) throw() __attribute((const)); 
# 319
extern double remquo(double __x, double __y, int * __quo) throw(); extern double __remquo(double __x, double __y, int * __quo) throw(); 
# 326
extern long lrint(double __x) throw(); extern long __lrint(double __x) throw(); 
# 327
extern long long llrint(double __x) throw(); extern long long __llrint(double __x) throw(); 
# 331
extern long lround(double __x) throw(); extern long __lround(double __x) throw(); 
# 332
extern long long llround(double __x) throw(); extern long long __llround(double __x) throw(); 
# 336
extern __attribute((gnu_inline)) inline double fdim(double __x, double __y) throw(); extern double __fdim(double __x, double __y) throw(); 
# 339
extern double fmax(double __x, double __y) throw() __attribute((const)); extern double __fmax(double __x, double __y) throw() __attribute((const)); 
# 342
extern double fmin(double __x, double __y) throw() __attribute((const)); extern double __fmin(double __x, double __y) throw() __attribute((const)); 
# 346
extern int __fpclassify(double __value) throw()
# 347
 __attribute((const)); 
# 350
extern __attribute((gnu_inline)) inline int __signbit(double __value) throw()
# 351
 __attribute((const)); 
# 355
extern double fma(double __x, double __y, double __z) throw(); extern double __fma(double __x, double __y, double __z) throw(); 
# 364
extern double scalb(double __x, double __n) throw(); extern double __scalb(double __x, double __n) throw(); 
# 54 "/usr/include/bits/mathcalls.h" 3
extern float acosf(float __x) throw(); extern float __acosf(float __x) throw(); 
# 56
extern float asinf(float __x) throw(); extern float __asinf(float __x) throw(); 
# 58
extern float atanf(float __x) throw(); extern float __atanf(float __x) throw(); 
# 60
extern float atan2f(float __y, float __x) throw(); extern float __atan2f(float __y, float __x) throw(); 
# 63
extern float cosf(float __x) throw(); 
# 65
extern float sinf(float __x) throw(); 
# 67
extern float tanf(float __x) throw(); 
# 72
extern float coshf(float __x) throw(); extern float __coshf(float __x) throw(); 
# 74
extern float sinhf(float __x) throw(); extern float __sinhf(float __x) throw(); 
# 76
extern float tanhf(float __x) throw(); extern float __tanhf(float __x) throw(); 
# 81
extern void sincosf(float __x, float * __sinx, float * __cosx) throw(); 
# 88
extern float acoshf(float __x) throw(); extern float __acoshf(float __x) throw(); 
# 90
extern float asinhf(float __x) throw(); extern float __asinhf(float __x) throw(); 
# 92
extern float atanhf(float __x) throw(); extern float __atanhf(float __x) throw(); 
# 100
extern float expf(float __x) throw(); 
# 103
extern float frexpf(float __x, int * __exponent) throw(); extern float __frexpf(float __x, int * __exponent) throw(); 
# 106
extern float ldexpf(float __x, int __exponent) throw(); extern float __ldexpf(float __x, int __exponent) throw(); 
# 109
extern float logf(float __x) throw(); 
# 112
extern float log10f(float __x) throw(); 
# 115
extern float modff(float __x, float * __iptr) throw(); extern float __modff(float __x, float * __iptr) throw()
# 116
 __attribute((__nonnull__(2))); 
# 121
extern float exp10f(float __x) throw(); 
# 123
extern float pow10f(float __x) throw(); extern float __pow10f(float __x) throw(); 
# 129
extern float expm1f(float __x) throw(); extern float __expm1f(float __x) throw(); 
# 132
extern float log1pf(float __x) throw(); extern float __log1pf(float __x) throw(); 
# 135
extern float logbf(float __x) throw(); extern float __logbf(float __x) throw(); 
# 142
extern float exp2f(float __x) throw(); extern float __exp2f(float __x) throw(); 
# 145
extern float log2f(float __x) throw(); 
# 154
extern float powf(float __x, float __y) throw(); 
# 157
extern float sqrtf(float __x) throw(); extern float __sqrtf(float __x) throw(); 
# 163
extern float hypotf(float __x, float __y) throw(); extern float __hypotf(float __x, float __y) throw(); 
# 170
extern float cbrtf(float __x) throw(); extern float __cbrtf(float __x) throw(); 
# 179
extern float ceilf(float __x) throw() __attribute((const)); extern float __ceilf(float __x) throw() __attribute((const)); 
# 182
extern float fabsf(float __x) throw() __attribute((const)); extern float __fabsf(float __x) throw() __attribute((const)); 
# 185
extern float floorf(float __x) throw() __attribute((const)); extern float __floorf(float __x) throw() __attribute((const)); 
# 188
extern float fmodf(float __x, float __y) throw(); extern float __fmodf(float __x, float __y) throw(); 
# 193
extern int __isinff(float __value) throw() __attribute((const)); 
# 196
extern int __finitef(float __value) throw() __attribute((const)); 
# 202
extern int isinff(float __value) throw() __attribute((const)); 
# 205
extern int finitef(float __value) throw() __attribute((const)); 
# 208
extern float dremf(float __x, float __y) throw(); extern float __dremf(float __x, float __y) throw(); 
# 212
extern float significandf(float __x) throw(); extern float __significandf(float __x) throw(); 
# 218
extern float copysignf(float __x, float __y) throw() __attribute((const)); extern float __copysignf(float __x, float __y) throw() __attribute((const)); 
# 225
extern float nanf(const char * __tagb) throw() __attribute((const)); extern float __nanf(const char * __tagb) throw() __attribute((const)); 
# 231
extern int __isnanf(float __value) throw() __attribute((const)); 
# 235
extern int isnanf(float __value) throw() __attribute((const)); 
# 238
extern float j0f(float) throw(); extern float __j0f(float) throw(); 
# 239
extern float j1f(float) throw(); extern float __j1f(float) throw(); 
# 240
extern float jnf(int, float) throw(); extern float __jnf(int, float) throw(); 
# 241
extern float y0f(float) throw(); extern float __y0f(float) throw(); 
# 242
extern float y1f(float) throw(); extern float __y1f(float) throw(); 
# 243
extern float ynf(int, float) throw(); extern float __ynf(int, float) throw(); 
# 250
extern float erff(float) throw(); extern float __erff(float) throw(); 
# 251
extern float erfcf(float) throw(); extern float __erfcf(float) throw(); 
# 252
extern float lgammaf(float) throw(); extern float __lgammaf(float) throw(); 
# 259
extern float tgammaf(float) throw(); extern float __tgammaf(float) throw(); 
# 265
extern float gammaf(float) throw(); extern float __gammaf(float) throw(); 
# 272
extern float lgammaf_r(float, int * __signgamp) throw(); extern float __lgammaf_r(float, int * __signgamp) throw(); 
# 280
extern float rintf(float __x) throw(); extern float __rintf(float __x) throw(); 
# 283
extern float nextafterf(float __x, float __y) throw() __attribute((const)); extern float __nextafterf(float __x, float __y) throw() __attribute((const)); 
# 285
extern float nexttowardf(float __x, long double __y) throw() __attribute((const)); extern float __nexttowardf(float __x, long double __y) throw() __attribute((const)); 
# 289
extern float remainderf(float __x, float __y) throw(); extern float __remainderf(float __x, float __y) throw(); 
# 293
extern float scalbnf(float __x, int __n) throw(); extern float __scalbnf(float __x, int __n) throw(); 
# 297
extern int ilogbf(float __x) throw(); extern int __ilogbf(float __x) throw(); 
# 302
extern float scalblnf(float __x, long __n) throw(); extern float __scalblnf(float __x, long __n) throw(); 
# 306
extern float nearbyintf(float __x) throw(); extern float __nearbyintf(float __x) throw(); 
# 310
extern float roundf(float __x) throw() __attribute((const)); extern float __roundf(float __x) throw() __attribute((const)); 
# 314
extern float truncf(float __x) throw() __attribute((const)); extern float __truncf(float __x) throw() __attribute((const)); 
# 319
extern float remquof(float __x, float __y, int * __quo) throw(); extern float __remquof(float __x, float __y, int * __quo) throw(); 
# 326
extern long lrintf(float __x) throw(); extern long __lrintf(float __x) throw(); 
# 327
extern long long llrintf(float __x) throw(); extern long long __llrintf(float __x) throw(); 
# 331
extern long lroundf(float __x) throw(); extern long __lroundf(float __x) throw(); 
# 332
extern long long llroundf(float __x) throw(); extern long long __llroundf(float __x) throw(); 
# 336
extern __attribute((gnu_inline)) inline float fdimf(float __x, float __y) throw(); extern float __fdimf(float __x, float __y) throw(); 
# 339
extern float fmaxf(float __x, float __y) throw() __attribute((const)); extern float __fmaxf(float __x, float __y) throw() __attribute((const)); 
# 342
extern float fminf(float __x, float __y) throw() __attribute((const)); extern float __fminf(float __x, float __y) throw() __attribute((const)); 
# 346
extern int __fpclassifyf(float __value) throw()
# 347
 __attribute((const)); 
# 350
extern __attribute((gnu_inline)) inline int __signbitf(float __value) throw()
# 351
 __attribute((const)); 
# 355
extern float fmaf(float __x, float __y, float __z) throw(); extern float __fmaf(float __x, float __y, float __z) throw(); 
# 364
extern float scalbf(float __x, float __n) throw(); extern float __scalbf(float __x, float __n) throw(); 
# 54 "/usr/include/bits/mathcalls.h" 3
extern long double acosl(long double __x) throw(); extern long double __acosl(long double __x) throw(); 
# 56
extern long double asinl(long double __x) throw(); extern long double __asinl(long double __x) throw(); 
# 58
extern long double atanl(long double __x) throw(); extern long double __atanl(long double __x) throw(); 
# 60
extern long double atan2l(long double __y, long double __x) throw(); extern long double __atan2l(long double __y, long double __x) throw(); 
# 63
extern long double cosl(long double __x) throw(); extern long double __cosl(long double __x) throw(); 
# 65
extern long double sinl(long double __x) throw(); extern long double __sinl(long double __x) throw(); 
# 67
extern long double tanl(long double __x) throw(); extern long double __tanl(long double __x) throw(); 
# 72
extern long double coshl(long double __x) throw(); extern long double __coshl(long double __x) throw(); 
# 74
extern long double sinhl(long double __x) throw(); extern long double __sinhl(long double __x) throw(); 
# 76
extern long double tanhl(long double __x) throw(); extern long double __tanhl(long double __x) throw(); 
# 81
extern void sincosl(long double __x, long double * __sinx, long double * __cosx) throw(); extern void __sincosl(long double __x, long double * __sinx, long double * __cosx) throw(); 
# 88
extern long double acoshl(long double __x) throw(); extern long double __acoshl(long double __x) throw(); 
# 90
extern long double asinhl(long double __x) throw(); extern long double __asinhl(long double __x) throw(); 
# 92
extern long double atanhl(long double __x) throw(); extern long double __atanhl(long double __x) throw(); 
# 100
extern long double expl(long double __x) throw(); extern long double __expl(long double __x) throw(); 
# 103
extern long double frexpl(long double __x, int * __exponent) throw(); extern long double __frexpl(long double __x, int * __exponent) throw(); 
# 106
extern long double ldexpl(long double __x, int __exponent) throw(); extern long double __ldexpl(long double __x, int __exponent) throw(); 
# 109
extern long double logl(long double __x) throw(); extern long double __logl(long double __x) throw(); 
# 112
extern long double log10l(long double __x) throw(); extern long double __log10l(long double __x) throw(); 
# 115
extern long double modfl(long double __x, long double * __iptr) throw(); extern long double __modfl(long double __x, long double * __iptr) throw()
# 116
 __attribute((__nonnull__(2))); 
# 121
extern long double exp10l(long double __x) throw(); extern long double __exp10l(long double __x) throw(); 
# 123
extern long double pow10l(long double __x) throw(); extern long double __pow10l(long double __x) throw(); 
# 129
extern long double expm1l(long double __x) throw(); extern long double __expm1l(long double __x) throw(); 
# 132
extern long double log1pl(long double __x) throw(); extern long double __log1pl(long double __x) throw(); 
# 135
extern long double logbl(long double __x) throw(); extern long double __logbl(long double __x) throw(); 
# 142
extern long double exp2l(long double __x) throw(); extern long double __exp2l(long double __x) throw(); 
# 145
extern long double log2l(long double __x) throw(); extern long double __log2l(long double __x) throw(); 
# 154
extern long double powl(long double __x, long double __y) throw(); extern long double __powl(long double __x, long double __y) throw(); 
# 157
extern long double sqrtl(long double __x) throw(); extern long double __sqrtl(long double __x) throw(); 
# 163
extern long double hypotl(long double __x, long double __y) throw(); extern long double __hypotl(long double __x, long double __y) throw(); 
# 170
extern long double cbrtl(long double __x) throw(); extern long double __cbrtl(long double __x) throw(); 
# 179
extern long double ceill(long double __x) throw() __attribute((const)); extern long double __ceill(long double __x) throw() __attribute((const)); 
# 182
extern long double fabsl(long double __x) throw() __attribute((const)); extern long double __fabsl(long double __x) throw() __attribute((const)); 
# 185
extern long double floorl(long double __x) throw() __attribute((const)); extern long double __floorl(long double __x) throw() __attribute((const)); 
# 188
extern long double fmodl(long double __x, long double __y) throw(); extern long double __fmodl(long double __x, long double __y) throw(); 
# 193
extern int __isinfl(long double __value) throw() __attribute((const)); 
# 196
extern int __finitel(long double __value) throw() __attribute((const)); 
# 202
extern int isinfl(long double __value) throw() __attribute((const)); 
# 205
extern int finitel(long double __value) throw() __attribute((const)); 
# 208
extern long double dreml(long double __x, long double __y) throw(); extern long double __dreml(long double __x, long double __y) throw(); 
# 212
extern long double significandl(long double __x) throw(); extern long double __significandl(long double __x) throw(); 
# 218
extern long double copysignl(long double __x, long double __y) throw() __attribute((const)); extern long double __copysignl(long double __x, long double __y) throw() __attribute((const)); 
# 225
extern long double nanl(const char * __tagb) throw() __attribute((const)); extern long double __nanl(const char * __tagb) throw() __attribute((const)); 
# 231
extern int __isnanl(long double __value) throw() __attribute((const)); 
# 235
extern int isnanl(long double __value) throw() __attribute((const)); 
# 238
extern long double j0l(long double) throw(); extern long double __j0l(long double) throw(); 
# 239
extern long double j1l(long double) throw(); extern long double __j1l(long double) throw(); 
# 240
extern long double jnl(int, long double) throw(); extern long double __jnl(int, long double) throw(); 
# 241
extern long double y0l(long double) throw(); extern long double __y0l(long double) throw(); 
# 242
extern long double y1l(long double) throw(); extern long double __y1l(long double) throw(); 
# 243
extern long double ynl(int, long double) throw(); extern long double __ynl(int, long double) throw(); 
# 250
extern long double erfl(long double) throw(); extern long double __erfl(long double) throw(); 
# 251
extern long double erfcl(long double) throw(); extern long double __erfcl(long double) throw(); 
# 252
extern long double lgammal(long double) throw(); extern long double __lgammal(long double) throw(); 
# 259
extern long double tgammal(long double) throw(); extern long double __tgammal(long double) throw(); 
# 265
extern long double gammal(long double) throw(); extern long double __gammal(long double) throw(); 
# 272
extern long double lgammal_r(long double, int * __signgamp) throw(); extern long double __lgammal_r(long double, int * __signgamp) throw(); 
# 280
extern long double rintl(long double __x) throw(); extern long double __rintl(long double __x) throw(); 
# 283
extern long double nextafterl(long double __x, long double __y) throw() __attribute((const)); extern long double __nextafterl(long double __x, long double __y) throw() __attribute((const)); 
# 285
extern long double nexttowardl(long double __x, long double __y) throw() __attribute((const)); extern long double __nexttowardl(long double __x, long double __y) throw() __attribute((const)); 
# 289
extern long double remainderl(long double __x, long double __y) throw(); extern long double __remainderl(long double __x, long double __y) throw(); 
# 293
extern long double scalbnl(long double __x, int __n) throw(); extern long double __scalbnl(long double __x, int __n) throw(); 
# 297
extern int ilogbl(long double __x) throw(); extern int __ilogbl(long double __x) throw(); 
# 302
extern long double scalblnl(long double __x, long __n) throw(); extern long double __scalblnl(long double __x, long __n) throw(); 
# 306
extern long double nearbyintl(long double __x) throw(); extern long double __nearbyintl(long double __x) throw(); 
# 310
extern long double roundl(long double __x) throw() __attribute((const)); extern long double __roundl(long double __x) throw() __attribute((const)); 
# 314
extern long double truncl(long double __x) throw() __attribute((const)); extern long double __truncl(long double __x) throw() __attribute((const)); 
# 319
extern long double remquol(long double __x, long double __y, int * __quo) throw(); extern long double __remquol(long double __x, long double __y, int * __quo) throw(); 
# 326
extern long lrintl(long double __x) throw(); extern long __lrintl(long double __x) throw(); 
# 327
extern long long llrintl(long double __x) throw(); extern long long __llrintl(long double __x) throw(); 
# 331
extern long lroundl(long double __x) throw(); extern long __lroundl(long double __x) throw(); 
# 332
extern long long llroundl(long double __x) throw(); extern long long __llroundl(long double __x) throw(); 
# 336
extern long double fdiml(long double __x, long double __y) throw(); extern long double __fdiml(long double __x, long double __y) throw(); 
# 339
extern long double fmaxl(long double __x, long double __y) throw() __attribute((const)); extern long double __fmaxl(long double __x, long double __y) throw() __attribute((const)); 
# 342
extern long double fminl(long double __x, long double __y) throw() __attribute((const)); extern long double __fminl(long double __x, long double __y) throw() __attribute((const)); 
# 346
extern int __fpclassifyl(long double __value) throw()
# 347
 __attribute((const)); 
# 350
extern __attribute((gnu_inline)) inline int __signbitl(long double __value) throw()
# 351
 __attribute((const)); 
# 355
extern long double fmal(long double __x, long double __y, long double __z) throw(); extern long double __fmal(long double __x, long double __y, long double __z) throw(); 
# 364
extern long double scalbl(long double __x, long double __n) throw(); extern long double __scalbl(long double __x, long double __n) throw(); 
# 149 "/usr/include/math.h" 3
extern int signgam; 
# 191 "/usr/include/math.h" 3
enum { 
# 192
FP_NAN, 
# 195
FP_INFINITE, 
# 198
FP_ZERO, 
# 201
FP_SUBNORMAL, 
# 204
FP_NORMAL
# 207
}; 
# 295 "/usr/include/math.h" 3
typedef 
# 289
enum { 
# 290
_IEEE_ = (-1), 
# 291
_SVID_ = 0, 
# 292
_XOPEN_, 
# 293
_POSIX_, 
# 294
_ISOC_
# 295
} _LIB_VERSION_TYPE; 
# 300
extern _LIB_VERSION_TYPE _LIB_VERSION; 
# 311 "/usr/include/math.h" 3
struct __exception { 
# 316
int type; 
# 317
char *name; 
# 318
double arg1; 
# 319
double arg2; 
# 320
double retval; 
# 321
}; 
# 324
extern int matherr(__exception * __exc) throw(); 
# 62 "/usr/include/bits/mathinline.h" 3
__attribute((__gnu_inline__)) extern inline int
# 63
 __attribute((__leaf__)) __signbitf(float __x) throw() 
# 64
{ 
# 66
return __builtin_signbitf(__x); 
# 71
} 
# 72
__attribute((__gnu_inline__)) extern inline int
# 73
 __attribute((__leaf__)) __signbit(double __x) throw() 
# 74
{ 
# 76
return __builtin_signbit(__x); 
# 81
} 
# 83
__attribute((__gnu_inline__)) extern inline int
# 84
 __attribute((__leaf__)) __signbitl(long double __x) throw() 
# 85
{ 
# 86
return __signbit((double)__x); 
# 87
} 
# 117 "/usr/include/bits/mathinline.h" 3
__attribute((__gnu_inline__)) extern inline double fdim(double __x, double __y) throw(); 
# 118
__attribute((__gnu_inline__)) extern inline double
# 119
 __attribute((__leaf__)) fdim(double __x, double __y) throw() 
# 120
{ 
# 121
return (__x <= __y) ? 0 : (__x - __y); 
# 122
} 
# 124
__attribute((__gnu_inline__)) extern inline float fdimf(float __x, float __y) throw(); 
# 125
__attribute((__gnu_inline__)) extern inline float
# 126
 __attribute((__leaf__)) fdimf(float __x, float __y) throw() 
# 127
{ 
# 128
return (__x <= __y) ? 0 : (__x - __y); 
# 129
} 
# 475 "/usr/include/math.h" 3
}
# 34 "/usr/include/stdlib.h" 3
extern "C" {
# 44 "/usr/include/bits/byteswap.h" 3
static inline unsigned __bswap_32(unsigned __bsx) 
# 45
{ 
# 46
return __builtin_bswap32(__bsx); 
# 47
} 
# 75 "/usr/include/bits/byteswap.h" 3
static inline __uint64_t __bswap_64(__uint64_t __bsx) 
# 76
{ 
# 77
return __builtin_bswap64(__bsx); 
# 78
} 
# 66 "/usr/include/bits/waitstatus.h" 3
union wait { 
# 68
int w_status; 
# 70
struct { 
# 72
unsigned __w_termsig:7; 
# 73
unsigned __w_coredump:1; 
# 74
unsigned __w_retcode:8; 
# 75
unsigned:16; 
# 83
} __wait_terminated; 
# 85
struct { 
# 87
unsigned __w_stopval:8; 
# 88
unsigned __w_stopsig:8; 
# 89
unsigned:16; 
# 96
} __wait_stopped; 
# 97
}; 
# 101 "/usr/include/stdlib.h" 3
typedef 
# 98
struct { 
# 99
int quot; 
# 100
int rem; 
# 101
} div_t; 
# 109
typedef 
# 106
struct { 
# 107
long quot; 
# 108
long rem; 
# 109
} ldiv_t; 
# 121
__extension__ typedef 
# 118
struct { 
# 119
long long quot; 
# 120
long long rem; 
# 121
} lldiv_t; 
# 139 "/usr/include/stdlib.h" 3
extern size_t __ctype_get_mb_cur_max() throw(); 
# 144
extern __attribute((gnu_inline)) inline double atof(const char * __nptr) throw()
# 145
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 147
extern __attribute((gnu_inline)) inline int atoi(const char * __nptr) throw()
# 148
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 150
extern __attribute((gnu_inline)) inline long atol(const char * __nptr) throw()
# 151
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 157
__extension__ extern __attribute((gnu_inline)) inline long long atoll(const char * __nptr) throw()
# 158
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 164
extern double strtod(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 166
 __attribute((__nonnull__(1))); 
# 172
extern float strtof(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 173
 __attribute((__nonnull__(1))); 
# 175
extern long double strtold(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 177
 __attribute((__nonnull__(1))); 
# 183
extern long strtol(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 185
 __attribute((__nonnull__(1))); 
# 187
extern unsigned long strtoul(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 189
 __attribute((__nonnull__(1))); 
# 195
__extension__ extern long long strtoq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 197
 __attribute((__nonnull__(1))); 
# 200
__extension__ extern unsigned long long strtouq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 202
 __attribute((__nonnull__(1))); 
# 209
__extension__ extern long long strtoll(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 211
 __attribute((__nonnull__(1))); 
# 214
__extension__ extern unsigned long long strtoull(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 216
 __attribute((__nonnull__(1))); 
# 239 "/usr/include/stdlib.h" 3
extern long strtol_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 241
 __attribute((__nonnull__(1, 4))); 
# 243
extern unsigned long strtoul_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 246
 __attribute((__nonnull__(1, 4))); 
# 249
__extension__ extern long long strtoll_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 252
 __attribute((__nonnull__(1, 4))); 
# 255
__extension__ extern unsigned long long strtoull_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 258
 __attribute((__nonnull__(1, 4))); 
# 260
extern double strtod_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, __locale_t __loc) throw()
# 262
 __attribute((__nonnull__(1, 3))); 
# 264
extern float strtof_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, __locale_t __loc) throw()
# 266
 __attribute((__nonnull__(1, 3))); 
# 268
extern long double strtold_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, __locale_t __loc) throw()
# 271
 __attribute((__nonnull__(1, 3))); 
# 277
__attribute((__gnu_inline__)) extern inline int
# 278
 __attribute((__leaf__)) atoi(const char *__nptr) throw() 
# 279
{ 
# 280
return (int)strtol(__nptr, (char **)__null, 10); 
# 281
} 
# 282
__attribute((__gnu_inline__)) extern inline long
# 283
 __attribute((__leaf__)) atol(const char *__nptr) throw() 
# 284
{ 
# 285
return strtol(__nptr, (char **)__null, 10); 
# 286
} 
# 292
__extension__ 
# 291
__attribute((__gnu_inline__)) extern inline long long
# 292
 __attribute((__leaf__)) atoll(const char *__nptr) throw() 
# 293
{ 
# 294
return strtoll(__nptr, (char **)__null, 10); 
# 295
} 
# 305 "/usr/include/stdlib.h" 3
extern char *l64a(long __n) throw(); 
# 308
extern long a64l(const char * __s) throw()
# 309
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 27 "/usr/include/sys/types.h" 3
extern "C" {
# 33
typedef __u_char u_char; 
# 34
typedef __u_short u_short; 
# 35
typedef __u_int u_int; 
# 36
typedef __u_long u_long; 
# 37
typedef __quad_t quad_t; 
# 38
typedef __u_quad_t u_quad_t; 
# 39
typedef __fsid_t fsid_t; 
# 44
typedef __loff_t loff_t; 
# 48
typedef __ino_t ino_t; 
# 55
typedef __ino64_t ino64_t; 
# 60
typedef __dev_t dev_t; 
# 65
typedef __gid_t gid_t; 
# 70
typedef __mode_t mode_t; 
# 75
typedef __nlink_t nlink_t; 
# 80
typedef __uid_t uid_t; 
# 86
typedef __off_t off_t; 
# 93
typedef __off64_t off64_t; 
# 104 "/usr/include/sys/types.h" 3
typedef __id_t id_t; 
# 109
typedef __ssize_t ssize_t; 
# 115
typedef __daddr_t daddr_t; 
# 116
typedef __caddr_t caddr_t; 
# 122
typedef __key_t key_t; 
# 136 "/usr/include/sys/types.h" 3
typedef __useconds_t useconds_t; 
# 140
typedef __suseconds_t suseconds_t; 
# 150 "/usr/include/sys/types.h" 3
typedef unsigned long ulong; 
# 151
typedef unsigned short ushort; 
# 152
typedef unsigned uint; 
# 194 "/usr/include/sys/types.h" 3
typedef signed char int8_t __attribute((__mode__(__QI__))); 
# 195
typedef short int16_t __attribute((__mode__(__HI__))); 
# 196
typedef int int32_t __attribute((__mode__(__SI__))); 
# 197
typedef long int64_t __attribute((__mode__(__DI__))); 
# 200
typedef unsigned char u_int8_t __attribute((__mode__(__QI__))); 
# 201
typedef unsigned short u_int16_t __attribute((__mode__(__HI__))); 
# 202
typedef unsigned u_int32_t __attribute((__mode__(__SI__))); 
# 203
typedef unsigned long u_int64_t __attribute((__mode__(__DI__))); 
# 205
typedef long register_t __attribute((__mode__(__word__))); 
# 23 "/usr/include/bits/sigset.h" 3
typedef int __sig_atomic_t; 
# 31
typedef 
# 29
struct { 
# 30
unsigned long __val[(1024) / ((8) * sizeof(unsigned long))]; 
# 31
} __sigset_t; 
# 37 "/usr/include/sys/select.h" 3
typedef __sigset_t sigset_t; 
# 54 "/usr/include/sys/select.h" 3
typedef long __fd_mask; 
# 75 "/usr/include/sys/select.h" 3
typedef 
# 65
struct { 
# 69
__fd_mask fds_bits[1024 / (8 * ((int)sizeof(__fd_mask)))]; 
# 75
} fd_set; 
# 82
typedef __fd_mask fd_mask; 
# 96 "/usr/include/sys/select.h" 3
extern "C" {
# 106 "/usr/include/sys/select.h" 3
extern int select(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, timeval *__restrict__ __timeout); 
# 118 "/usr/include/sys/select.h" 3
extern int pselect(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, const timespec *__restrict__ __timeout, const __sigset_t *__restrict__ __sigmask); 
# 131 "/usr/include/sys/select.h" 3
}
# 29 "/usr/include/sys/sysmacros.h" 3
extern "C" {
# 32
__extension__ extern __attribute((gnu_inline)) inline unsigned gnu_dev_major(unsigned long long __dev) throw()
# 33
 __attribute((const)); 
# 35
__extension__ extern __attribute((gnu_inline)) inline unsigned gnu_dev_minor(unsigned long long __dev) throw()
# 36
 __attribute((const)); 
# 38
__extension__ extern __attribute((gnu_inline)) inline unsigned long long gnu_dev_makedev(unsigned __major, unsigned __minor) throw()
# 40
 __attribute((const)); 
# 44
__extension__ 
# 43
__attribute((__gnu_inline__)) __attribute((const)) extern inline unsigned
# 44
 __attribute((__leaf__)) gnu_dev_major(unsigned long long __dev) throw() 
# 45
{ 
# 46
return ((__dev >> 8) & (4095)) | (((unsigned)(__dev >> 32)) & (~4095)); 
# 47
} 
# 50
__extension__ 
# 49
__attribute((__gnu_inline__)) __attribute((const)) extern inline unsigned
# 50
 __attribute((__leaf__)) gnu_dev_minor(unsigned long long __dev) throw() 
# 51
{ 
# 52
return (__dev & (255)) | (((unsigned)(__dev >> 12)) & (~255)); 
# 53
} 
# 56
__extension__ 
# 55
__attribute((__gnu_inline__)) __attribute((const)) extern inline unsigned long long
# 56
 __attribute((__leaf__)) gnu_dev_makedev(unsigned __major, unsigned __minor) throw() 
# 57
{ 
# 58
return (((__minor & (255)) | ((__major & (4095)) << 8)) | (((unsigned long long)(__minor & (~255))) << 12)) | (((unsigned long long)(__major & (~4095))) << 32); 
# 61
} 
# 63
}
# 228 "/usr/include/sys/types.h" 3
typedef __blksize_t blksize_t; 
# 235
typedef __blkcnt_t blkcnt_t; 
# 239
typedef __fsblkcnt_t fsblkcnt_t; 
# 243
typedef __fsfilcnt_t fsfilcnt_t; 
# 262 "/usr/include/sys/types.h" 3
typedef __blkcnt64_t blkcnt64_t; 
# 263
typedef __fsblkcnt64_t fsblkcnt64_t; 
# 264
typedef __fsfilcnt64_t fsfilcnt64_t; 
# 49 "/usr/include/bits/pthreadtypes.h" 3
typedef unsigned long pthread_t; 
# 52
union pthread_attr_t { 
# 54
char __size[56]; 
# 55
long __align; 
# 56
}; 
# 58
typedef pthread_attr_t pthread_attr_t; 
# 68
typedef 
# 64
struct __pthread_internal_list { 
# 66
__pthread_internal_list *__prev; 
# 67
__pthread_internal_list *__next; 
# 68
} __pthread_list_t; 
# 116 "/usr/include/bits/pthreadtypes.h" 3
typedef 
# 80 "/usr/include/bits/pthreadtypes.h" 3
union { 
# 81
struct __pthread_mutex_s { 
# 83
int __lock; 
# 84
unsigned __count; 
# 85
int __owner; 
# 87
unsigned __nusers; 
# 91
int __kind; 
# 93
short __spins; 
# 94
short __elision; 
# 95
__pthread_list_t __list; 
# 113 "/usr/include/bits/pthreadtypes.h" 3
} __data; 
# 114
char __size[40]; 
# 115
long __align; 
# 116
} pthread_mutex_t; 
# 122
typedef 
# 119
union { 
# 120
char __size[4]; 
# 121
int __align; 
# 122
} pthread_mutexattr_t; 
# 142
typedef 
# 128
union { 
# 130
struct { 
# 131
int __lock; 
# 132
unsigned __futex; 
# 133
__extension__ unsigned long long __total_seq; 
# 134
__extension__ unsigned long long __wakeup_seq; 
# 135
__extension__ unsigned long long __woken_seq; 
# 136
void *__mutex; 
# 137
unsigned __nwaiters; 
# 138
unsigned __broadcast_seq; 
# 139
} __data; 
# 140
char __size[48]; 
# 141
__extension__ long long __align; 
# 142
} pthread_cond_t; 
# 148
typedef 
# 145
union { 
# 146
char __size[4]; 
# 147
int __align; 
# 148
} pthread_condattr_t; 
# 152
typedef unsigned pthread_key_t; 
# 156
typedef int pthread_once_t; 
# 201 "/usr/include/bits/pthreadtypes.h" 3
typedef 
# 163 "/usr/include/bits/pthreadtypes.h" 3
union { 
# 166
struct { 
# 167
int __lock; 
# 168
unsigned __nr_readers; 
# 169
unsigned __readers_wakeup; 
# 170
unsigned __writer_wakeup; 
# 171
unsigned __nr_readers_queued; 
# 172
unsigned __nr_writers_queued; 
# 173
int __writer; 
# 174
int __shared; 
# 175
unsigned long __pad1; 
# 176
unsigned long __pad2; 
# 179
unsigned __flags; 
# 180
} __data; 
# 199 "/usr/include/bits/pthreadtypes.h" 3
char __size[56]; 
# 200
long __align; 
# 201
} pthread_rwlock_t; 
# 207
typedef 
# 204
union { 
# 205
char __size[8]; 
# 206
long __align; 
# 207
} pthread_rwlockattr_t; 
# 213
typedef volatile int pthread_spinlock_t; 
# 222
typedef 
# 219
union { 
# 220
char __size[32]; 
# 221
long __align; 
# 222
} pthread_barrier_t; 
# 228
typedef 
# 225
union { 
# 226
char __size[4]; 
# 227
int __align; 
# 228
} pthread_barrierattr_t; 
# 273 "/usr/include/sys/types.h" 3
}
# 321 "/usr/include/stdlib.h" 3
extern long random() throw(); 
# 324
extern void srandom(unsigned __seed) throw(); 
# 330
extern char *initstate(unsigned __seed, char * __statebuf, size_t __statelen) throw()
# 331
 __attribute((__nonnull__(2))); 
# 335
extern char *setstate(char * __statebuf) throw() __attribute((__nonnull__(1))); 
# 343
struct random_data { 
# 345
int32_t *fptr; 
# 346
int32_t *rptr; 
# 347
int32_t *state; 
# 348
int rand_type; 
# 349
int rand_deg; 
# 350
int rand_sep; 
# 351
int32_t *end_ptr; 
# 352
}; 
# 354
extern int random_r(random_data *__restrict__ __buf, int32_t *__restrict__ __result) throw()
# 355
 __attribute((__nonnull__(1, 2))); 
# 357
extern int srandom_r(unsigned __seed, random_data * __buf) throw()
# 358
 __attribute((__nonnull__(2))); 
# 360
extern int initstate_r(unsigned __seed, char *__restrict__ __statebuf, size_t __statelen, random_data *__restrict__ __buf) throw()
# 363
 __attribute((__nonnull__(2, 4))); 
# 365
extern int setstate_r(char *__restrict__ __statebuf, random_data *__restrict__ __buf) throw()
# 367
 __attribute((__nonnull__(1, 2))); 
# 374
extern int rand() throw(); 
# 376
extern void srand(unsigned __seed) throw(); 
# 381
extern int rand_r(unsigned * __seed) throw(); 
# 389
extern double drand48() throw(); 
# 390
extern double erand48(unsigned short  __xsubi[3]) throw() __attribute((__nonnull__(1))); 
# 393
extern long lrand48() throw(); 
# 394
extern long nrand48(unsigned short  __xsubi[3]) throw()
# 395
 __attribute((__nonnull__(1))); 
# 398
extern long mrand48() throw(); 
# 399
extern long jrand48(unsigned short  __xsubi[3]) throw()
# 400
 __attribute((__nonnull__(1))); 
# 403
extern void srand48(long __seedval) throw(); 
# 404
extern unsigned short *seed48(unsigned short  __seed16v[3]) throw()
# 405
 __attribute((__nonnull__(1))); 
# 406
extern void lcong48(unsigned short  __param[7]) throw() __attribute((__nonnull__(1))); 
# 412
struct drand48_data { 
# 414
unsigned short __x[3]; 
# 415
unsigned short __old_x[3]; 
# 416
unsigned short __c; 
# 417
unsigned short __init; 
# 418
unsigned long long __a; 
# 419
}; 
# 422
extern int drand48_r(drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 423
 __attribute((__nonnull__(1, 2))); 
# 424
extern int erand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 426
 __attribute((__nonnull__(1, 2))); 
# 429
extern int lrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 431
 __attribute((__nonnull__(1, 2))); 
# 432
extern int nrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 435
 __attribute((__nonnull__(1, 2))); 
# 438
extern int mrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 440
 __attribute((__nonnull__(1, 2))); 
# 441
extern int jrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 444
 __attribute((__nonnull__(1, 2))); 
# 447
extern int srand48_r(long __seedval, drand48_data * __buffer) throw()
# 448
 __attribute((__nonnull__(2))); 
# 450
extern int seed48_r(unsigned short  __seed16v[3], drand48_data * __buffer) throw()
# 451
 __attribute((__nonnull__(1, 2))); 
# 453
extern int lcong48_r(unsigned short  __param[7], drand48_data * __buffer) throw()
# 455
 __attribute((__nonnull__(1, 2))); 
# 465
extern void *malloc(size_t __size) throw() __attribute((__malloc__)); 
# 467
extern void *calloc(size_t __nmemb, size_t __size) throw()
# 468
 __attribute((__malloc__)); 
# 479
extern void *realloc(void * __ptr, size_t __size) throw()
# 480
 __attribute((__warn_unused_result__)); 
# 482
extern void free(void * __ptr) throw(); 
# 487
extern void cfree(void * __ptr) throw(); 
# 26 "/usr/include/alloca.h" 3
extern "C" {
# 32
extern void *alloca(size_t __size) throw(); 
# 38
}
# 497 "/usr/include/stdlib.h" 3
extern void *valloc(size_t __size) throw() __attribute((__malloc__)); 
# 502
extern int posix_memalign(void ** __memptr, size_t __alignment, size_t __size) throw()
# 503
 __attribute((__nonnull__(1))); 
# 508
extern void *aligned_alloc(size_t __alignment, size_t __size) throw()
# 509
 __attribute((__malloc__, __alloc_size__(2))); 
# 514
extern void abort() throw() __attribute((__noreturn__)); 
# 518
extern int atexit(void (* __func)(void)) throw() __attribute((__nonnull__(1))); 
# 523
extern "C++" int at_quick_exit(void (* __func)(void)) throw() __asm__("at_quick_exit")
# 524
 __attribute((__nonnull__(1))); 
# 534
extern int on_exit(void (* __func)(int __status, void * __arg), void * __arg) throw()
# 535
 __attribute((__nonnull__(1))); 
# 542
extern void exit(int __status) throw() __attribute((__noreturn__)); 
# 548
extern void quick_exit(int __status) throw() __attribute((__noreturn__)); 
# 556
extern void _Exit(int __status) throw() __attribute((__noreturn__)); 
# 563
extern char *getenv(const char * __name) throw() __attribute((__nonnull__(1))); 
# 569
extern char *secure_getenv(const char * __name) throw()
# 570
 __attribute((__nonnull__(1))); 
# 577
extern int putenv(char * __string) throw() __attribute((__nonnull__(1))); 
# 583
extern int setenv(const char * __name, const char * __value, int __replace) throw()
# 584
 __attribute((__nonnull__(2))); 
# 587
extern int unsetenv(const char * __name) throw() __attribute((__nonnull__(1))); 
# 594
extern int clearenv() throw(); 
# 605 "/usr/include/stdlib.h" 3
extern char *mktemp(char * __template) throw() __attribute((__nonnull__(1))); 
# 619 "/usr/include/stdlib.h" 3
extern int mkstemp(char * __template) __attribute((__nonnull__(1))); 
# 629 "/usr/include/stdlib.h" 3
extern int mkstemp64(char * __template) __attribute((__nonnull__(1))); 
# 641 "/usr/include/stdlib.h" 3
extern int mkstemps(char * __template, int __suffixlen) __attribute((__nonnull__(1))); 
# 651 "/usr/include/stdlib.h" 3
extern int mkstemps64(char * __template, int __suffixlen)
# 652
 __attribute((__nonnull__(1))); 
# 662 "/usr/include/stdlib.h" 3
extern char *mkdtemp(char * __template) throw() __attribute((__nonnull__(1))); 
# 673 "/usr/include/stdlib.h" 3
extern int mkostemp(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 683 "/usr/include/stdlib.h" 3
extern int mkostemp64(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 693 "/usr/include/stdlib.h" 3
extern int mkostemps(char * __template, int __suffixlen, int __flags)
# 694
 __attribute((__nonnull__(1))); 
# 705 "/usr/include/stdlib.h" 3
extern int mkostemps64(char * __template, int __suffixlen, int __flags)
# 706
 __attribute((__nonnull__(1))); 
# 716
extern int system(const char * __command); 
# 723
extern char *canonicalize_file_name(const char * __name) throw()
# 724
 __attribute((__nonnull__(1))); 
# 733 "/usr/include/stdlib.h" 3
extern char *realpath(const char *__restrict__ __name, char *__restrict__ __resolved) throw(); 
# 741
typedef int (*__compar_fn_t)(const void *, const void *); 
# 744
typedef __compar_fn_t comparison_fn_t; 
# 748
typedef int (*__compar_d_fn_t)(const void *, const void *, void *); 
# 754
extern void *bsearch(const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 756
 __attribute((__nonnull__(1, 2, 5))); 
# 760
extern void qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 761
 __attribute((__nonnull__(1, 4))); 
# 763
extern void qsort_r(void * __base, size_t __nmemb, size_t __size, __compar_d_fn_t __compar, void * __arg)
# 765
 __attribute((__nonnull__(1, 4))); 
# 770
extern int abs(int __x) throw() __attribute((const)); 
# 771
extern long labs(long __x) throw() __attribute((const)); 
# 775
__extension__ extern long long llabs(long long __x) throw()
# 776
 __attribute((const)); 
# 784
extern div_t div(int __numer, int __denom) throw()
# 785
 __attribute((const)); 
# 786
extern ldiv_t ldiv(long __numer, long __denom) throw()
# 787
 __attribute((const)); 
# 792
__extension__ extern lldiv_t lldiv(long long __numer, long long __denom) throw()
# 794
 __attribute((const)); 
# 807 "/usr/include/stdlib.h" 3
extern char *ecvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 808
 __attribute((__nonnull__(3, 4))); 
# 813
extern char *fcvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 814
 __attribute((__nonnull__(3, 4))); 
# 819
extern char *gcvt(double __value, int __ndigit, char * __buf) throw()
# 820
 __attribute((__nonnull__(3))); 
# 825
extern char *qecvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 827
 __attribute((__nonnull__(3, 4))); 
# 828
extern char *qfcvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 830
 __attribute((__nonnull__(3, 4))); 
# 831
extern char *qgcvt(long double __value, int __ndigit, char * __buf) throw()
# 832
 __attribute((__nonnull__(3))); 
# 837
extern int ecvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 839
 __attribute((__nonnull__(3, 4, 5))); 
# 840
extern int fcvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 842
 __attribute((__nonnull__(3, 4, 5))); 
# 844
extern int qecvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 847
 __attribute((__nonnull__(3, 4, 5))); 
# 848
extern int qfcvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 851
 __attribute((__nonnull__(3, 4, 5))); 
# 859
extern int mblen(const char * __s, size_t __n) throw(); 
# 862
extern int mbtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, size_t __n) throw(); 
# 866
extern int wctomb(char * __s, wchar_t __wchar) throw(); 
# 870
extern size_t mbstowcs(wchar_t *__restrict__ __pwcs, const char *__restrict__ __s, size_t __n) throw(); 
# 873
extern size_t wcstombs(char *__restrict__ __s, const wchar_t *__restrict__ __pwcs, size_t __n) throw(); 
# 884
extern int rpmatch(const char * __response) throw() __attribute((__nonnull__(1))); 
# 895 "/usr/include/stdlib.h" 3
extern int getsubopt(char **__restrict__ __optionp, char *const *__restrict__ __tokens, char **__restrict__ __valuep) throw()
# 898
 __attribute((__nonnull__(1, 2, 3))); 
# 904
extern void setkey(const char * __key) throw() __attribute((__nonnull__(1))); 
# 912
extern int posix_openpt(int __oflag); 
# 920
extern int grantpt(int __fd) throw(); 
# 924
extern int unlockpt(int __fd) throw(); 
# 929
extern char *ptsname(int __fd) throw(); 
# 936
extern int ptsname_r(int __fd, char * __buf, size_t __buflen) throw()
# 937
 __attribute((__nonnull__(2))); 
# 940
extern int getpt(); 
# 947
extern int getloadavg(double  __loadavg[], int __nelem) throw()
# 948
 __attribute((__nonnull__(1))); 
# 25 "/usr/include/bits/stdlib-float.h" 3
__attribute((__gnu_inline__)) extern inline double
# 26
 __attribute((__leaf__)) atof(const char *__nptr) throw() 
# 27
{ 
# 28
return strtod(__nptr, (char **)__null); 
# 29
} 
# 964 "/usr/include/stdlib.h" 3
}
# 184 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/c++config.h" 3
namespace std { 
# 186
typedef unsigned long size_t; 
# 187
typedef long ptrdiff_t; 
# 192
}
# 346 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/c++config.h" 3
namespace std { 
# 348
inline namespace __gnu_cxx_ldbl128 { }
# 349
}
# 68 "/usr/include/c++/4.8.2/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 72
template< class _Iterator, class _Container> class __normal_iterator; 
# 76
}
# 78
namespace std __attribute((__visibility__("default"))) { 
# 82
struct __true_type { }; 
# 83
struct __false_type { }; 
# 85
template< bool > 
# 86
struct __truth_type { 
# 87
typedef __false_type __type; }; 
# 90
template<> struct __truth_type< true>  { 
# 91
typedef __true_type __type; }; 
# 95
template< class _Sp, class _Tp> 
# 96
struct __traitor { 
# 98
enum { __value = ((bool)_Sp::__value) || ((bool)_Tp::__value)}; 
# 99
typedef typename __truth_type< __value> ::__type __type; 
# 100
}; 
# 103
template< class , class > 
# 104
struct __are_same { 
# 106
enum { __value}; 
# 107
typedef __false_type __type; 
# 108
}; 
# 110
template< class _Tp> 
# 111
struct __are_same< _Tp, _Tp>  { 
# 113
enum { __value = 1}; 
# 114
typedef __true_type __type; 
# 115
}; 
# 118
template< class _Tp> 
# 119
struct __is_void { 
# 121
enum { __value}; 
# 122
typedef __false_type __type; 
# 123
}; 
# 126
template<> struct __is_void< void>  { 
# 128
enum { __value = 1}; 
# 129
typedef __true_type __type; 
# 130
}; 
# 135
template< class _Tp> 
# 136
struct __is_integer { 
# 138
enum { __value}; 
# 139
typedef __false_type __type; 
# 140
}; 
# 146
template<> struct __is_integer< bool>  { 
# 148
enum { __value = 1}; 
# 149
typedef __true_type __type; 
# 150
}; 
# 153
template<> struct __is_integer< char>  { 
# 155
enum { __value = 1}; 
# 156
typedef __true_type __type; 
# 157
}; 
# 160
template<> struct __is_integer< signed char>  { 
# 162
enum { __value = 1}; 
# 163
typedef __true_type __type; 
# 164
}; 
# 167
template<> struct __is_integer< unsigned char>  { 
# 169
enum { __value = 1}; 
# 170
typedef __true_type __type; 
# 171
}; 
# 175
template<> struct __is_integer< wchar_t>  { 
# 177
enum { __value = 1}; 
# 178
typedef __true_type __type; 
# 179
}; 
# 199 "/usr/include/c++/4.8.2/bits/cpp_type_traits.h" 3
template<> struct __is_integer< short>  { 
# 201
enum { __value = 1}; 
# 202
typedef __true_type __type; 
# 203
}; 
# 206
template<> struct __is_integer< unsigned short>  { 
# 208
enum { __value = 1}; 
# 209
typedef __true_type __type; 
# 210
}; 
# 213
template<> struct __is_integer< int>  { 
# 215
enum { __value = 1}; 
# 216
typedef __true_type __type; 
# 217
}; 
# 220
template<> struct __is_integer< unsigned>  { 
# 222
enum { __value = 1}; 
# 223
typedef __true_type __type; 
# 224
}; 
# 227
template<> struct __is_integer< long>  { 
# 229
enum { __value = 1}; 
# 230
typedef __true_type __type; 
# 231
}; 
# 234
template<> struct __is_integer< unsigned long>  { 
# 236
enum { __value = 1}; 
# 237
typedef __true_type __type; 
# 238
}; 
# 241
template<> struct __is_integer< long long>  { 
# 243
enum { __value = 1}; 
# 244
typedef __true_type __type; 
# 245
}; 
# 248
template<> struct __is_integer< unsigned long long>  { 
# 250
enum { __value = 1}; 
# 251
typedef __true_type __type; 
# 252
}; 
# 257
template< class _Tp> 
# 258
struct __is_floating { 
# 260
enum { __value}; 
# 261
typedef __false_type __type; 
# 262
}; 
# 266
template<> struct __is_floating< float>  { 
# 268
enum { __value = 1}; 
# 269
typedef __true_type __type; 
# 270
}; 
# 273
template<> struct __is_floating< double>  { 
# 275
enum { __value = 1}; 
# 276
typedef __true_type __type; 
# 277
}; 
# 280
template<> struct __is_floating< long double>  { 
# 282
enum { __value = 1}; 
# 283
typedef __true_type __type; 
# 284
}; 
# 289
template< class _Tp> 
# 290
struct __is_pointer { 
# 292
enum { __value}; 
# 293
typedef __false_type __type; 
# 294
}; 
# 296
template< class _Tp> 
# 297
struct __is_pointer< _Tp *>  { 
# 299
enum { __value = 1}; 
# 300
typedef __true_type __type; 
# 301
}; 
# 306
template< class _Tp> 
# 307
struct __is_normal_iterator { 
# 309
enum { __value}; 
# 310
typedef __false_type __type; 
# 311
}; 
# 313
template< class _Iterator, class _Container> 
# 314
struct __is_normal_iterator< __gnu_cxx::__normal_iterator< _Iterator, _Container> >  { 
# 317
enum { __value = 1}; 
# 318
typedef __true_type __type; 
# 319
}; 
# 324
template< class _Tp> 
# 325
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> >  { 
# 327
}; 
# 332
template< class _Tp> 
# 333
struct __is_fundamental : public __traitor< __is_void< _Tp> , __is_arithmetic< _Tp> >  { 
# 335
}; 
# 340
template< class _Tp> 
# 341
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> >  { 
# 343
}; 
# 348
template< class _Tp> 
# 349
struct __is_char { 
# 351
enum { __value}; 
# 352
typedef __false_type __type; 
# 353
}; 
# 356
template<> struct __is_char< char>  { 
# 358
enum { __value = 1}; 
# 359
typedef __true_type __type; 
# 360
}; 
# 364
template<> struct __is_char< wchar_t>  { 
# 366
enum { __value = 1}; 
# 367
typedef __true_type __type; 
# 368
}; 
# 371
template< class _Tp> 
# 372
struct __is_byte { 
# 374
enum { __value}; 
# 375
typedef __false_type __type; 
# 376
}; 
# 379
template<> struct __is_byte< char>  { 
# 381
enum { __value = 1}; 
# 382
typedef __true_type __type; 
# 383
}; 
# 386
template<> struct __is_byte< signed char>  { 
# 388
enum { __value = 1}; 
# 389
typedef __true_type __type; 
# 390
}; 
# 393
template<> struct __is_byte< unsigned char>  { 
# 395
enum { __value = 1}; 
# 396
typedef __true_type __type; 
# 397
}; 
# 402
template< class _Tp> 
# 403
struct __is_move_iterator { 
# 405
enum { __value}; 
# 406
typedef __false_type __type; 
# 407
}; 
# 422 "/usr/include/c++/4.8.2/bits/cpp_type_traits.h" 3
}
# 37 "/usr/include/c++/4.8.2/ext/type_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 42
template< bool , class > 
# 43
struct __enable_if { 
# 44
}; 
# 46
template< class _Tp> 
# 47
struct __enable_if< true, _Tp>  { 
# 48
typedef _Tp __type; }; 
# 52
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 53
struct __conditional_type { 
# 54
typedef _Iftrue __type; }; 
# 56
template< class _Iftrue, class _Iffalse> 
# 57
struct __conditional_type< false, _Iftrue, _Iffalse>  { 
# 58
typedef _Iffalse __type; }; 
# 62
template< class _Tp> 
# 63
struct __add_unsigned { 
# 66
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 69
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 70
}; 
# 73
template<> struct __add_unsigned< char>  { 
# 74
typedef unsigned char __type; }; 
# 77
template<> struct __add_unsigned< signed char>  { 
# 78
typedef unsigned char __type; }; 
# 81
template<> struct __add_unsigned< short>  { 
# 82
typedef unsigned short __type; }; 
# 85
template<> struct __add_unsigned< int>  { 
# 86
typedef unsigned __type; }; 
# 89
template<> struct __add_unsigned< long>  { 
# 90
typedef unsigned long __type; }; 
# 93
template<> struct __add_unsigned< long long>  { 
# 94
typedef unsigned long long __type; }; 
# 98
template<> struct __add_unsigned< bool> ; 
# 101
template<> struct __add_unsigned< wchar_t> ; 
# 105
template< class _Tp> 
# 106
struct __remove_unsigned { 
# 109
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 112
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 113
}; 
# 116
template<> struct __remove_unsigned< char>  { 
# 117
typedef signed char __type; }; 
# 120
template<> struct __remove_unsigned< unsigned char>  { 
# 121
typedef signed char __type; }; 
# 124
template<> struct __remove_unsigned< unsigned short>  { 
# 125
typedef short __type; }; 
# 128
template<> struct __remove_unsigned< unsigned>  { 
# 129
typedef int __type; }; 
# 132
template<> struct __remove_unsigned< unsigned long>  { 
# 133
typedef long __type; }; 
# 136
template<> struct __remove_unsigned< unsigned long long>  { 
# 137
typedef long long __type; }; 
# 141
template<> struct __remove_unsigned< bool> ; 
# 144
template<> struct __remove_unsigned< wchar_t> ; 
# 148
template< class _Type> inline bool 
# 150 "/usr/include/c++/4.8.2/ext/type_traits.h" 3
__is_null_pointer(_Type *__ptr) 
# 151
{ return __ptr == 0; } 
# 153
template< class _Type> inline bool 
# 155 "/usr/include/c++/4.8.2/ext/type_traits.h" 3
__is_null_pointer(_Type) 
# 156
{ return false; } 
# 160
template< class _Tp, bool  = std::__is_integer< _Tp> ::__value> 
# 161
struct __promote { 
# 162
typedef double __type; }; 
# 167
template< class _Tp> 
# 168
struct __promote< _Tp, false>  { 
# 169
}; 
# 172
template<> struct __promote< long double>  { 
# 173
typedef long double __type; }; 
# 176
template<> struct __promote< double>  { 
# 177
typedef double __type; }; 
# 180
template<> struct __promote< float>  { 
# 181
typedef float __type; }; 
# 183
template< class _Tp, class _Up, class 
# 184
_Tp2 = typename __promote< _Tp> ::__type, class 
# 185
_Up2 = typename __promote< _Up> ::__type> 
# 186
struct __promote_2 { 
# 188
typedef __typeof__(_Tp2() + _Up2()) __type; 
# 189
}; 
# 191
template< class _Tp, class _Up, class _Vp, class 
# 192
_Tp2 = typename __promote< _Tp> ::__type, class 
# 193
_Up2 = typename __promote< _Up> ::__type, class 
# 194
_Vp2 = typename __promote< _Vp> ::__type> 
# 195
struct __promote_3 { 
# 197
typedef __typeof__((_Tp2() + _Up2()) + _Vp2()) __type; 
# 198
}; 
# 200
template< class _Tp, class _Up, class _Vp, class _Wp, class 
# 201
_Tp2 = typename __promote< _Tp> ::__type, class 
# 202
_Up2 = typename __promote< _Up> ::__type, class 
# 203
_Vp2 = typename __promote< _Vp> ::__type, class 
# 204
_Wp2 = typename __promote< _Wp> ::__type> 
# 205
struct __promote_4 { 
# 207
typedef __typeof__(((_Tp2() + _Up2()) + _Vp2()) + _Wp2()) __type; 
# 208
}; 
# 211
}
# 75 "/usr/include/c++/4.8.2/cmath" 3
namespace std __attribute((__visibility__("default"))) { 
# 81
inline double abs(double __x) 
# 82
{ return __builtin_fabs(__x); } 
# 87
inline float abs(float __x) 
# 88
{ return __builtin_fabsf(__x); } 
# 91
inline long double abs(long double __x) 
# 92
{ return __builtin_fabsl(__x); } 
# 95
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 99
abs(_Tp __x) 
# 100
{ return __builtin_fabs(__x); } 
# 102
using ::acos;
# 106
inline float acos(float __x) 
# 107
{ return __builtin_acosf(__x); } 
# 110
inline long double acos(long double __x) 
# 111
{ return __builtin_acosl(__x); } 
# 114
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 118
acos(_Tp __x) 
# 119
{ return __builtin_acos(__x); } 
# 121
using ::asin;
# 125
inline float asin(float __x) 
# 126
{ return __builtin_asinf(__x); } 
# 129
inline long double asin(long double __x) 
# 130
{ return __builtin_asinl(__x); } 
# 133
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 137
asin(_Tp __x) 
# 138
{ return __builtin_asin(__x); } 
# 140
using ::atan;
# 144
inline float atan(float __x) 
# 145
{ return __builtin_atanf(__x); } 
# 148
inline long double atan(long double __x) 
# 149
{ return __builtin_atanl(__x); } 
# 152
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 156
atan(_Tp __x) 
# 157
{ return __builtin_atan(__x); } 
# 159
using ::atan2;
# 163
inline float atan2(float __y, float __x) 
# 164
{ return __builtin_atan2f(__y, __x); } 
# 167
inline long double atan2(long double __y, long double __x) 
# 168
{ return __builtin_atan2l(__y, __x); } 
# 171
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 174
atan2(_Tp __y, _Up __x) 
# 175
{ 
# 176
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 177
return atan2((__type)__y, (__type)__x); 
# 178
} 
# 180
using ::ceil;
# 184
inline float ceil(float __x) 
# 185
{ return __builtin_ceilf(__x); } 
# 188
inline long double ceil(long double __x) 
# 189
{ return __builtin_ceill(__x); } 
# 192
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 196
ceil(_Tp __x) 
# 197
{ return __builtin_ceil(__x); } 
# 199
using ::cos;
# 203
inline float cos(float __x) 
# 204
{ return __builtin_cosf(__x); } 
# 207
inline long double cos(long double __x) 
# 208
{ return __builtin_cosl(__x); } 
# 211
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 215
cos(_Tp __x) 
# 216
{ return __builtin_cos(__x); } 
# 218
using ::cosh;
# 222
inline float cosh(float __x) 
# 223
{ return __builtin_coshf(__x); } 
# 226
inline long double cosh(long double __x) 
# 227
{ return __builtin_coshl(__x); } 
# 230
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 234
cosh(_Tp __x) 
# 235
{ return __builtin_cosh(__x); } 
# 237
using ::exp;
# 241
inline float exp(float __x) 
# 242
{ return __builtin_expf(__x); } 
# 245
inline long double exp(long double __x) 
# 246
{ return __builtin_expl(__x); } 
# 249
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 253
exp(_Tp __x) 
# 254
{ return __builtin_exp(__x); } 
# 256
using ::fabs;
# 260
inline float fabs(float __x) 
# 261
{ return __builtin_fabsf(__x); } 
# 264
inline long double fabs(long double __x) 
# 265
{ return __builtin_fabsl(__x); } 
# 268
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 272
fabs(_Tp __x) 
# 273
{ return __builtin_fabs(__x); } 
# 275
using ::floor;
# 279
inline float floor(float __x) 
# 280
{ return __builtin_floorf(__x); } 
# 283
inline long double floor(long double __x) 
# 284
{ return __builtin_floorl(__x); } 
# 287
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 291
floor(_Tp __x) 
# 292
{ return __builtin_floor(__x); } 
# 294
using ::fmod;
# 298
inline float fmod(float __x, float __y) 
# 299
{ return __builtin_fmodf(__x, __y); } 
# 302
inline long double fmod(long double __x, long double __y) 
# 303
{ return __builtin_fmodl(__x, __y); } 
# 306
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 309
fmod(_Tp __x, _Up __y) 
# 310
{ 
# 311
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 312
return fmod((__type)__x, (__type)__y); 
# 313
} 
# 315
using ::frexp;
# 319
inline float frexp(float __x, int *__exp) 
# 320
{ return __builtin_frexpf(__x, __exp); } 
# 323
inline long double frexp(long double __x, int *__exp) 
# 324
{ return __builtin_frexpl(__x, __exp); } 
# 327
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 331
frexp(_Tp __x, int *__exp) 
# 332
{ return __builtin_frexp(__x, __exp); } 
# 334
using ::ldexp;
# 338
inline float ldexp(float __x, int __exp) 
# 339
{ return __builtin_ldexpf(__x, __exp); } 
# 342
inline long double ldexp(long double __x, int __exp) 
# 343
{ return __builtin_ldexpl(__x, __exp); } 
# 346
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 350
ldexp(_Tp __x, int __exp) 
# 351
{ return __builtin_ldexp(__x, __exp); } 
# 353
using ::log;
# 357
inline float log(float __x) 
# 358
{ return __builtin_logf(__x); } 
# 361
inline long double log(long double __x) 
# 362
{ return __builtin_logl(__x); } 
# 365
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 369
log(_Tp __x) 
# 370
{ return __builtin_log(__x); } 
# 372
using ::log10;
# 376
inline float log10(float __x) 
# 377
{ return __builtin_log10f(__x); } 
# 380
inline long double log10(long double __x) 
# 381
{ return __builtin_log10l(__x); } 
# 384
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 388
log10(_Tp __x) 
# 389
{ return __builtin_log10(__x); } 
# 391
using ::modf;
# 395
inline float modf(float __x, float *__iptr) 
# 396
{ return __builtin_modff(__x, __iptr); } 
# 399
inline long double modf(long double __x, long double *__iptr) 
# 400
{ return __builtin_modfl(__x, __iptr); } 
# 403
using ::pow;
# 407
inline float pow(float __x, float __y) 
# 408
{ return __builtin_powf(__x, __y); } 
# 411
inline long double pow(long double __x, long double __y) 
# 412
{ return __builtin_powl(__x, __y); } 
# 418
inline double pow(double __x, int __i) 
# 419
{ return __builtin_powi(__x, __i); } 
# 422
inline float pow(float __x, int __n) 
# 423
{ return __builtin_powif(__x, __n); } 
# 426
inline long double pow(long double __x, int __n) 
# 427
{ return __builtin_powil(__x, __n); } 
# 431
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 434
pow(_Tp __x, _Up __y) 
# 435
{ 
# 436
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 437
return pow((__type)__x, (__type)__y); 
# 438
} 
# 440
using ::sin;
# 444
inline float sin(float __x) 
# 445
{ return __builtin_sinf(__x); } 
# 448
inline long double sin(long double __x) 
# 449
{ return __builtin_sinl(__x); } 
# 452
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 456
sin(_Tp __x) 
# 457
{ return __builtin_sin(__x); } 
# 459
using ::sinh;
# 463
inline float sinh(float __x) 
# 464
{ return __builtin_sinhf(__x); } 
# 467
inline long double sinh(long double __x) 
# 468
{ return __builtin_sinhl(__x); } 
# 471
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 475
sinh(_Tp __x) 
# 476
{ return __builtin_sinh(__x); } 
# 478
using ::sqrt;
# 482
inline float sqrt(float __x) 
# 483
{ return __builtin_sqrtf(__x); } 
# 486
inline long double sqrt(long double __x) 
# 487
{ return __builtin_sqrtl(__x); } 
# 490
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 494
sqrt(_Tp __x) 
# 495
{ return __builtin_sqrt(__x); } 
# 497
using ::tan;
# 501
inline float tan(float __x) 
# 502
{ return __builtin_tanf(__x); } 
# 505
inline long double tan(long double __x) 
# 506
{ return __builtin_tanl(__x); } 
# 509
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 513
tan(_Tp __x) 
# 514
{ return __builtin_tan(__x); } 
# 516
using ::tanh;
# 520
inline float tanh(float __x) 
# 521
{ return __builtin_tanhf(__x); } 
# 524
inline long double tanh(long double __x) 
# 525
{ return __builtin_tanhl(__x); } 
# 528
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 532
tanh(_Tp __x) 
# 533
{ return __builtin_tanh(__x); } 
# 536
}
# 555 "/usr/include/c++/4.8.2/cmath" 3
namespace std __attribute((__visibility__("default"))) { 
# 805 "/usr/include/c++/4.8.2/cmath" 3
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 808
fpclassify(_Tp __f) 
# 809
{ 
# 810
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 811
return __builtin_fpclassify(0, 1, 4, 3, 2, (__type)__f); 
# 813
} 
# 815
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 818
isfinite(_Tp __f) 
# 819
{ 
# 820
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 821
return __builtin_isfinite((__type)__f); 
# 822
} 
# 824
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 827
isinf(_Tp __f) 
# 828
{ 
# 829
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 830
return __builtin_isinf((__type)__f); 
# 831
} 
# 833
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 836
isnan(_Tp __f) 
# 837
{ 
# 838
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 839
return __builtin_isnan((__type)__f); 
# 840
} 
# 842
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 845
isnormal(_Tp __f) 
# 846
{ 
# 847
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 848
return __builtin_isnormal((__type)__f); 
# 849
} 
# 851
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 854
signbit(_Tp __f) 
# 855
{ 
# 856
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 857
return __builtin_signbit((__type)__f); 
# 858
} 
# 860
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 863
isgreater(_Tp __f1, _Tp __f2) 
# 864
{ 
# 865
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 866
return __builtin_isgreater((__type)__f1, (__type)__f2); 
# 867
} 
# 869
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 872
isgreaterequal(_Tp __f1, _Tp __f2) 
# 873
{ 
# 874
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 875
return __builtin_isgreaterequal((__type)__f1, (__type)__f2); 
# 876
} 
# 878
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 881
isless(_Tp __f1, _Tp __f2) 
# 882
{ 
# 883
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 884
return __builtin_isless((__type)__f1, (__type)__f2); 
# 885
} 
# 887
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 890
islessequal(_Tp __f1, _Tp __f2) 
# 891
{ 
# 892
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 893
return __builtin_islessequal((__type)__f1, (__type)__f2); 
# 894
} 
# 896
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 899
islessgreater(_Tp __f1, _Tp __f2) 
# 900
{ 
# 901
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 902
return __builtin_islessgreater((__type)__f1, (__type)__f2); 
# 903
} 
# 905
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value, int> ::__type 
# 908
isunordered(_Tp __f1, _Tp __f2) 
# 909
{ 
# 910
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 911
return __builtin_isunordered((__type)__f1, (__type)__f2); 
# 912
} 
# 917
}
# 114 "/usr/include/c++/4.8.2/cstdlib" 3
namespace std __attribute((__visibility__("default"))) { 
# 118
using ::div_t;
# 119
using ::ldiv_t;
# 121
using ::abort;
# 122
using ::abs;
# 123
using ::atexit;
# 129
using ::atof;
# 130
using ::atoi;
# 131
using ::atol;
# 132
using ::bsearch;
# 133
using ::calloc;
# 134
using ::div;
# 135
using ::exit;
# 136
using ::free;
# 137
using ::getenv;
# 138
using ::labs;
# 139
using ::ldiv;
# 140
using ::malloc;
# 142
using ::mblen;
# 143
using ::mbstowcs;
# 144
using ::mbtowc;
# 146
using ::qsort;
# 152
using ::rand;
# 153
using ::realloc;
# 154
using ::srand;
# 155
using ::strtod;
# 156
using ::strtol;
# 157
using ::strtoul;
# 158
using ::system;
# 160
using ::wcstombs;
# 161
using ::wctomb;
# 166
inline long abs(long __i) { return __builtin_labs(__i); } 
# 169
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); } 
# 174
inline long long abs(long long __x) { return __builtin_llabs(__x); } 
# 179
inline __int128_t abs(__int128_t __x) { return (__x >= (0)) ? __x : (-__x); } 
# 183
}
# 196 "/usr/include/c++/4.8.2/cstdlib" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 201
using ::lldiv_t;
# 207
using ::_Exit;
# 211
using ::llabs;
# 214
inline lldiv_t div(long long __n, long long __d) 
# 215
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; } 
# 217
using ::lldiv;
# 228 "/usr/include/c++/4.8.2/cstdlib" 3
using ::atoll;
# 229
using ::strtoll;
# 230
using ::strtoull;
# 232
using ::strtof;
# 233
using ::strtold;
# 236
}
# 238
namespace std { 
# 241
using __gnu_cxx::lldiv_t;
# 243
using __gnu_cxx::_Exit;
# 245
using __gnu_cxx::llabs;
# 246
using __gnu_cxx::div;
# 247
using __gnu_cxx::lldiv;
# 249
using __gnu_cxx::atoll;
# 250
using __gnu_cxx::strtof;
# 251
using __gnu_cxx::strtoll;
# 252
using __gnu_cxx::strtoull;
# 253
using __gnu_cxx::strtold;
# 254
}
# 8970 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
__attribute((always_inline)) inline int signbit(float x); 
# 8974
__attribute((always_inline)) inline int signbit(double x); 
# 8976
__attribute((always_inline)) inline int signbit(long double x); 
# 8978
__attribute((always_inline)) inline int isfinite(float x); 
# 8982
__attribute((always_inline)) inline int isfinite(double x); 
# 8984
__attribute((always_inline)) inline int isfinite(long double x); 
# 8986
__attribute((always_inline)) inline int isnan(float x); 
# 8993
extern "C" __attribute((always_inline)) inline int isnan(double x) throw(); 
# 8995
__attribute((always_inline)) inline int isnan(long double x); 
# 8997
__attribute((always_inline)) inline int isinf(float x); 
# 9004
extern "C" __attribute((always_inline)) inline int isinf(double x) throw(); 
# 9006
__attribute((always_inline)) inline int isinf(long double x); 
# 9063 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
namespace std { 
# 9065
template< class T> extern T __pow_helper(T, int); 
# 9066
template< class T> extern T __cmath_power(T, unsigned); 
# 9067
}
# 9069
using std::abs;
# 9070
using std::fabs;
# 9071
using std::ceil;
# 9072
using std::floor;
# 9073
using std::sqrt;
# 9075
using std::pow;
# 9077
using std::log;
# 9078
using std::log10;
# 9079
using std::fmod;
# 9080
using std::modf;
# 9081
using std::exp;
# 9082
using std::frexp;
# 9083
using std::ldexp;
# 9084
using std::asin;
# 9085
using std::sin;
# 9086
using std::sinh;
# 9087
using std::acos;
# 9088
using std::cos;
# 9089
using std::cosh;
# 9090
using std::atan;
# 9091
using std::atan2;
# 9092
using std::tan;
# 9093
using std::tanh;
# 9458 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
namespace std { 
# 9467 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern inline long long abs(long long); 
# 9477 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern inline long abs(long); 
# 9478
extern inline float abs(float); 
# 9479
extern inline double abs(double); 
# 9480
extern inline float fabs(float); 
# 9481
extern inline float ceil(float); 
# 9482
extern inline float floor(float); 
# 9483
extern inline float sqrt(float); 
# 9484
extern inline float pow(float, float); 
# 9493 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
extern inline float pow(float, int); 
# 9494
extern inline double pow(double, int); 
# 9499
extern inline float log(float); 
# 9500
extern inline float log10(float); 
# 9501
extern inline float fmod(float, float); 
# 9502
extern inline float modf(float, float *); 
# 9503
extern inline float exp(float); 
# 9504
extern inline float frexp(float, int *); 
# 9505
extern inline float ldexp(float, int); 
# 9506
extern inline float asin(float); 
# 9507
extern inline float sin(float); 
# 9508
extern inline float sinh(float); 
# 9509
extern inline float acos(float); 
# 9510
extern inline float cos(float); 
# 9511
extern inline float cosh(float); 
# 9512
extern inline float atan(float); 
# 9513
extern inline float atan2(float, float); 
# 9514
extern inline float tan(float); 
# 9515
extern inline float tanh(float); 
# 9589 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
}
# 9726 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
static inline float logb(float a); 
# 9728
static inline int ilogb(float a); 
# 9730
static inline float scalbn(float a, int b); 
# 9732
static inline float scalbln(float a, long b); 
# 9734
static inline float exp2(float a); 
# 9736
static inline float expm1(float a); 
# 9738
static inline float log2(float a); 
# 9740
static inline float log1p(float a); 
# 9742
static inline float acosh(float a); 
# 9744
static inline float asinh(float a); 
# 9746
static inline float atanh(float a); 
# 9748
static inline float hypot(float a, float b); 
# 9750
static inline float cbrt(float a); 
# 9752
static inline float erf(float a); 
# 9754
static inline float erfc(float a); 
# 9756
static inline float lgamma(float a); 
# 9758
static inline float tgamma(float a); 
# 9760
static inline float copysign(float a, float b); 
# 9762
static inline float nextafter(float a, float b); 
# 9764
static inline float remainder(float a, float b); 
# 9766
static inline float remquo(float a, float b, int * quo); 
# 9768
static inline float round(float a); 
# 9770
static inline long lround(float a); 
# 9772
static inline long long llround(float a); 
# 9774
static inline float trunc(float a); 
# 9776
static inline float rint(float a); 
# 9778
static inline long lrint(float a); 
# 9780
static inline long long llrint(float a); 
# 9782
static inline float nearbyint(float a); 
# 9784
static inline float fdim(float a, float b); 
# 9786
static inline float fma(float a, float b, float c); 
# 9788
static inline float fmax(float a, float b); 
# 9790
static inline float fmin(float a, float b); 
# 9829 "/sw/summit/cuda/10.1.168/include/crt/math_functions.h"
static inline float exp10(float a); 
# 9831
static inline float rsqrt(float a); 
# 9833
static inline float rcbrt(float a); 
# 9835
static inline float sinpi(float a); 
# 9837
static inline float cospi(float a); 
# 9839
static inline void sincospi(float a, float * sptr, float * cptr); 
# 9841
static inline void sincos(float a, float * sptr, float * cptr); 
# 9843
static inline float j0(float a); 
# 9845
static inline float j1(float a); 
# 9847
static inline float jn(int n, float a); 
# 9849
static inline float y0(float a); 
# 9851
static inline float y1(float a); 
# 9853
static inline float yn(int n, float a); 
# 9855
static inline float cyl_bessel_i0(float a); 
# 9857
static inline float cyl_bessel_i1(float a); 
# 9859
static inline float erfinv(float a); 
# 9861
static inline float erfcinv(float a); 
# 9863
static inline float normcdfinv(float a); 
# 9865
static inline float normcdf(float a); 
# 9867
static inline float erfcx(float a); 
# 9869
static inline double copysign(double a, float b); 
# 9871
static inline double copysign(float a, double b); 
# 9873
static inline unsigned min(unsigned a, unsigned b); 
# 9875
static inline unsigned min(int a, unsigned b); 
# 9877
static inline unsigned min(unsigned a, int b); 
# 9879
static inline long min(long a, long b); 
# 9881
static inline unsigned long min(unsigned long a, unsigned long b); 
# 9883
static inline unsigned long min(long a, unsigned long b); 
# 9885
static inline unsigned long min(unsigned long a, long b); 
# 9887
static inline long long min(long long a, long long b); 
# 9889
static inline unsigned long long min(unsigned long long a, unsigned long long b); 
# 9891
static inline unsigned long long min(long long a, unsigned long long b); 
# 9893
static inline unsigned long long min(unsigned long long a, long long b); 
# 9895
static inline float min(float a, float b); 
# 9897
static inline double min(double a, double b); 
# 9899
static inline double min(float a, double b); 
# 9901
static inline double min(double a, float b); 
# 9903
static inline unsigned max(unsigned a, unsigned b); 
# 9905
static inline unsigned max(int a, unsigned b); 
# 9907
static inline unsigned max(unsigned a, int b); 
# 9909
static inline long max(long a, long b); 
# 9911
static inline unsigned long max(unsigned long a, unsigned long b); 
# 9913
static inline unsigned long max(long a, unsigned long b); 
# 9915
static inline unsigned long max(unsigned long a, long b); 
# 9917
static inline long long max(long long a, long long b); 
# 9919
static inline unsigned long long max(unsigned long long a, unsigned long long b); 
# 9921
static inline unsigned long long max(long long a, unsigned long long b); 
# 9923
static inline unsigned long long max(unsigned long long a, long long b); 
# 9925
static inline float max(float a, float b); 
# 9927
static inline double max(double a, double b); 
# 9929
static inline double max(float a, double b); 
# 9931
static inline double max(double a, float b); 
# 316 "/sw/summit/cuda/10.1.168/include/crt/math_functions.hpp"
__attribute((always_inline)) inline int signbit(float x) { return __signbitf(x); } 
# 320
__attribute((always_inline)) inline int signbit(double x) { return __signbit(x); } 
# 322
__attribute((always_inline)) inline int signbit(long double x) { return __signbitl(x); } 
# 333 "/sw/summit/cuda/10.1.168/include/crt/math_functions.hpp"
__attribute((always_inline)) inline int isfinite(float x) { return __finitef(x); } 
# 348 "/sw/summit/cuda/10.1.168/include/crt/math_functions.hpp"
__attribute((always_inline)) inline int isfinite(double x) { return __finite(x); } 
# 361 "/sw/summit/cuda/10.1.168/include/crt/math_functions.hpp"
__attribute((always_inline)) inline int isfinite(long double x) { return __finitel(x); } 
# 364
__attribute((always_inline)) inline int isnan(float x) { return __isnanf(x); } 
# 368
__attribute((always_inline)) inline int isnan(double x) throw() { return __isnan(x); } 
# 370
__attribute((always_inline)) inline int isnan(long double x) { return __isnanl(x); } 
# 372
__attribute((always_inline)) inline int isinf(float x) { return __isinff(x); } 
# 376
__attribute((always_inline)) inline int isinf(double x) throw() { return __isinf(x); } 
# 378
__attribute((always_inline)) inline int isinf(long double x) { return __isinfl(x); } 
# 574 "/sw/summit/cuda/10.1.168/include/crt/math_functions.hpp"
static inline float logb(float a) 
# 575
{ 
# 576
return logbf(a); 
# 577
} 
# 579
static inline int ilogb(float a) 
# 580
{ 
# 581
return ilogbf(a); 
# 582
} 
# 584
static inline float scalbn(float a, int b) 
# 585
{ 
# 586
return scalbnf(a, b); 
# 587
} 
# 589
static inline float scalbln(float a, long b) 
# 590
{ 
# 591
return scalblnf(a, b); 
# 592
} 
# 594
static inline float exp2(float a) 
# 595
{ 
# 596
return exp2f(a); 
# 597
} 
# 599
static inline float expm1(float a) 
# 600
{ 
# 601
return expm1f(a); 
# 602
} 
# 604
static inline float log2(float a) 
# 605
{ 
# 606
return log2f(a); 
# 607
} 
# 609
static inline float log1p(float a) 
# 610
{ 
# 611
return log1pf(a); 
# 612
} 
# 614
static inline float acosh(float a) 
# 615
{ 
# 616
return acoshf(a); 
# 617
} 
# 619
static inline float asinh(float a) 
# 620
{ 
# 621
return asinhf(a); 
# 622
} 
# 624
static inline float atanh(float a) 
# 625
{ 
# 626
return atanhf(a); 
# 627
} 
# 629
static inline float hypot(float a, float b) 
# 630
{ 
# 631
return hypotf(a, b); 
# 632
} 
# 634
static inline float cbrt(float a) 
# 635
{ 
# 636
return cbrtf(a); 
# 637
} 
# 639
static inline float erf(float a) 
# 640
{ 
# 641
return erff(a); 
# 642
} 
# 644
static inline float erfc(float a) 
# 645
{ 
# 646
return erfcf(a); 
# 647
} 
# 649
static inline float lgamma(float a) 
# 650
{ 
# 651
return lgammaf(a); 
# 652
} 
# 654
static inline float tgamma(float a) 
# 655
{ 
# 656
return tgammaf(a); 
# 657
} 
# 659
static inline float copysign(float a, float b) 
# 660
{ 
# 661
return copysignf(a, b); 
# 662
} 
# 664
static inline float nextafter(float a, float b) 
# 665
{ 
# 666
return nextafterf(a, b); 
# 667
} 
# 669
static inline float remainder(float a, float b) 
# 670
{ 
# 671
return remainderf(a, b); 
# 672
} 
# 674
static inline float remquo(float a, float b, int *quo) 
# 675
{ 
# 676
return remquof(a, b, quo); 
# 677
} 
# 679
static inline float round(float a) 
# 680
{ 
# 681
return roundf(a); 
# 682
} 
# 684
static inline long lround(float a) 
# 685
{ 
# 686
return lroundf(a); 
# 687
} 
# 689
static inline long long llround(float a) 
# 690
{ 
# 691
return llroundf(a); 
# 692
} 
# 694
static inline float trunc(float a) 
# 695
{ 
# 696
return truncf(a); 
# 697
} 
# 699
static inline float rint(float a) 
# 700
{ 
# 701
return rintf(a); 
# 702
} 
# 704
static inline long lrint(float a) 
# 705
{ 
# 706
return lrintf(a); 
# 707
} 
# 709
static inline long long llrint(float a) 
# 710
{ 
# 711
return llrintf(a); 
# 712
} 
# 714
static inline float nearbyint(float a) 
# 715
{ 
# 716
return nearbyintf(a); 
# 717
} 
# 719
static inline float fdim(float a, float b) 
# 720
{ 
# 721
return fdimf(a, b); 
# 722
} 
# 724
static inline float fma(float a, float b, float c) 
# 725
{ 
# 726
return fmaf(a, b, c); 
# 727
} 
# 729
static inline float fmax(float a, float b) 
# 730
{ 
# 731
return fmaxf(a, b); 
# 732
} 
# 734
static inline float fmin(float a, float b) 
# 735
{ 
# 736
return fminf(a, b); 
# 737
} 
# 745
static inline float exp10(float a) 
# 746
{ 
# 747
return exp10f(a); 
# 748
} 
# 750
static inline float rsqrt(float a) 
# 751
{ 
# 752
return rsqrtf(a); 
# 753
} 
# 755
static inline float rcbrt(float a) 
# 756
{ 
# 757
return rcbrtf(a); 
# 758
} 
# 760
static inline float sinpi(float a) 
# 761
{ 
# 762
return sinpif(a); 
# 763
} 
# 765
static inline float cospi(float a) 
# 766
{ 
# 767
return cospif(a); 
# 768
} 
# 770
static inline void sincospi(float a, float *sptr, float *cptr) 
# 771
{ 
# 772
sincospif(a, sptr, cptr); 
# 773
} 
# 775
static inline void sincos(float a, float *sptr, float *cptr) 
# 776
{ 
# 777
sincosf(a, sptr, cptr); 
# 778
} 
# 780
static inline float j0(float a) 
# 781
{ 
# 782
return j0f(a); 
# 783
} 
# 785
static inline float j1(float a) 
# 786
{ 
# 787
return j1f(a); 
# 788
} 
# 790
static inline float jn(int n, float a) 
# 791
{ 
# 792
return jnf(n, a); 
# 793
} 
# 795
static inline float y0(float a) 
# 796
{ 
# 797
return y0f(a); 
# 798
} 
# 800
static inline float y1(float a) 
# 801
{ 
# 802
return y1f(a); 
# 803
} 
# 805
static inline float yn(int n, float a) 
# 806
{ 
# 807
return ynf(n, a); 
# 808
} 
# 810
static inline float cyl_bessel_i0(float a) 
# 811
{ 
# 812
return cyl_bessel_i0f(a); 
# 813
} 
# 815
static inline float cyl_bessel_i1(float a) 
# 816
{ 
# 817
return cyl_bessel_i1f(a); 
# 818
} 
# 820
static inline float erfinv(float a) 
# 821
{ 
# 822
return erfinvf(a); 
# 823
} 
# 825
static inline float erfcinv(float a) 
# 826
{ 
# 827
return erfcinvf(a); 
# 828
} 
# 830
static inline float normcdfinv(float a) 
# 831
{ 
# 832
return normcdfinvf(a); 
# 833
} 
# 835
static inline float normcdf(float a) 
# 836
{ 
# 837
return normcdff(a); 
# 838
} 
# 840
static inline float erfcx(float a) 
# 841
{ 
# 842
return erfcxf(a); 
# 843
} 
# 845
static inline double copysign(double a, float b) 
# 846
{ 
# 847
return copysign(a, (double)b); 
# 848
} 
# 850
static inline double copysign(float a, double b) 
# 851
{ 
# 852
return copysign((double)a, b); 
# 853
} 
# 855
static inline unsigned min(unsigned a, unsigned b) 
# 856
{ 
# 857
return umin(a, b); 
# 858
} 
# 860
static inline unsigned min(int a, unsigned b) 
# 861
{ 
# 862
return umin((unsigned)a, b); 
# 863
} 
# 865
static inline unsigned min(unsigned a, int b) 
# 866
{ 
# 867
return umin(a, (unsigned)b); 
# 868
} 
# 870
static inline long min(long a, long b) 
# 871
{ 
# 877
if (sizeof(long) == sizeof(int)) { 
# 881
return (long)min((int)a, (int)b); 
# 882
} else { 
# 883
return (long)llmin((long long)a, (long long)b); 
# 884
}  
# 885
} 
# 887
static inline unsigned long min(unsigned long a, unsigned long b) 
# 888
{ 
# 892
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 896
return (unsigned long)umin((unsigned)a, (unsigned)b); 
# 897
} else { 
# 898
return (unsigned long)ullmin((unsigned long long)a, (unsigned long long)b); 
# 899
}  
# 900
} 
# 902
static inline unsigned long min(long a, unsigned long b) 
# 903
{ 
# 907
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 911
return (unsigned long)umin((unsigned)a, (unsigned)b); 
# 912
} else { 
# 913
return (unsigned long)ullmin((unsigned long long)a, (unsigned long long)b); 
# 914
}  
# 915
} 
# 917
static inline unsigned long min(unsigned long a, long b) 
# 918
{ 
# 922
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 926
return (unsigned long)umin((unsigned)a, (unsigned)b); 
# 927
} else { 
# 928
return (unsigned long)ullmin((unsigned long long)a, (unsigned long long)b); 
# 929
}  
# 930
} 
# 932
static inline long long min(long long a, long long b) 
# 933
{ 
# 934
return llmin(a, b); 
# 935
} 
# 937
static inline unsigned long long min(unsigned long long a, unsigned long long b) 
# 938
{ 
# 939
return ullmin(a, b); 
# 940
} 
# 942
static inline unsigned long long min(long long a, unsigned long long b) 
# 943
{ 
# 944
return ullmin((unsigned long long)a, b); 
# 945
} 
# 947
static inline unsigned long long min(unsigned long long a, long long b) 
# 948
{ 
# 949
return ullmin(a, (unsigned long long)b); 
# 950
} 
# 952
static inline float min(float a, float b) 
# 953
{ 
# 954
return fminf(a, b); 
# 955
} 
# 957
static inline double min(double a, double b) 
# 958
{ 
# 959
return fmin(a, b); 
# 960
} 
# 962
static inline double min(float a, double b) 
# 963
{ 
# 964
return fmin((double)a, b); 
# 965
} 
# 967
static inline double min(double a, float b) 
# 968
{ 
# 969
return fmin(a, (double)b); 
# 970
} 
# 972
static inline unsigned max(unsigned a, unsigned b) 
# 973
{ 
# 974
return umax(a, b); 
# 975
} 
# 977
static inline unsigned max(int a, unsigned b) 
# 978
{ 
# 979
return umax((unsigned)a, b); 
# 980
} 
# 982
static inline unsigned max(unsigned a, int b) 
# 983
{ 
# 984
return umax(a, (unsigned)b); 
# 985
} 
# 987
static inline long max(long a, long b) 
# 988
{ 
# 993
if (sizeof(long) == sizeof(int)) { 
# 997
return (long)max((int)a, (int)b); 
# 998
} else { 
# 999
return (long)llmax((long long)a, (long long)b); 
# 1000
}  
# 1001
} 
# 1003
static inline unsigned long max(unsigned long a, unsigned long b) 
# 1004
{ 
# 1008
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1012
return (unsigned long)umax((unsigned)a, (unsigned)b); 
# 1013
} else { 
# 1014
return (unsigned long)ullmax((unsigned long long)a, (unsigned long long)b); 
# 1015
}  
# 1016
} 
# 1018
static inline unsigned long max(long a, unsigned long b) 
# 1019
{ 
# 1023
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1027
return (unsigned long)umax((unsigned)a, (unsigned)b); 
# 1028
} else { 
# 1029
return (unsigned long)ullmax((unsigned long long)a, (unsigned long long)b); 
# 1030
}  
# 1031
} 
# 1033
static inline unsigned long max(unsigned long a, long b) 
# 1034
{ 
# 1038
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1042
return (unsigned long)umax((unsigned)a, (unsigned)b); 
# 1043
} else { 
# 1044
return (unsigned long)ullmax((unsigned long long)a, (unsigned long long)b); 
# 1045
}  
# 1046
} 
# 1048
static inline long long max(long long a, long long b) 
# 1049
{ 
# 1050
return llmax(a, b); 
# 1051
} 
# 1053
static inline unsigned long long max(unsigned long long a, unsigned long long b) 
# 1054
{ 
# 1055
return ullmax(a, b); 
# 1056
} 
# 1058
static inline unsigned long long max(long long a, unsigned long long b) 
# 1059
{ 
# 1060
return ullmax((unsigned long long)a, b); 
# 1061
} 
# 1063
static inline unsigned long long max(unsigned long long a, long long b) 
# 1064
{ 
# 1065
return ullmax(a, (unsigned long long)b); 
# 1066
} 
# 1068
static inline float max(float a, float b) 
# 1069
{ 
# 1070
return fmaxf(a, b); 
# 1071
} 
# 1073
static inline double max(double a, double b) 
# 1074
{ 
# 1075
return fmax(a, b); 
# 1076
} 
# 1078
static inline double max(float a, double b) 
# 1079
{ 
# 1080
return fmax((double)a, b); 
# 1081
} 
# 1083
static inline double max(double a, float b) 
# 1084
{ 
# 1085
return fmax(a, (double)b); 
# 1086
} 
# 1097 "/sw/summit/cuda/10.1.168/include/crt/math_functions.hpp"
inline int min(int a, int b) 
# 1098
{ 
# 1099
return (a < b) ? a : b; 
# 1100
} 
# 1102
inline unsigned umin(unsigned a, unsigned b) 
# 1103
{ 
# 1104
return (a < b) ? a : b; 
# 1105
} 
# 1107
inline long long llmin(long long a, long long b) 
# 1108
{ 
# 1109
return (a < b) ? a : b; 
# 1110
} 
# 1112
inline unsigned long long ullmin(unsigned long long a, unsigned long long 
# 1113
b) 
# 1114
{ 
# 1115
return (a < b) ? a : b; 
# 1116
} 
# 1118
inline int max(int a, int b) 
# 1119
{ 
# 1120
return (a > b) ? a : b; 
# 1121
} 
# 1123
inline unsigned umax(unsigned a, unsigned b) 
# 1124
{ 
# 1125
return (a > b) ? a : b; 
# 1126
} 
# 1128
inline long long llmax(long long a, long long b) 
# 1129
{ 
# 1130
return (a > b) ? a : b; 
# 1131
} 
# 1133
inline unsigned long long ullmax(unsigned long long a, unsigned long long 
# 1134
b) 
# 1135
{ 
# 1136
return (a > b) ? a : b; 
# 1137
} 
# 74 "/sw/summit/cuda/10.1.168/include/cuda_surface_types.h"
template< class T, int dim = 1> 
# 75
struct surface : public surfaceReference { 
# 78
surface() 
# 79
{ 
# 80
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 81
} 
# 83
surface(cudaChannelFormatDesc desc) 
# 84
{ 
# 85
(channelDesc) = desc; 
# 86
} 
# 88
}; 
# 90
template< int dim> 
# 91
struct surface< void, dim>  : public surfaceReference { 
# 94
surface() 
# 95
{ 
# 96
(channelDesc) = cudaCreateChannelDesc< void> (); 
# 97
} 
# 99
}; 
# 74 "/sw/summit/cuda/10.1.168/include/cuda_texture_types.h"
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
# 75
struct texture : public textureReference { 
# 78
texture(int norm = 0, cudaTextureFilterMode 
# 79
fMode = cudaFilterModePoint, cudaTextureAddressMode 
# 80
aMode = cudaAddressModeClamp) 
# 81
{ 
# 82
(normalized) = norm; 
# 83
(filterMode) = fMode; 
# 84
((addressMode)[0]) = aMode; 
# 85
((addressMode)[1]) = aMode; 
# 86
((addressMode)[2]) = aMode; 
# 87
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 88
(sRGB) = 0; 
# 89
} 
# 91
texture(int norm, cudaTextureFilterMode 
# 92
fMode, cudaTextureAddressMode 
# 93
aMode, cudaChannelFormatDesc 
# 94
desc) 
# 95
{ 
# 96
(normalized) = norm; 
# 97
(filterMode) = fMode; 
# 98
((addressMode)[0]) = aMode; 
# 99
((addressMode)[1]) = aMode; 
# 100
((addressMode)[2]) = aMode; 
# 101
(channelDesc) = desc; 
# 102
(sRGB) = 0; 
# 103
} 
# 105
}; 
# 89 "/sw/summit/cuda/10.1.168/include/crt/device_functions.h"
extern "C" {
# 3217 "/sw/summit/cuda/10.1.168/include/crt/device_functions.h"
}
# 3225
__attribute__((unused)) static inline int mulhi(int a, int b); 
# 3227
__attribute__((unused)) static inline unsigned mulhi(unsigned a, unsigned b); 
# 3229
__attribute__((unused)) static inline unsigned mulhi(int a, unsigned b); 
# 3231
__attribute__((unused)) static inline unsigned mulhi(unsigned a, int b); 
# 3233
__attribute__((unused)) static inline long long mul64hi(long long a, long long b); 
# 3235
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, unsigned long long b); 
# 3237
__attribute__((unused)) static inline unsigned long long mul64hi(long long a, unsigned long long b); 
# 3239
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, long long b); 
# 3241
__attribute__((unused)) static inline int float_as_int(float a); 
# 3243
__attribute__((unused)) static inline float int_as_float(int a); 
# 3245
__attribute__((unused)) static inline unsigned float_as_uint(float a); 
# 3247
__attribute__((unused)) static inline float uint_as_float(unsigned a); 
# 3249
__attribute__((unused)) static inline float saturate(float a); 
# 3251
__attribute__((unused)) static inline int mul24(int a, int b); 
# 3253
__attribute__((unused)) static inline unsigned umul24(unsigned a, unsigned b); 
# 3255
__attribute__((unused)) static inline int float2int(float a, cudaRoundMode mode = cudaRoundZero); 
# 3257
__attribute__((unused)) static inline unsigned float2uint(float a, cudaRoundMode mode = cudaRoundZero); 
# 3259
__attribute__((unused)) static inline float int2float(int a, cudaRoundMode mode = cudaRoundNearest); 
# 3261
__attribute__((unused)) static inline float uint2float(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
# 90 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int mulhi(int a, int b) 
# 91
{int volatile ___ = 1;(void)a;(void)b;
# 93
::exit(___);}
#if 0
# 91
{ 
# 92
return __mulhi(a, b); 
# 93
} 
#endif
# 95 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, unsigned b) 
# 96
{int volatile ___ = 1;(void)a;(void)b;
# 98
::exit(___);}
#if 0
# 96
{ 
# 97
return __umulhi(a, b); 
# 98
} 
#endif
# 100 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(int a, unsigned b) 
# 101
{int volatile ___ = 1;(void)a;(void)b;
# 103
::exit(___);}
#if 0
# 101
{ 
# 102
return __umulhi((unsigned)a, b); 
# 103
} 
#endif
# 105 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, int b) 
# 106
{int volatile ___ = 1;(void)a;(void)b;
# 108
::exit(___);}
#if 0
# 106
{ 
# 107
return __umulhi(a, (unsigned)b); 
# 108
} 
#endif
# 110 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline long long mul64hi(long long a, long long b) 
# 111
{int volatile ___ = 1;(void)a;(void)b;
# 113
::exit(___);}
#if 0
# 111
{ 
# 112
return __mul64hi(a, b); 
# 113
} 
#endif
# 115 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, unsigned long long b) 
# 116
{int volatile ___ = 1;(void)a;(void)b;
# 118
::exit(___);}
#if 0
# 116
{ 
# 117
return __umul64hi(a, b); 
# 118
} 
#endif
# 120 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(long long a, unsigned long long b) 
# 121
{int volatile ___ = 1;(void)a;(void)b;
# 123
::exit(___);}
#if 0
# 121
{ 
# 122
return __umul64hi((unsigned long long)a, b); 
# 123
} 
#endif
# 125 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, long long b) 
# 126
{int volatile ___ = 1;(void)a;(void)b;
# 128
::exit(___);}
#if 0
# 126
{ 
# 127
return __umul64hi(a, (unsigned long long)b); 
# 128
} 
#endif
# 130 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int float_as_int(float a) 
# 131
{int volatile ___ = 1;(void)a;
# 133
::exit(___);}
#if 0
# 131
{ 
# 132
return __float_as_int(a); 
# 133
} 
#endif
# 135 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float int_as_float(int a) 
# 136
{int volatile ___ = 1;(void)a;
# 138
::exit(___);}
#if 0
# 136
{ 
# 137
return __int_as_float(a); 
# 138
} 
#endif
# 140 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned float_as_uint(float a) 
# 141
{int volatile ___ = 1;(void)a;
# 143
::exit(___);}
#if 0
# 141
{ 
# 142
return __float_as_uint(a); 
# 143
} 
#endif
# 145 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float uint_as_float(unsigned a) 
# 146
{int volatile ___ = 1;(void)a;
# 148
::exit(___);}
#if 0
# 146
{ 
# 147
return __uint_as_float(a); 
# 148
} 
#endif
# 149 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float saturate(float a) 
# 150
{int volatile ___ = 1;(void)a;
# 152
::exit(___);}
#if 0
# 150
{ 
# 151
return __saturatef(a); 
# 152
} 
#endif
# 154 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int mul24(int a, int b) 
# 155
{int volatile ___ = 1;(void)a;(void)b;
# 157
::exit(___);}
#if 0
# 155
{ 
# 156
return __mul24(a, b); 
# 157
} 
#endif
# 159 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned umul24(unsigned a, unsigned b) 
# 160
{int volatile ___ = 1;(void)a;(void)b;
# 162
::exit(___);}
#if 0
# 160
{ 
# 161
return __umul24(a, b); 
# 162
} 
#endif
# 164 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int float2int(float a, cudaRoundMode mode) 
# 165
{int volatile ___ = 1;(void)a;(void)mode;
# 170
::exit(___);}
#if 0
# 165
{ 
# 166
return (mode == (cudaRoundNearest)) ? __float2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2int_rd(a) : __float2int_rz(a))); 
# 170
} 
#endif
# 172 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned float2uint(float a, cudaRoundMode mode) 
# 173
{int volatile ___ = 1;(void)a;(void)mode;
# 178
::exit(___);}
#if 0
# 173
{ 
# 174
return (mode == (cudaRoundNearest)) ? __float2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2uint_rd(a) : __float2uint_rz(a))); 
# 178
} 
#endif
# 180 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float int2float(int a, cudaRoundMode mode) 
# 181
{int volatile ___ = 1;(void)a;(void)mode;
# 186
::exit(___);}
#if 0
# 181
{ 
# 182
return (mode == (cudaRoundZero)) ? __int2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __int2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __int2float_rd(a) : __int2float_rn(a))); 
# 186
} 
#endif
# 188 "/sw/summit/cuda/10.1.168/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float uint2float(unsigned a, cudaRoundMode mode) 
# 189
{int volatile ___ = 1;(void)a;(void)mode;
# 194
::exit(___);}
#if 0
# 189
{ 
# 190
return (mode == (cudaRoundZero)) ? __uint2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __uint2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __uint2float_rd(a) : __uint2float_rn(a))); 
# 194
} 
#endif
# 106 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 106
{ } 
#endif
# 108 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 108
{ } 
#endif
# 110 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 120 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 120
{ } 
#endif
# 122 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 122
{ } 
#endif
# 124 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 126
{ } 
#endif
# 128 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 128
{ } 
#endif
# 130 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 130
{ } 
#endif
# 132 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 132
{ } 
#endif
# 134 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 134
{ } 
#endif
# 136 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 136
{ } 
#endif
# 138 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 138
{ } 
#endif
# 140 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 140
{ } 
#endif
# 142 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 142
{ } 
#endif
# 144 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 144
{ } 
#endif
# 146 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 146
{ } 
#endif
# 171 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
extern "C" {
# 180
}
# 189 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 189
{ } 
#endif
# 191 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 191
{ } 
#endif
# 193 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 193
{ } 
#endif
# 195 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute((deprecated("__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 195
{ } 
#endif
# 197 "/sw/summit/cuda/10.1.168/include/device_atomic_functions.h"
__attribute((deprecated("__all() is deprecated in favor of __all_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 197
{ } 
#endif
# 87 "/sw/summit/cuda/10.1.168/include/crt/device_double_functions.h"
extern "C" {
# 1139 "/sw/summit/cuda/10.1.168/include/crt/device_double_functions.h"
}
# 1147
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode); 
# 1149
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1151
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1153
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1155
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
# 1157
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
# 1159
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
# 1161
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
# 1163
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1165
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1167
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
# 1169
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
# 1171
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
# 93 "/sw/summit/cuda/10.1.168/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode) 
# 94
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
# 99
::exit(___);}
#if 0
# 94
{ 
# 95
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
# 99
} 
#endif
# 101 "/sw/summit/cuda/10.1.168/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode) 
# 102
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 107
::exit(___);}
#if 0
# 102
{ 
# 103
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
# 107
} 
#endif
# 109 "/sw/summit/cuda/10.1.168/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode) 
# 110
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 115
::exit(___);}
#if 0
# 110
{ 
# 111
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
# 115
} 
#endif
# 117 "/sw/summit/cuda/10.1.168/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode) 
# 118
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 123
::exit(___);}
#if 0
# 118
{ 
# 119
return (mode == (cudaRoundZero)) ? __dsub_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dsub_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dsub_rd(a, b) : __dsub_rn(a, b))); 
# 123
} 
#endif
# 125 "/sw/summit/cuda/10.1.168/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode) 
# 126
{int volatile ___ = 1;(void)a;(void)mode;
# 131
::exit(___);}
#if 0
# 126
{ 
# 127
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
# 131
} 
#endif
# 133 "/sw/summit/cuda/10.1.168/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode) 
# 134
{int volatile ___ = 1;(void)a;(void)mode;
# 139
::exit(___);}
#if 0
# 134
{ 
# 135
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
# 139
} 
#endif
# 141 "/sw/summit/cuda/10.1.168/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode) 
# 142
{int volatile ___ = 1;(void)a;(void)mode;
# 147
::exit(___);}
#if 0
# 142
{ 
# 143
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
# 147
} 
#endif
# 149 "/sw/summit/cuda/10.1.168/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode) 
# 150
{int volatile ___ = 1;(void)a;(void)mode;
# 155
::exit(___);}
#if 0
# 150
{ 
# 151
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
# 155
} 
#endif
# 157 "/sw/summit/cuda/10.1.168/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode) 
# 158
{int volatile ___ = 1;(void)a;(void)mode;
# 163
::exit(___);}
#if 0
# 158
{ 
# 159
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
# 163
} 
#endif
# 165 "/sw/summit/cuda/10.1.168/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode) 
# 166
{int volatile ___ = 1;(void)a;(void)mode;
# 171
::exit(___);}
#if 0
# 166
{ 
# 167
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
# 171
} 
#endif
# 173 "/sw/summit/cuda/10.1.168/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode) 
# 174
{int volatile ___ = 1;(void)a;(void)mode;
# 176
::exit(___);}
#if 0
# 174
{ 
# 175
return (double)a; 
# 176
} 
#endif
# 178 "/sw/summit/cuda/10.1.168/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode) 
# 179
{int volatile ___ = 1;(void)a;(void)mode;
# 181
::exit(___);}
#if 0
# 179
{ 
# 180
return (double)a; 
# 181
} 
#endif
# 183 "/sw/summit/cuda/10.1.168/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode) 
# 184
{int volatile ___ = 1;(void)a;(void)mode;
# 186
::exit(___);}
#if 0
# 184
{ 
# 185
return (double)a; 
# 186
} 
#endif
# 89 "/sw/summit/cuda/10.1.168/include/sm_20_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 89
{ } 
#endif
# 100 "/sw/summit/cuda/10.1.168/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 100
{ } 
#endif
# 102 "/sw/summit/cuda/10.1.168/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 102
{ } 
#endif
# 104 "/sw/summit/cuda/10.1.168/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 104
{ } 
#endif
# 106 "/sw/summit/cuda/10.1.168/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 106
{ } 
#endif
# 108 "/sw/summit/cuda/10.1.168/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 108
{ } 
#endif
# 110 "/sw/summit/cuda/10.1.168/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/sw/summit/cuda/10.1.168/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/sw/summit/cuda/10.1.168/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/sw/summit/cuda/10.1.168/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/sw/summit/cuda/10.1.168/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 303 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 303
{ } 
#endif
# 306 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 306
{ } 
#endif
# 309 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 309
{ } 
#endif
# 312 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 312
{ } 
#endif
# 315 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 315
{ } 
#endif
# 318 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 318
{ } 
#endif
# 321 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 321
{ } 
#endif
# 324 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 324
{ } 
#endif
# 327 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 327
{ } 
#endif
# 330 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 330
{ } 
#endif
# 333 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 333
{ } 
#endif
# 336 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 336
{ } 
#endif
# 339 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 339
{ } 
#endif
# 342 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 342
{ } 
#endif
# 345 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 345
{ } 
#endif
# 348 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 348
{ } 
#endif
# 351 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 351
{ } 
#endif
# 354 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 354
{ } 
#endif
# 357 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 357
{ } 
#endif
# 360 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 360
{ } 
#endif
# 363 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 363
{ } 
#endif
# 366 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 366
{ } 
#endif
# 369 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 369
{ } 
#endif
# 372 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 372
{ } 
#endif
# 375 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 375
{ } 
#endif
# 378 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 378
{ } 
#endif
# 381 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 381
{ } 
#endif
# 384 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 384
{ } 
#endif
# 387 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 387
{ } 
#endif
# 390 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 390
{ } 
#endif
# 393 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 393
{ } 
#endif
# 396 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 396
{ } 
#endif
# 399 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 399
{ } 
#endif
# 402 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 402
{ } 
#endif
# 405 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 405
{ } 
#endif
# 408 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 408
{ } 
#endif
# 411 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 411
{ } 
#endif
# 414 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 414
{ } 
#endif
# 417 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 417
{ } 
#endif
# 420 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 420
{ } 
#endif
# 423 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 423
{ } 
#endif
# 426 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 426
{ } 
#endif
# 429 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 429
{ } 
#endif
# 432 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 432
{ } 
#endif
# 435 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 435
{ } 
#endif
# 438 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
# 439
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 439
{ } 
#endif
# 442 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
# 443
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 443
{ } 
#endif
# 446 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_block(unsigned long long *address, unsigned long long 
# 447
compare, unsigned long long 
# 448
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 448
{ } 
#endif
# 451 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_system(unsigned long long *address, unsigned long long 
# 452
compare, unsigned long long 
# 453
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 453
{ } 
#endif
# 456 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 456
{ } 
#endif
# 459 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 459
{ } 
#endif
# 462 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 462
{ } 
#endif
# 465 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 465
{ } 
#endif
# 468 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 468
{ } 
#endif
# 471 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 471
{ } 
#endif
# 474 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 474
{ } 
#endif
# 477 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 477
{ } 
#endif
# 480 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 480
{ } 
#endif
# 483 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 483
{ } 
#endif
# 486 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 486
{ } 
#endif
# 489 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 489
{ } 
#endif
# 492 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 492
{ } 
#endif
# 495 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 495
{ } 
#endif
# 498 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 498
{ } 
#endif
# 501 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 501
{ } 
#endif
# 504 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 504
{ } 
#endif
# 507 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 507
{ } 
#endif
# 510 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 510
{ } 
#endif
# 513 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 513
{ } 
#endif
# 516 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 516
{ } 
#endif
# 519 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 519
{ } 
#endif
# 522 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 522
{ } 
#endif
# 525 "/sw/summit/cuda/10.1.168/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 525
{ } 
#endif
# 90 "/sw/summit/cuda/10.1.168/include/sm_20_intrinsics.h"
extern "C" {
# 1475 "/sw/summit/cuda/10.1.168/include/sm_20_intrinsics.h"
}
# 1482
__attribute((deprecated("__ballot() is deprecated in favor of __ballot_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to" " suppress this warning)."))) __attribute__((unused)) static inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1482
{ } 
#endif
# 1484 "/sw/summit/cuda/10.1.168/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1484
{ } 
#endif
# 1486 "/sw/summit/cuda/10.1.168/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1486
{ } 
#endif
# 1488 "/sw/summit/cuda/10.1.168/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1488
{ } 
#endif
# 1493 "/sw/summit/cuda/10.1.168/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1493
{ } 
#endif
# 1494 "/sw/summit/cuda/10.1.168/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1494
{ } 
#endif
# 1495 "/sw/summit/cuda/10.1.168/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1495
{ } 
#endif
# 1496 "/sw/summit/cuda/10.1.168/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isLocal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1496
{ } 
#endif
# 102 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __fns(unsigned mask, unsigned base, int offset) {int volatile ___ = 1;(void)mask;(void)base;(void)offset;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __barrier_sync(unsigned id) {int volatile ___ = 1;(void)id;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __barrier_sync_count(unsigned id, unsigned cnt) {int volatile ___ = 1;(void)id;(void)cnt;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __syncwarp(unsigned mask = 4294967295U) {int volatile ___ = 1;(void)mask;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __all_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __any_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __uni_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __ballot_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __activemask() {int volatile ___ = 1;::exit(___);}
#if 0
# 110
{ } 
#endif
# 119 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 119
{ } 
#endif
# 120 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 120
{ } 
#endif
# 121 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 121
{ } 
#endif
# 122 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 122
{ } 
#endif
# 123 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 123
{ } 
#endif
# 124 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 124
{ } 
#endif
# 125 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 125
{ } 
#endif
# 126 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 130
{ } 
#endif
# 133 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_sync(unsigned mask, int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_sync(unsigned mask, unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_up_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_up_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 136
{ } 
#endif
# 137 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_down_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 137
{ } 
#endif
# 138 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_down_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 138
{ } 
#endif
# 139 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_xor_sync(unsigned mask, unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_sync(unsigned mask, float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_up_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_down_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 144
{ } 
#endif
# 148 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl(unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long long __shfl(long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 149
{ } 
#endif
# 150 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_up(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 150
{ } 
#endif
# 151 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_up(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 151
{ } 
#endif
# 152 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_down(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 152
{ } 
#endif
# 153 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_down(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 153
{ } 
#endif
# 154 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_xor(long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 155
{ } 
#endif
# 156 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 156
{ } 
#endif
# 157 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 157
{ } 
#endif
# 158 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 158
{ } 
#endif
# 159 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 159
{ } 
#endif
# 162 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_sync(unsigned mask, long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_up_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 165
{ } 
#endif
# 166 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_down_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 166
{ } 
#endif
# 167 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 167
{ } 
#endif
# 168 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_sync(unsigned mask, double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_up_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_down_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 173
{ } 
#endif
# 177 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 179
{ } 
#endif
# 180 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 180
{ } 
#endif
# 181 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 181
{ } 
#endif
# 182 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 182
{ } 
#endif
# 183 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 184
{ } 
#endif
# 187 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_sync(unsigned mask, long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_up_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 190
{ } 
#endif
# 191 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_down_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 191
{ } 
#endif
# 192 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 192
{ } 
#endif
# 193 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 193
{ } 
#endif
# 194 "/sw/summit/cuda/10.1.168/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 194
{ } 
#endif
# 87 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 87
{ } 
#endif
# 88 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 88
{ } 
#endif
# 90 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 90
{ } 
#endif
# 91 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 91
{ } 
#endif
# 92 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 101
{ } 
#endif
# 103 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 113
{ } 
#endif
# 115 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 115
{ } 
#endif
# 116 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 116
{ } 
#endif
# 117 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 117
{ } 
#endif
# 118 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 118
{ } 
#endif
# 119 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 119
{ } 
#endif
# 123 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 123
{ } 
#endif
# 124 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 130
{ } 
#endif
# 131 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 131
{ } 
#endif
# 132 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 132
{ } 
#endif
# 133 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 136
{ } 
#endif
# 137 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 137
{ } 
#endif
# 139 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 144
{ } 
#endif
# 145 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 145
{ } 
#endif
# 146 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 146
{ } 
#endif
# 147 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 147
{ } 
#endif
# 148 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 149
{ } 
#endif
# 151 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 151
{ } 
#endif
# 152 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 152
{ } 
#endif
# 153 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 153
{ } 
#endif
# 154 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 155
{ } 
#endif
# 159 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 159
{ } 
#endif
# 160 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 160
{ } 
#endif
# 162 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 165
{ } 
#endif
# 166 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldca(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 166
{ } 
#endif
# 167 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 167
{ } 
#endif
# 168 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 173
{ } 
#endif
# 175 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 175
{ } 
#endif
# 176 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 176
{ } 
#endif
# 177 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldca(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 179
{ } 
#endif
# 180 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 180
{ } 
#endif
# 181 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 181
{ } 
#endif
# 182 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 182
{ } 
#endif
# 183 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 184
{ } 
#endif
# 185 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 185
{ } 
#endif
# 187 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 190
{ } 
#endif
# 191 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 191
{ } 
#endif
# 195 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 195
{ } 
#endif
# 196 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 196
{ } 
#endif
# 198 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 198
{ } 
#endif
# 199 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 199
{ } 
#endif
# 200 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 200
{ } 
#endif
# 201 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 201
{ } 
#endif
# 202 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcs(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 202
{ } 
#endif
# 203 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 203
{ } 
#endif
# 204 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 204
{ } 
#endif
# 205 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 205
{ } 
#endif
# 206 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 206
{ } 
#endif
# 207 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 207
{ } 
#endif
# 208 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 208
{ } 
#endif
# 209 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 209
{ } 
#endif
# 211 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 211
{ } 
#endif
# 212 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 212
{ } 
#endif
# 213 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 213
{ } 
#endif
# 214 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcs(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 214
{ } 
#endif
# 215 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 215
{ } 
#endif
# 216 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 216
{ } 
#endif
# 217 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 217
{ } 
#endif
# 218 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 218
{ } 
#endif
# 219 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 219
{ } 
#endif
# 220 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 220
{ } 
#endif
# 221 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 221
{ } 
#endif
# 223 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 223
{ } 
#endif
# 224 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 224
{ } 
#endif
# 225 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 225
{ } 
#endif
# 226 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 226
{ } 
#endif
# 227 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 227
{ } 
#endif
# 244 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 244
{ } 
#endif
# 256 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 256
{ } 
#endif
# 269 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 269
{ } 
#endif
# 281 "/sw/summit/cuda/10.1.168/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 281
{ } 
#endif
# 89 "/sw/summit/cuda/10.1.168/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 89
{ } 
#endif
# 90 "/sw/summit/cuda/10.1.168/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 90
{ } 
#endif
# 92 "/sw/summit/cuda/10.1.168/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/sw/summit/cuda/10.1.168/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 93
{ } 
#endif
# 95 "/sw/summit/cuda/10.1.168/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/sw/summit/cuda/10.1.168/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 96
{ } 
#endif
# 98 "/sw/summit/cuda/10.1.168/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/sw/summit/cuda/10.1.168/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 99
{ } 
#endif
# 106 "/sw/summit/cuda/10.1.168/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/sw/summit/cuda/10.1.168/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 107
{ } 
#endif
# 109 "/sw/summit/cuda/10.1.168/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/sw/summit/cuda/10.1.168/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 110
{ } 
#endif
# 93 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, float value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, double value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 100
{ } 
#endif
# 102 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, int value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, float value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, double value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 109
{ } 
#endif
# 111 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline void __nanosleep(unsigned ns) {int volatile ___ = 1;(void)ns;::exit(___);}
#if 0
# 111
{ } 
#endif
# 113 "/sw/summit/cuda/10.1.168/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned short atomicCAS(unsigned short *address, unsigned short compare, unsigned short val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 113
{ } 
#endif
# 114 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 115
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(T *res, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 116
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;
# 120
::exit(___);}
#if 0
# 116
{ 
# 120
} 
#endif
# 122 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 123
__attribute((always_inline)) __attribute__((unused)) static inline T surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 124
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 130
::exit(___);}
#if 0
# 124
{ 
# 130
} 
#endif
# 132 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 133
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(T *res, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 134
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;
# 138
::exit(___);}
#if 0
# 134
{ 
# 138
} 
#endif
# 141 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 142
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 143
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 147
::exit(___);}
#if 0
# 143
{ 
# 147
} 
#endif
# 149 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 150
__attribute((always_inline)) __attribute__((unused)) static inline T surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 151
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 157
::exit(___);}
#if 0
# 151
{ 
# 157
} 
#endif
# 159 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 160
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 161
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;
# 165
::exit(___);}
#if 0
# 161
{ 
# 165
} 
#endif
# 168 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 169
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 170
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 174
::exit(___);}
#if 0
# 170
{ 
# 174
} 
#endif
# 176 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 177
__attribute((always_inline)) __attribute__((unused)) static inline T surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 178
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 184
::exit(___);}
#if 0
# 178
{ 
# 184
} 
#endif
# 186 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 187
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 188
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 192
::exit(___);}
#if 0
# 188
{ 
# 192
} 
#endif
# 196 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 197
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 198
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 202
::exit(___);}
#if 0
# 198
{ 
# 202
} 
#endif
# 204 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 205
__attribute((always_inline)) __attribute__((unused)) static inline T surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 206
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 212
::exit(___);}
#if 0
# 206
{ 
# 212
} 
#endif
# 215 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 216
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 217
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;
# 221
::exit(___);}
#if 0
# 217
{ 
# 221
} 
#endif
# 224 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 225
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 226
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 230
::exit(___);}
#if 0
# 226
{ 
# 230
} 
#endif
# 232 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 233
__attribute((always_inline)) __attribute__((unused)) static inline T surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 234
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 240
::exit(___);}
#if 0
# 234
{ 
# 240
} 
#endif
# 243 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 244
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 245
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 249
::exit(___);}
#if 0
# 245
{ 
# 249
} 
#endif
# 252 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 253
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 254
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 258
::exit(___);}
#if 0
# 254
{ 
# 258
} 
#endif
# 260 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 261
__attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 262
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 269
::exit(___);}
#if 0
# 262
{ 
# 269
} 
#endif
# 271 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 272
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 273
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 277
::exit(___);}
#if 0
# 273
{ 
# 277
} 
#endif
# 280 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 281
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 282
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 286
::exit(___);}
#if 0
# 282
{ 
# 286
} 
#endif
# 288 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 289
__attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 290
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 296
::exit(___);}
#if 0
# 290
{ 
# 296
} 
#endif
# 298 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 299
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 300
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 304
::exit(___);}
#if 0
# 300
{ 
# 304
} 
#endif
# 307 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 308
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 309
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;
# 313
::exit(___);}
#if 0
# 309
{ 
# 313
} 
#endif
# 315 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 316
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 317
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 321
::exit(___);}
#if 0
# 317
{ 
# 321
} 
#endif
# 325 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 326
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 327
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 331
::exit(___);}
#if 0
# 327
{ 
# 331
} 
#endif
# 333 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 334
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 335
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 339
::exit(___);}
#if 0
# 335
{ 
# 339
} 
#endif
# 342 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 343
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 344
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 348
::exit(___);}
#if 0
# 344
{ 
# 348
} 
#endif
# 350 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 351
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 352
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 356
::exit(___);}
#if 0
# 352
{ 
# 356
} 
#endif
# 359 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 360
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 361
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 365
::exit(___);}
#if 0
# 361
{ 
# 365
} 
#endif
# 367 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 368
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 369
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 373
::exit(___);}
#if 0
# 369
{ 
# 373
} 
#endif
# 376 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 377
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 378
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 382
::exit(___);}
#if 0
# 378
{ 
# 382
} 
#endif
# 384 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 385
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 386
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 390
::exit(___);}
#if 0
# 386
{ 
# 390
} 
#endif
# 393 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 394
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 395
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 399
::exit(___);}
#if 0
# 395
{ 
# 399
} 
#endif
# 401 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 402
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 403
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 407
::exit(___);}
#if 0
# 403
{ 
# 407
} 
#endif
# 411 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 412
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 413
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 417
::exit(___);}
#if 0
# 413
{ 
# 417
} 
#endif
# 419 "/sw/summit/cuda/10.1.168/include/surface_functions.h"
template< class T> 
# 420
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 421
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 425
::exit(___);}
#if 0
# 421
{ 
# 425
} 
#endif
# 66 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 67
struct __nv_tex_rmet_ret { }; 
# 69
template<> struct __nv_tex_rmet_ret< char>  { typedef char type; }; 
# 70
template<> struct __nv_tex_rmet_ret< signed char>  { typedef signed char type; }; 
# 71
template<> struct __nv_tex_rmet_ret< unsigned char>  { typedef unsigned char type; }; 
# 72
template<> struct __nv_tex_rmet_ret< char1>  { typedef char1 type; }; 
# 73
template<> struct __nv_tex_rmet_ret< uchar1>  { typedef uchar1 type; }; 
# 74
template<> struct __nv_tex_rmet_ret< char2>  { typedef char2 type; }; 
# 75
template<> struct __nv_tex_rmet_ret< uchar2>  { typedef uchar2 type; }; 
# 76
template<> struct __nv_tex_rmet_ret< char4>  { typedef char4 type; }; 
# 77
template<> struct __nv_tex_rmet_ret< uchar4>  { typedef uchar4 type; }; 
# 79
template<> struct __nv_tex_rmet_ret< short>  { typedef short type; }; 
# 80
template<> struct __nv_tex_rmet_ret< unsigned short>  { typedef unsigned short type; }; 
# 81
template<> struct __nv_tex_rmet_ret< short1>  { typedef short1 type; }; 
# 82
template<> struct __nv_tex_rmet_ret< ushort1>  { typedef ushort1 type; }; 
# 83
template<> struct __nv_tex_rmet_ret< short2>  { typedef short2 type; }; 
# 84
template<> struct __nv_tex_rmet_ret< ushort2>  { typedef ushort2 type; }; 
# 85
template<> struct __nv_tex_rmet_ret< short4>  { typedef short4 type; }; 
# 86
template<> struct __nv_tex_rmet_ret< ushort4>  { typedef ushort4 type; }; 
# 88
template<> struct __nv_tex_rmet_ret< int>  { typedef int type; }; 
# 89
template<> struct __nv_tex_rmet_ret< unsigned>  { typedef unsigned type; }; 
# 90
template<> struct __nv_tex_rmet_ret< int1>  { typedef int1 type; }; 
# 91
template<> struct __nv_tex_rmet_ret< uint1>  { typedef uint1 type; }; 
# 92
template<> struct __nv_tex_rmet_ret< int2>  { typedef int2 type; }; 
# 93
template<> struct __nv_tex_rmet_ret< uint2>  { typedef uint2 type; }; 
# 94
template<> struct __nv_tex_rmet_ret< int4>  { typedef int4 type; }; 
# 95
template<> struct __nv_tex_rmet_ret< uint4>  { typedef uint4 type; }; 
# 107 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< float>  { typedef float type; }; 
# 108
template<> struct __nv_tex_rmet_ret< float1>  { typedef float1 type; }; 
# 109
template<> struct __nv_tex_rmet_ret< float2>  { typedef float2 type; }; 
# 110
template<> struct __nv_tex_rmet_ret< float4>  { typedef float4 type; }; 
# 113
template< class T> struct __nv_tex_rmet_cast { typedef T *type; }; 
# 125 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 126
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1Dfetch(texture< T, 1, cudaReadModeElementType>  t, int x) 
# 127
{int volatile ___ = 1;(void)t;(void)x;
# 133
::exit(___);}
#if 0
# 127
{ 
# 133
} 
#endif
# 135 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 136
struct __nv_tex_rmnf_ret { }; 
# 138
template<> struct __nv_tex_rmnf_ret< char>  { typedef float type; }; 
# 139
template<> struct __nv_tex_rmnf_ret< signed char>  { typedef float type; }; 
# 140
template<> struct __nv_tex_rmnf_ret< unsigned char>  { typedef float type; }; 
# 141
template<> struct __nv_tex_rmnf_ret< short>  { typedef float type; }; 
# 142
template<> struct __nv_tex_rmnf_ret< unsigned short>  { typedef float type; }; 
# 143
template<> struct __nv_tex_rmnf_ret< char1>  { typedef float1 type; }; 
# 144
template<> struct __nv_tex_rmnf_ret< uchar1>  { typedef float1 type; }; 
# 145
template<> struct __nv_tex_rmnf_ret< short1>  { typedef float1 type; }; 
# 146
template<> struct __nv_tex_rmnf_ret< ushort1>  { typedef float1 type; }; 
# 147
template<> struct __nv_tex_rmnf_ret< char2>  { typedef float2 type; }; 
# 148
template<> struct __nv_tex_rmnf_ret< uchar2>  { typedef float2 type; }; 
# 149
template<> struct __nv_tex_rmnf_ret< short2>  { typedef float2 type; }; 
# 150
template<> struct __nv_tex_rmnf_ret< ushort2>  { typedef float2 type; }; 
# 151
template<> struct __nv_tex_rmnf_ret< char4>  { typedef float4 type; }; 
# 152
template<> struct __nv_tex_rmnf_ret< uchar4>  { typedef float4 type; }; 
# 153
template<> struct __nv_tex_rmnf_ret< short4>  { typedef float4 type; }; 
# 154
template<> struct __nv_tex_rmnf_ret< ushort4>  { typedef float4 type; }; 
# 156
template< class T> 
# 157
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1Dfetch(texture< T, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 158
{int volatile ___ = 1;(void)t;(void)x;
# 165
::exit(___);}
#if 0
# 158
{ 
# 165
} 
#endif
# 168 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 169
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1D(texture< T, 1, cudaReadModeElementType>  t, float x) 
# 170
{int volatile ___ = 1;(void)t;(void)x;
# 176
::exit(___);}
#if 0
# 170
{ 
# 176
} 
#endif
# 178 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 179
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1D(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 180
{int volatile ___ = 1;(void)t;(void)x;
# 187
::exit(___);}
#if 0
# 180
{ 
# 187
} 
#endif
# 191 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 192
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2D(texture< T, 2, cudaReadModeElementType>  t, float x, float y) 
# 193
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 200
::exit(___);}
#if 0
# 193
{ 
# 200
} 
#endif
# 202 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 203
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2D(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 204
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 211
::exit(___);}
#if 0
# 204
{ 
# 211
} 
#endif
# 215 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 216
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLayered(texture< T, 241, cudaReadModeElementType>  t, float x, int layer) 
# 217
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 223
::exit(___);}
#if 0
# 217
{ 
# 223
} 
#endif
# 225 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 226
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLayered(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 227
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 234
::exit(___);}
#if 0
# 227
{ 
# 234
} 
#endif
# 238 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 239
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLayered(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 240
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 246
::exit(___);}
#if 0
# 240
{ 
# 246
} 
#endif
# 248 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 249
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLayered(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 250
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 257
::exit(___);}
#if 0
# 250
{ 
# 257
} 
#endif
# 260 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 261
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex3D(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 262
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 268
::exit(___);}
#if 0
# 262
{ 
# 268
} 
#endif
# 270 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 271
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex3D(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 272
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 279
::exit(___);}
#if 0
# 272
{ 
# 279
} 
#endif
# 282 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 283
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemap(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 284
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 290
::exit(___);}
#if 0
# 284
{ 
# 290
} 
#endif
# 292 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 293
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemap(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 294
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 301
::exit(___);}
#if 0
# 294
{ 
# 301
} 
#endif
# 304 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 305
struct __nv_tex2dgather_ret { }; 
# 306
template<> struct __nv_tex2dgather_ret< char>  { typedef char4 type; }; 
# 307
template<> struct __nv_tex2dgather_ret< signed char>  { typedef char4 type; }; 
# 308
template<> struct __nv_tex2dgather_ret< char1>  { typedef char4 type; }; 
# 309
template<> struct __nv_tex2dgather_ret< char2>  { typedef char4 type; }; 
# 310
template<> struct __nv_tex2dgather_ret< char3>  { typedef char4 type; }; 
# 311
template<> struct __nv_tex2dgather_ret< char4>  { typedef char4 type; }; 
# 312
template<> struct __nv_tex2dgather_ret< unsigned char>  { typedef uchar4 type; }; 
# 313
template<> struct __nv_tex2dgather_ret< uchar1>  { typedef uchar4 type; }; 
# 314
template<> struct __nv_tex2dgather_ret< uchar2>  { typedef uchar4 type; }; 
# 315
template<> struct __nv_tex2dgather_ret< uchar3>  { typedef uchar4 type; }; 
# 316
template<> struct __nv_tex2dgather_ret< uchar4>  { typedef uchar4 type; }; 
# 318
template<> struct __nv_tex2dgather_ret< short>  { typedef short4 type; }; 
# 319
template<> struct __nv_tex2dgather_ret< short1>  { typedef short4 type; }; 
# 320
template<> struct __nv_tex2dgather_ret< short2>  { typedef short4 type; }; 
# 321
template<> struct __nv_tex2dgather_ret< short3>  { typedef short4 type; }; 
# 322
template<> struct __nv_tex2dgather_ret< short4>  { typedef short4 type; }; 
# 323
template<> struct __nv_tex2dgather_ret< unsigned short>  { typedef ushort4 type; }; 
# 324
template<> struct __nv_tex2dgather_ret< ushort1>  { typedef ushort4 type; }; 
# 325
template<> struct __nv_tex2dgather_ret< ushort2>  { typedef ushort4 type; }; 
# 326
template<> struct __nv_tex2dgather_ret< ushort3>  { typedef ushort4 type; }; 
# 327
template<> struct __nv_tex2dgather_ret< ushort4>  { typedef ushort4 type; }; 
# 329
template<> struct __nv_tex2dgather_ret< int>  { typedef int4 type; }; 
# 330
template<> struct __nv_tex2dgather_ret< int1>  { typedef int4 type; }; 
# 331
template<> struct __nv_tex2dgather_ret< int2>  { typedef int4 type; }; 
# 332
template<> struct __nv_tex2dgather_ret< int3>  { typedef int4 type; }; 
# 333
template<> struct __nv_tex2dgather_ret< int4>  { typedef int4 type; }; 
# 334
template<> struct __nv_tex2dgather_ret< unsigned>  { typedef uint4 type; }; 
# 335
template<> struct __nv_tex2dgather_ret< uint1>  { typedef uint4 type; }; 
# 336
template<> struct __nv_tex2dgather_ret< uint2>  { typedef uint4 type; }; 
# 337
template<> struct __nv_tex2dgather_ret< uint3>  { typedef uint4 type; }; 
# 338
template<> struct __nv_tex2dgather_ret< uint4>  { typedef uint4 type; }; 
# 340
template<> struct __nv_tex2dgather_ret< float>  { typedef float4 type; }; 
# 341
template<> struct __nv_tex2dgather_ret< float1>  { typedef float4 type; }; 
# 342
template<> struct __nv_tex2dgather_ret< float2>  { typedef float4 type; }; 
# 343
template<> struct __nv_tex2dgather_ret< float3>  { typedef float4 type; }; 
# 344
template<> struct __nv_tex2dgather_ret< float4>  { typedef float4 type; }; 
# 346
template< class T> 
# 347
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex2dgather_ret< T> ::type tex2Dgather(texture< T, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 348
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 355
::exit(___);}
#if 0
# 348
{ 
# 355
} 
#endif
# 358 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> struct __nv_tex2dgather_rmnf_ret { }; 
# 359
template<> struct __nv_tex2dgather_rmnf_ret< char>  { typedef float4 type; }; 
# 360
template<> struct __nv_tex2dgather_rmnf_ret< signed char>  { typedef float4 type; }; 
# 361
template<> struct __nv_tex2dgather_rmnf_ret< unsigned char>  { typedef float4 type; }; 
# 362
template<> struct __nv_tex2dgather_rmnf_ret< char1>  { typedef float4 type; }; 
# 363
template<> struct __nv_tex2dgather_rmnf_ret< uchar1>  { typedef float4 type; }; 
# 364
template<> struct __nv_tex2dgather_rmnf_ret< char2>  { typedef float4 type; }; 
# 365
template<> struct __nv_tex2dgather_rmnf_ret< uchar2>  { typedef float4 type; }; 
# 366
template<> struct __nv_tex2dgather_rmnf_ret< char3>  { typedef float4 type; }; 
# 367
template<> struct __nv_tex2dgather_rmnf_ret< uchar3>  { typedef float4 type; }; 
# 368
template<> struct __nv_tex2dgather_rmnf_ret< char4>  { typedef float4 type; }; 
# 369
template<> struct __nv_tex2dgather_rmnf_ret< uchar4>  { typedef float4 type; }; 
# 370
template<> struct __nv_tex2dgather_rmnf_ret< signed short>  { typedef float4 type; }; 
# 371
template<> struct __nv_tex2dgather_rmnf_ret< unsigned short>  { typedef float4 type; }; 
# 372
template<> struct __nv_tex2dgather_rmnf_ret< short1>  { typedef float4 type; }; 
# 373
template<> struct __nv_tex2dgather_rmnf_ret< ushort1>  { typedef float4 type; }; 
# 374
template<> struct __nv_tex2dgather_rmnf_ret< short2>  { typedef float4 type; }; 
# 375
template<> struct __nv_tex2dgather_rmnf_ret< ushort2>  { typedef float4 type; }; 
# 376
template<> struct __nv_tex2dgather_rmnf_ret< short3>  { typedef float4 type; }; 
# 377
template<> struct __nv_tex2dgather_rmnf_ret< ushort3>  { typedef float4 type; }; 
# 378
template<> struct __nv_tex2dgather_rmnf_ret< short4>  { typedef float4 type; }; 
# 379
template<> struct __nv_tex2dgather_rmnf_ret< ushort4>  { typedef float4 type; }; 
# 381
template< class T> 
# 382
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex2dgather_rmnf_ret< T> ::type tex2Dgather(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 383
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 390
::exit(___);}
#if 0
# 383
{ 
# 390
} 
#endif
# 394 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 395
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLod(texture< T, 1, cudaReadModeElementType>  t, float x, float level) 
# 396
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 402
::exit(___);}
#if 0
# 396
{ 
# 402
} 
#endif
# 404 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 405
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLod(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 406
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 413
::exit(___);}
#if 0
# 406
{ 
# 413
} 
#endif
# 416 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 417
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLod(texture< T, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 418
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 424
::exit(___);}
#if 0
# 418
{ 
# 424
} 
#endif
# 426 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 427
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLod(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 428
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 435
::exit(___);}
#if 0
# 428
{ 
# 435
} 
#endif
# 438 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 439
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLayeredLod(texture< T, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 440
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 446
::exit(___);}
#if 0
# 440
{ 
# 446
} 
#endif
# 448 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 449
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLayeredLod(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 450
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 457
::exit(___);}
#if 0
# 450
{ 
# 457
} 
#endif
# 460 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 461
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLayeredLod(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 462
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 468
::exit(___);}
#if 0
# 462
{ 
# 468
} 
#endif
# 470 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 471
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLayeredLod(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 472
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 479
::exit(___);}
#if 0
# 472
{ 
# 479
} 
#endif
# 482 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 483
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex3DLod(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 484
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 490
::exit(___);}
#if 0
# 484
{ 
# 490
} 
#endif
# 492 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 493
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex3DLod(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 494
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 501
::exit(___);}
#if 0
# 494
{ 
# 501
} 
#endif
# 504 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 505
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLod(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 506
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 512
::exit(___);}
#if 0
# 506
{ 
# 512
} 
#endif
# 514 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 515
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLod(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 516
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 523
::exit(___);}
#if 0
# 516
{ 
# 523
} 
#endif
# 527 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 528
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLayered(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 529
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 535
::exit(___);}
#if 0
# 529
{ 
# 535
} 
#endif
# 537 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 538
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLayered(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 539
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 546
::exit(___);}
#if 0
# 539
{ 
# 546
} 
#endif
# 550 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 551
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLayeredLod(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 552
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 558
::exit(___);}
#if 0
# 552
{ 
# 558
} 
#endif
# 560 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 561
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLayeredLod(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 562
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 569
::exit(___);}
#if 0
# 562
{ 
# 569
} 
#endif
# 573 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 574
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapGrad(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 575
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 581
::exit(___);}
#if 0
# 575
{ 
# 581
} 
#endif
# 583 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 584
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapGrad(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 585
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 592
::exit(___);}
#if 0
# 585
{ 
# 592
} 
#endif
# 596 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 597
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLayeredGrad(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 598
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 604
::exit(___);}
#if 0
# 598
{ 
# 604
} 
#endif
# 606 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 607
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLayeredGrad(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 608
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 615
::exit(___);}
#if 0
# 608
{ 
# 615
} 
#endif
# 619 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 620
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DGrad(texture< T, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 621
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 627
::exit(___);}
#if 0
# 621
{ 
# 627
} 
#endif
# 629 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 630
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DGrad(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 631
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 638
::exit(___);}
#if 0
# 631
{ 
# 638
} 
#endif
# 642 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 643
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DGrad(texture< T, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 644
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 650
::exit(___);}
#if 0
# 644
{ 
# 650
} 
#endif
# 652 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 653
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DGrad(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 654
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 661
::exit(___);}
#if 0
# 654
{ 
# 661
} 
#endif
# 664 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 665
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLayeredGrad(texture< T, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 666
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 672
::exit(___);}
#if 0
# 666
{ 
# 672
} 
#endif
# 674 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 675
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLayeredGrad(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 676
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 683
::exit(___);}
#if 0
# 676
{ 
# 683
} 
#endif
# 686 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 687
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLayeredGrad(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 688
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 694
::exit(___);}
#if 0
# 688
{ 
# 694
} 
#endif
# 696 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 697
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLayeredGrad(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 698
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 705
::exit(___);}
#if 0
# 698
{ 
# 705
} 
#endif
# 708 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 709
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex3DGrad(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 710
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 716
::exit(___);}
#if 0
# 710
{ 
# 716
} 
#endif
# 718 "/sw/summit/cuda/10.1.168/include/texture_fetch_functions.h"
template< class T> 
# 719
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex3DGrad(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 720
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 727
::exit(___);}
#if 0
# 720
{ 
# 727
} 
#endif
# 60 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> struct __nv_itex_trait { }; 
# 61
template<> struct __nv_itex_trait< char>  { typedef void type; }; 
# 62
template<> struct __nv_itex_trait< signed char>  { typedef void type; }; 
# 63
template<> struct __nv_itex_trait< char1>  { typedef void type; }; 
# 64
template<> struct __nv_itex_trait< char2>  { typedef void type; }; 
# 65
template<> struct __nv_itex_trait< char4>  { typedef void type; }; 
# 66
template<> struct __nv_itex_trait< unsigned char>  { typedef void type; }; 
# 67
template<> struct __nv_itex_trait< uchar1>  { typedef void type; }; 
# 68
template<> struct __nv_itex_trait< uchar2>  { typedef void type; }; 
# 69
template<> struct __nv_itex_trait< uchar4>  { typedef void type; }; 
# 70
template<> struct __nv_itex_trait< short>  { typedef void type; }; 
# 71
template<> struct __nv_itex_trait< short1>  { typedef void type; }; 
# 72
template<> struct __nv_itex_trait< short2>  { typedef void type; }; 
# 73
template<> struct __nv_itex_trait< short4>  { typedef void type; }; 
# 74
template<> struct __nv_itex_trait< unsigned short>  { typedef void type; }; 
# 75
template<> struct __nv_itex_trait< ushort1>  { typedef void type; }; 
# 76
template<> struct __nv_itex_trait< ushort2>  { typedef void type; }; 
# 77
template<> struct __nv_itex_trait< ushort4>  { typedef void type; }; 
# 78
template<> struct __nv_itex_trait< int>  { typedef void type; }; 
# 79
template<> struct __nv_itex_trait< int1>  { typedef void type; }; 
# 80
template<> struct __nv_itex_trait< int2>  { typedef void type; }; 
# 81
template<> struct __nv_itex_trait< int4>  { typedef void type; }; 
# 82
template<> struct __nv_itex_trait< unsigned>  { typedef void type; }; 
# 83
template<> struct __nv_itex_trait< uint1>  { typedef void type; }; 
# 84
template<> struct __nv_itex_trait< uint2>  { typedef void type; }; 
# 85
template<> struct __nv_itex_trait< uint4>  { typedef void type; }; 
# 96 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template<> struct __nv_itex_trait< float>  { typedef void type; }; 
# 97
template<> struct __nv_itex_trait< float1>  { typedef void type; }; 
# 98
template<> struct __nv_itex_trait< float2>  { typedef void type; }; 
# 99
template<> struct __nv_itex_trait< float4>  { typedef void type; }; 
# 103
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 104
tex1Dfetch(T *ptr, cudaTextureObject_t obj, int x) 
# 105
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 109
::exit(___);}
#if 0
# 105
{ 
# 109
} 
#endif
# 111 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 112
tex1Dfetch(cudaTextureObject_t texObject, int x) 
# 113
{int volatile ___ = 1;(void)texObject;(void)x;
# 119
::exit(___);}
#if 0
# 113
{ 
# 119
} 
#endif
# 121 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 122
tex1D(T *ptr, cudaTextureObject_t obj, float x) 
# 123
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 127
::exit(___);}
#if 0
# 123
{ 
# 127
} 
#endif
# 130 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 131
tex1D(cudaTextureObject_t texObject, float x) 
# 132
{int volatile ___ = 1;(void)texObject;(void)x;
# 138
::exit(___);}
#if 0
# 132
{ 
# 138
} 
#endif
# 141 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 142
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y) 
# 143
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;
# 147
::exit(___);}
#if 0
# 143
{ 
# 147
} 
#endif
# 149 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 150
tex2D(cudaTextureObject_t texObject, float x, float y) 
# 151
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
# 157
::exit(___);}
#if 0
# 151
{ 
# 157
} 
#endif
# 159 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 160
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 161
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 165
::exit(___);}
#if 0
# 161
{ 
# 165
} 
#endif
# 167 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 168
tex3D(cudaTextureObject_t texObject, float x, float y, float z) 
# 169
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 175
::exit(___);}
#if 0
# 169
{ 
# 175
} 
#endif
# 177 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 178
tex1DLayered(T *ptr, cudaTextureObject_t obj, float x, int layer) 
# 179
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;
# 183
::exit(___);}
#if 0
# 179
{ 
# 183
} 
#endif
# 185 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 186
tex1DLayered(cudaTextureObject_t texObject, float x, int layer) 
# 187
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
# 193
::exit(___);}
#if 0
# 187
{ 
# 193
} 
#endif
# 195 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 196
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer) 
# 197
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;
# 201
::exit(___);}
#if 0
# 197
{ 
# 201
} 
#endif
# 203 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 204
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer) 
# 205
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
# 211
::exit(___);}
#if 0
# 205
{ 
# 211
} 
#endif
# 214 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 215
texCubemap(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 216
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 220
::exit(___);}
#if 0
# 216
{ 
# 220
} 
#endif
# 223 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 224
texCubemap(cudaTextureObject_t texObject, float x, float y, float z) 
# 225
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 231
::exit(___);}
#if 0
# 225
{ 
# 231
} 
#endif
# 234 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 235
texCubemapLayered(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer) 
# 236
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;
# 240
::exit(___);}
#if 0
# 236
{ 
# 240
} 
#endif
# 242 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 243
texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 244
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 250
::exit(___);}
#if 0
# 244
{ 
# 250
} 
#endif
# 252 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 253
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, int comp = 0) 
# 254
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)comp;
# 258
::exit(___);}
#if 0
# 254
{ 
# 258
} 
#endif
# 260 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 261
tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0) 
# 262
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
# 268
::exit(___);}
#if 0
# 262
{ 
# 268
} 
#endif
# 272 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 273
tex1DLod(T *ptr, cudaTextureObject_t obj, float x, float level) 
# 274
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)level;
# 278
::exit(___);}
#if 0
# 274
{ 
# 278
} 
#endif
# 280 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 281
tex1DLod(cudaTextureObject_t texObject, float x, float level) 
# 282
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
# 288
::exit(___);}
#if 0
# 282
{ 
# 288
} 
#endif
# 291 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 292
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level) 
# 293
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;
# 297
::exit(___);}
#if 0
# 293
{ 
# 297
} 
#endif
# 299 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 300
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level) 
# 301
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
# 307
::exit(___);}
#if 0
# 301
{ 
# 307
} 
#endif
# 310 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 311
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 312
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 316
::exit(___);}
#if 0
# 312
{ 
# 316
} 
#endif
# 318 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 319
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 320
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 326
::exit(___);}
#if 0
# 320
{ 
# 326
} 
#endif
# 329 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 330
tex1DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, int layer, float level) 
# 331
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)level;
# 335
::exit(___);}
#if 0
# 331
{ 
# 335
} 
#endif
# 337 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 338
tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level) 
# 339
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
# 345
::exit(___);}
#if 0
# 339
{ 
# 345
} 
#endif
# 348 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 349
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level) 
# 350
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;
# 354
::exit(___);}
#if 0
# 350
{ 
# 354
} 
#endif
# 356 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 357
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 358
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 364
::exit(___);}
#if 0
# 358
{ 
# 364
} 
#endif
# 367 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 368
texCubemapLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 369
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 373
::exit(___);}
#if 0
# 369
{ 
# 373
} 
#endif
# 375 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 376
texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 377
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 383
::exit(___);}
#if 0
# 377
{ 
# 383
} 
#endif
# 386 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 387
texCubemapGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 388
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 392
::exit(___);}
#if 0
# 388
{ 
# 392
} 
#endif
# 394 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 395
texCubemapGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 396
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 402
::exit(___);}
#if 0
# 396
{ 
# 402
} 
#endif
# 404 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 405
texCubemapLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float level) 
# 406
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 410
::exit(___);}
#if 0
# 406
{ 
# 410
} 
#endif
# 412 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 413
texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 414
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 420
::exit(___);}
#if 0
# 414
{ 
# 420
} 
#endif
# 422 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 423
tex1DGrad(T *ptr, cudaTextureObject_t obj, float x, float dPdx, float dPdy) 
# 424
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)dPdx;(void)dPdy;
# 428
::exit(___);}
#if 0
# 424
{ 
# 428
} 
#endif
# 430 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 431
tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 432
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 438
::exit(___);}
#if 0
# 432
{ 
# 438
} 
#endif
# 441 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 442
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy) 
# 443
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 448
::exit(___);}
#if 0
# 443
{ 
# 448
} 
#endif
# 450 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 451
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 452
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 458
::exit(___);}
#if 0
# 452
{ 
# 458
} 
#endif
# 461 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 462
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 463
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 467
::exit(___);}
#if 0
# 463
{ 
# 467
} 
#endif
# 469 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 470
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 471
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 477
::exit(___);}
#if 0
# 471
{ 
# 477
} 
#endif
# 480 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 481
tex1DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy) 
# 482
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 486
::exit(___);}
#if 0
# 482
{ 
# 486
} 
#endif
# 488 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 489
tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 490
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 496
::exit(___);}
#if 0
# 490
{ 
# 496
} 
#endif
# 499 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 500
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 501
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 505
::exit(___);}
#if 0
# 501
{ 
# 505
} 
#endif
# 507 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 508
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 509
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 515
::exit(___);}
#if 0
# 509
{ 
# 515
} 
#endif
# 518 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 519
texCubemapLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 520
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 524
::exit(___);}
#if 0
# 520
{ 
# 524
} 
#endif
# 526 "/sw/summit/cuda/10.1.168/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 527
texCubemapLayeredGrad(cudaTextureObject_t texObject, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 528
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 534
::exit(___);}
#if 0
# 528
{ 
# 534
} 
#endif
# 59 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> struct __nv_isurf_trait { }; 
# 60
template<> struct __nv_isurf_trait< char>  { typedef void type; }; 
# 61
template<> struct __nv_isurf_trait< signed char>  { typedef void type; }; 
# 62
template<> struct __nv_isurf_trait< char1>  { typedef void type; }; 
# 63
template<> struct __nv_isurf_trait< unsigned char>  { typedef void type; }; 
# 64
template<> struct __nv_isurf_trait< uchar1>  { typedef void type; }; 
# 65
template<> struct __nv_isurf_trait< short>  { typedef void type; }; 
# 66
template<> struct __nv_isurf_trait< short1>  { typedef void type; }; 
# 67
template<> struct __nv_isurf_trait< unsigned short>  { typedef void type; }; 
# 68
template<> struct __nv_isurf_trait< ushort1>  { typedef void type; }; 
# 69
template<> struct __nv_isurf_trait< int>  { typedef void type; }; 
# 70
template<> struct __nv_isurf_trait< int1>  { typedef void type; }; 
# 71
template<> struct __nv_isurf_trait< unsigned>  { typedef void type; }; 
# 72
template<> struct __nv_isurf_trait< uint1>  { typedef void type; }; 
# 73
template<> struct __nv_isurf_trait< long long>  { typedef void type; }; 
# 74
template<> struct __nv_isurf_trait< longlong1>  { typedef void type; }; 
# 75
template<> struct __nv_isurf_trait< unsigned long long>  { typedef void type; }; 
# 76
template<> struct __nv_isurf_trait< ulonglong1>  { typedef void type; }; 
# 77
template<> struct __nv_isurf_trait< float>  { typedef void type; }; 
# 78
template<> struct __nv_isurf_trait< float1>  { typedef void type; }; 
# 80
template<> struct __nv_isurf_trait< char2>  { typedef void type; }; 
# 81
template<> struct __nv_isurf_trait< uchar2>  { typedef void type; }; 
# 82
template<> struct __nv_isurf_trait< short2>  { typedef void type; }; 
# 83
template<> struct __nv_isurf_trait< ushort2>  { typedef void type; }; 
# 84
template<> struct __nv_isurf_trait< int2>  { typedef void type; }; 
# 85
template<> struct __nv_isurf_trait< uint2>  { typedef void type; }; 
# 86
template<> struct __nv_isurf_trait< longlong2>  { typedef void type; }; 
# 87
template<> struct __nv_isurf_trait< ulonglong2>  { typedef void type; }; 
# 88
template<> struct __nv_isurf_trait< float2>  { typedef void type; }; 
# 90
template<> struct __nv_isurf_trait< char4>  { typedef void type; }; 
# 91
template<> struct __nv_isurf_trait< uchar4>  { typedef void type; }; 
# 92
template<> struct __nv_isurf_trait< short4>  { typedef void type; }; 
# 93
template<> struct __nv_isurf_trait< ushort4>  { typedef void type; }; 
# 94
template<> struct __nv_isurf_trait< int4>  { typedef void type; }; 
# 95
template<> struct __nv_isurf_trait< uint4>  { typedef void type; }; 
# 96
template<> struct __nv_isurf_trait< float4>  { typedef void type; }; 
# 99
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 100
surf1Dread(T *ptr, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 101
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)mode;
# 105
::exit(___);}
#if 0
# 101
{ 
# 105
} 
#endif
# 107 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 108
surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 109
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
# 115
::exit(___);}
#if 0
# 109
{ 
# 115
} 
#endif
# 117 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 118
surf2Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 119
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)mode;
# 123
::exit(___);}
#if 0
# 119
{ 
# 123
} 
#endif
# 125 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 126
surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 127
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 133
::exit(___);}
#if 0
# 127
{ 
# 133
} 
#endif
# 136 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 137
surf3Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 138
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 142
::exit(___);}
#if 0
# 138
{ 
# 142
} 
#endif
# 144 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 145
surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 146
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 152
::exit(___);}
#if 0
# 146
{ 
# 152
} 
#endif
# 154 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 155
surf1DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 156
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)mode;
# 160
::exit(___);}
#if 0
# 156
{ 
# 160
} 
#endif
# 162 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 163
surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 164
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 170
::exit(___);}
#if 0
# 164
{ 
# 170
} 
#endif
# 172 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 173
surf2DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 174
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 178
::exit(___);}
#if 0
# 174
{ 
# 178
} 
#endif
# 180 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 181
surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 182
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 188
::exit(___);}
#if 0
# 182
{ 
# 188
} 
#endif
# 190 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 191
surfCubemapread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 192
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 196
::exit(___);}
#if 0
# 192
{ 
# 196
} 
#endif
# 198 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 199
surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 200
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 206
::exit(___);}
#if 0
# 200
{ 
# 206
} 
#endif
# 208 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 209
surfCubemapLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 210
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 214
::exit(___);}
#if 0
# 210
{ 
# 214
} 
#endif
# 216 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 217
surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 218
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;
# 224
::exit(___);}
#if 0
# 218
{ 
# 224
} 
#endif
# 226 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 227
surf1Dwrite(T val, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 228
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)mode;
# 232
::exit(___);}
#if 0
# 228
{ 
# 232
} 
#endif
# 234 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 235
surf2Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 236
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)mode;
# 240
::exit(___);}
#if 0
# 236
{ 
# 240
} 
#endif
# 242 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 243
surf3Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 244
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 248
::exit(___);}
#if 0
# 244
{ 
# 248
} 
#endif
# 250 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 251
surf1DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 252
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)layer;(void)mode;
# 256
::exit(___);}
#if 0
# 252
{ 
# 256
} 
#endif
# 258 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 259
surf2DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 260
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 264
::exit(___);}
#if 0
# 260
{ 
# 264
} 
#endif
# 266 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 267
surfCubemapwrite(T val, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 268
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 272
::exit(___);}
#if 0
# 268
{ 
# 272
} 
#endif
# 274 "/sw/summit/cuda/10.1.168/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 275
surfCubemapLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 276
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 280
::exit(___);}
#if 0
# 276
{ 
# 280
} 
#endif
# 3296 "/sw/summit/cuda/10.1.168/include/crt/device_functions.h"
extern "C" unsigned __cudaPushCallConfiguration(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, CUstream_st * stream = 0); 
# 68 "/sw/summit/cuda/10.1.168/include/device_launch_parameters.h"
extern "C" {
# 71
extern const uint3 __device_builtin_variable_threadIdx; 
# 72
extern const uint3 __device_builtin_variable_blockIdx; 
# 73
extern const dim3 __device_builtin_variable_blockDim; 
# 74
extern const dim3 __device_builtin_variable_gridDim; 
# 75
extern const int __device_builtin_variable_warpSize; 
# 80
}
# 199 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 200
cudaLaunchKernel(const T *
# 201
func, dim3 
# 202
gridDim, dim3 
# 203
blockDim, void **
# 204
args, size_t 
# 205
sharedMem = 0, cudaStream_t 
# 206
stream = 0) 
# 208
{ 
# 209
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 210
} 
# 261 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 262
cudaLaunchCooperativeKernel(const T *
# 263
func, dim3 
# 264
gridDim, dim3 
# 265
blockDim, void **
# 266
args, size_t 
# 267
sharedMem = 0, cudaStream_t 
# 268
stream = 0) 
# 270
{ 
# 271
return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 272
} 
# 305 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 306
event, unsigned 
# 307
flags) 
# 309
{ 
# 310
return ::cudaEventCreateWithFlags(event, flags); 
# 311
} 
# 370 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
static inline cudaError_t cudaMallocHost(void **
# 371
ptr, size_t 
# 372
size, unsigned 
# 373
flags) 
# 375
{ 
# 376
return ::cudaHostAlloc(ptr, size, flags); 
# 377
} 
# 379
template< class T> static inline cudaError_t 
# 380
cudaHostAlloc(T **
# 381
ptr, size_t 
# 382
size, unsigned 
# 383
flags) 
# 385
{ 
# 386
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
# 387
} 
# 389
template< class T> static inline cudaError_t 
# 390
cudaHostGetDevicePointer(T **
# 391
pDevice, void *
# 392
pHost, unsigned 
# 393
flags) 
# 395
{ 
# 396
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
# 397
} 
# 499 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 500
cudaMallocManaged(T **
# 501
devPtr, size_t 
# 502
size, unsigned 
# 503
flags = 1) 
# 505
{ 
# 506
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
# 507
} 
# 589 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 590
cudaStreamAttachMemAsync(cudaStream_t 
# 591
stream, T *
# 592
devPtr, size_t 
# 593
length = 0, unsigned 
# 594
flags = 4) 
# 596
{ 
# 597
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
# 598
} 
# 600
template< class T> inline cudaError_t 
# 601
cudaMalloc(T **
# 602
devPtr, size_t 
# 603
size) 
# 605
{ 
# 606
return ::cudaMalloc((void **)((void *)devPtr), size); 
# 607
} 
# 609
template< class T> static inline cudaError_t 
# 610
cudaMallocHost(T **
# 611
ptr, size_t 
# 612
size, unsigned 
# 613
flags = 0) 
# 615
{ 
# 616
return cudaMallocHost((void **)((void *)ptr), size, flags); 
# 617
} 
# 619
template< class T> static inline cudaError_t 
# 620
cudaMallocPitch(T **
# 621
devPtr, size_t *
# 622
pitch, size_t 
# 623
width, size_t 
# 624
height) 
# 626
{ 
# 627
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
# 628
} 
# 667 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 668
cudaMemcpyToSymbol(const T &
# 669
symbol, const void *
# 670
src, size_t 
# 671
count, size_t 
# 672
offset = 0, cudaMemcpyKind 
# 673
kind = cudaMemcpyHostToDevice) 
# 675
{ 
# 676
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
# 677
} 
# 721 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 722
cudaMemcpyToSymbolAsync(const T &
# 723
symbol, const void *
# 724
src, size_t 
# 725
count, size_t 
# 726
offset = 0, cudaMemcpyKind 
# 727
kind = cudaMemcpyHostToDevice, cudaStream_t 
# 728
stream = 0) 
# 730
{ 
# 731
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
# 732
} 
# 769 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 770
cudaMemcpyFromSymbol(void *
# 771
dst, const T &
# 772
symbol, size_t 
# 773
count, size_t 
# 774
offset = 0, cudaMemcpyKind 
# 775
kind = cudaMemcpyDeviceToHost) 
# 777
{ 
# 778
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
# 779
} 
# 823 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 824
cudaMemcpyFromSymbolAsync(void *
# 825
dst, const T &
# 826
symbol, size_t 
# 827
count, size_t 
# 828
offset = 0, cudaMemcpyKind 
# 829
kind = cudaMemcpyDeviceToHost, cudaStream_t 
# 830
stream = 0) 
# 832
{ 
# 833
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
# 834
} 
# 859 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 860
cudaGetSymbolAddress(void **
# 861
devPtr, const T &
# 862
symbol) 
# 864
{ 
# 865
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
# 866
} 
# 891 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 892
cudaGetSymbolSize(size_t *
# 893
size, const T &
# 894
symbol) 
# 896
{ 
# 897
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
# 898
} 
# 935 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 936
cudaBindTexture(size_t *
# 937
offset, const texture< T, dim, readMode>  &
# 938
tex, const void *
# 939
devPtr, const cudaChannelFormatDesc &
# 940
desc, size_t 
# 941
size = ((2147483647) * 2U) + 1U) 
# 943
{ 
# 944
return ::cudaBindTexture(offset, &tex, devPtr, &desc, size); 
# 945
} 
# 981 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 982
cudaBindTexture(size_t *
# 983
offset, const texture< T, dim, readMode>  &
# 984
tex, const void *
# 985
devPtr, size_t 
# 986
size = ((2147483647) * 2U) + 1U) 
# 988
{ 
# 989
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
# 990
} 
# 1038 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1039
cudaBindTexture2D(size_t *
# 1040
offset, const texture< T, dim, readMode>  &
# 1041
tex, const void *
# 1042
devPtr, const cudaChannelFormatDesc &
# 1043
desc, size_t 
# 1044
width, size_t 
# 1045
height, size_t 
# 1046
pitch) 
# 1048
{ 
# 1049
return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch); 
# 1050
} 
# 1097 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1098
cudaBindTexture2D(size_t *
# 1099
offset, const texture< T, dim, readMode>  &
# 1100
tex, const void *
# 1101
devPtr, size_t 
# 1102
width, size_t 
# 1103
height, size_t 
# 1104
pitch) 
# 1106
{ 
# 1107
return ::cudaBindTexture2D(offset, &tex, devPtr, &(tex.channelDesc), width, height, pitch); 
# 1108
} 
# 1140 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1141
cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 1142
tex, cudaArray_const_t 
# 1143
array, const cudaChannelFormatDesc &
# 1144
desc) 
# 1146
{ 
# 1147
return ::cudaBindTextureToArray(&tex, array, &desc); 
# 1148
} 
# 1179 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1180
cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 1181
tex, cudaArray_const_t 
# 1182
array) 
# 1184
{ 
# 1185
cudaChannelFormatDesc desc; 
# 1186
cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
# 1188
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err; 
# 1189
} 
# 1221 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1222
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 1223
tex, cudaMipmappedArray_const_t 
# 1224
mipmappedArray, const cudaChannelFormatDesc &
# 1225
desc) 
# 1227
{ 
# 1228
return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc); 
# 1229
} 
# 1260 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1261
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 1262
tex, cudaMipmappedArray_const_t 
# 1263
mipmappedArray) 
# 1265
{ 
# 1266
cudaChannelFormatDesc desc; 
# 1267
cudaArray_t levelArray; 
# 1268
cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0); 
# 1270
if (err != (cudaSuccess)) { 
# 1271
return err; 
# 1272
}  
# 1273
err = ::cudaGetChannelDesc(&desc, levelArray); 
# 1275
return (err == (cudaSuccess)) ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err; 
# 1276
} 
# 1303 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1304
cudaUnbindTexture(const texture< T, dim, readMode>  &
# 1305
tex) 
# 1307
{ 
# 1308
return ::cudaUnbindTexture(&tex); 
# 1309
} 
# 1339 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1340
cudaGetTextureAlignmentOffset(size_t *
# 1341
offset, const texture< T, dim, readMode>  &
# 1342
tex) 
# 1344
{ 
# 1345
return ::cudaGetTextureAlignmentOffset(offset, &tex); 
# 1346
} 
# 1391 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1392
cudaFuncSetCacheConfig(T *
# 1393
func, cudaFuncCache 
# 1394
cacheConfig) 
# 1396
{ 
# 1397
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
# 1398
} 
# 1400
template< class T> static inline cudaError_t 
# 1401
cudaFuncSetSharedMemConfig(T *
# 1402
func, cudaSharedMemConfig 
# 1403
config) 
# 1405
{ 
# 1406
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
# 1407
} 
# 1436 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1437
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
# 1438
numBlocks, T 
# 1439
func, int 
# 1440
blockSize, size_t 
# 1441
dynamicSMemSize) 
# 1442
{ 
# 1443
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
# 1444
} 
# 1487 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1488
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
# 1489
numBlocks, T 
# 1490
func, int 
# 1491
blockSize, size_t 
# 1492
dynamicSMemSize, unsigned 
# 1493
flags) 
# 1494
{ 
# 1495
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
# 1496
} 
# 1501
class __cudaOccupancyB2DHelper { 
# 1502
size_t n; 
# 1504
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
# 1505
size_t operator()(int) 
# 1506
{ 
# 1507
return n; 
# 1508
} 
# 1509
}; 
# 1556 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 1557
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
# 1558
minGridSize, int *
# 1559
blockSize, T 
# 1560
func, UnaryFunction 
# 1561
blockSizeToDynamicSMemSize, int 
# 1562
blockSizeLimit = 0, unsigned 
# 1563
flags = 0) 
# 1564
{ 
# 1565
cudaError_t status; 
# 1568
int device; 
# 1569
cudaFuncAttributes attr; 
# 1572
int maxThreadsPerMultiProcessor; 
# 1573
int warpSize; 
# 1574
int devMaxThreadsPerBlock; 
# 1575
int multiProcessorCount; 
# 1576
int funcMaxThreadsPerBlock; 
# 1577
int occupancyLimit; 
# 1578
int granularity; 
# 1581
int maxBlockSize = 0; 
# 1582
int numBlocks = 0; 
# 1583
int maxOccupancy = 0; 
# 1586
int blockSizeToTryAligned; 
# 1587
int blockSizeToTry; 
# 1588
int blockSizeLimitAligned; 
# 1589
int occupancyInBlocks; 
# 1590
int occupancyInThreads; 
# 1591
size_t dynamicSMemSize; 
# 1597
if (((!minGridSize) || (!blockSize)) || (!func)) { 
# 1598
return cudaErrorInvalidValue; 
# 1599
}  
# 1605
status = ::cudaGetDevice(&device); 
# 1606
if (status != (cudaSuccess)) { 
# 1607
return status; 
# 1608
}  
# 1610
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
# 1614
if (status != (cudaSuccess)) { 
# 1615
return status; 
# 1616
}  
# 1618
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
# 1622
if (status != (cudaSuccess)) { 
# 1623
return status; 
# 1624
}  
# 1626
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
# 1630
if (status != (cudaSuccess)) { 
# 1631
return status; 
# 1632
}  
# 1634
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
# 1638
if (status != (cudaSuccess)) { 
# 1639
return status; 
# 1640
}  
# 1642
status = cudaFuncGetAttributes(&attr, func); 
# 1643
if (status != (cudaSuccess)) { 
# 1644
return status; 
# 1645
}  
# 1647
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
# 1653
occupancyLimit = maxThreadsPerMultiProcessor; 
# 1654
granularity = warpSize; 
# 1656
if (blockSizeLimit == 0) { 
# 1657
blockSizeLimit = devMaxThreadsPerBlock; 
# 1658
}  
# 1660
if (devMaxThreadsPerBlock < blockSizeLimit) { 
# 1661
blockSizeLimit = devMaxThreadsPerBlock; 
# 1662
}  
# 1664
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
# 1665
blockSizeLimit = funcMaxThreadsPerBlock; 
# 1666
}  
# 1668
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
# 1670
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
# 1674
if (blockSizeLimit < blockSizeToTryAligned) { 
# 1675
blockSizeToTry = blockSizeLimit; 
# 1676
} else { 
# 1677
blockSizeToTry = blockSizeToTryAligned; 
# 1678
}  
# 1680
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
# 1682
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
# 1689
if (status != (cudaSuccess)) { 
# 1690
return status; 
# 1691
}  
# 1693
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
# 1695
if (occupancyInThreads > maxOccupancy) { 
# 1696
maxBlockSize = blockSizeToTry; 
# 1697
numBlocks = occupancyInBlocks; 
# 1698
maxOccupancy = occupancyInThreads; 
# 1699
}  
# 1703
if (occupancyLimit == maxOccupancy) { 
# 1704
break; 
# 1705
}  
# 1706
}  
# 1714
(*minGridSize) = (numBlocks * multiProcessorCount); 
# 1715
(*blockSize) = maxBlockSize; 
# 1717
return status; 
# 1718
} 
# 1751 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 1752
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
# 1753
minGridSize, int *
# 1754
blockSize, T 
# 1755
func, UnaryFunction 
# 1756
blockSizeToDynamicSMemSize, int 
# 1757
blockSizeLimit = 0) 
# 1758
{ 
# 1759
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
# 1760
} 
# 1796 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1797
cudaOccupancyMaxPotentialBlockSize(int *
# 1798
minGridSize, int *
# 1799
blockSize, T 
# 1800
func, size_t 
# 1801
dynamicSMemSize = 0, int 
# 1802
blockSizeLimit = 0) 
# 1803
{ 
# 1804
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
# 1805
} 
# 1855 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1856
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
# 1857
minGridSize, int *
# 1858
blockSize, T 
# 1859
func, size_t 
# 1860
dynamicSMemSize = 0, int 
# 1861
blockSizeLimit = 0, unsigned 
# 1862
flags = 0) 
# 1863
{ 
# 1864
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
# 1865
} 
# 1896 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1897
cudaFuncGetAttributes(cudaFuncAttributes *
# 1898
attr, T *
# 1899
entry) 
# 1901
{ 
# 1902
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
# 1903
} 
# 1941 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1942
cudaFuncSetAttribute(T *
# 1943
entry, cudaFuncAttribute 
# 1944
attr, int 
# 1945
value) 
# 1947
{ 
# 1948
return ::cudaFuncSetAttribute((const void *)entry, attr, value); 
# 1949
} 
# 1973 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T, int dim> 
# 1974
__attribute((deprecated)) static inline cudaError_t cudaBindSurfaceToArray(const surface< T, dim>  &
# 1975
surf, cudaArray_const_t 
# 1976
array, const cudaChannelFormatDesc &
# 1977
desc) 
# 1979
{ 
# 1980
return ::cudaBindSurfaceToArray(&surf, array, &desc); 
# 1981
} 
# 2004 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
template< class T, int dim> 
# 2005
__attribute((deprecated)) static inline cudaError_t cudaBindSurfaceToArray(const surface< T, dim>  &
# 2006
surf, cudaArray_const_t 
# 2007
array) 
# 2009
{ 
# 2010
cudaChannelFormatDesc desc; 
# 2011
cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
# 2013
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err; 
# 2014
} 
# 2025 "/sw/summit/cuda/10.1.168/include/cuda_runtime.h"
#pragma GCC diagnostic pop
# 4 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/include/zfp/types.h"
typedef unsigned char uchar; 
# 5
extern "C" { typedef unsigned short ushort; }
# 6
extern "C" { typedef unsigned uint; }
# 34 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/include/zfp/types.h"
typedef signed char int8; 
# 35
typedef unsigned char uint8; 
# 36
typedef signed short int16; 
# 37
typedef unsigned short uint16; 
# 40
typedef signed int int32; 
# 41
typedef unsigned uint32; 
# 66 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/include/zfp/types.h"
typedef signed long int64; 
# 92 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/include/zfp/types.h"
typedef unsigned long uint64; 
# 9 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/include/bitstream.h"
typedef struct bitstream bitstream; 
# 11
extern "C" const size_t stream_word_bits; 
# 15
extern "C" {
# 19
inline bitstream *stream_open(void * buffer, size_t bytes); 
# 22
inline void stream_close(bitstream * stream); 
# 25
inline bitstream *stream_clone(const bitstream * stream); 
# 28
inline void *stream_data(const bitstream * stream); 
# 31
inline size_t stream_size(const bitstream * stream); 
# 34
inline size_t stream_capacity(const bitstream * stream); 
# 37
inline size_t stream_stride_block(const bitstream * stream); 
# 40
inline ptrdiff_t stream_stride_delta(const bitstream * stream); 
# 43
inline uint stream_read_bit(bitstream * stream); 
# 46
inline uint stream_write_bit(bitstream * stream, uint bit); 
# 49
inline uint64 stream_read_bits(bitstream * stream, uint n); 
# 52
inline uint64 stream_write_bits(bitstream * stream, uint64 value, uint n); 
# 55
inline size_t stream_rtell(const bitstream * stream); 
# 58
inline size_t stream_wtell(const bitstream * stream); 
# 61
inline void stream_rewind(bitstream * stream); 
# 64
inline void stream_rseek(bitstream * stream, size_t offset); 
# 67
inline void stream_wseek(bitstream * stream, size_t offset); 
# 70
inline void stream_skip(bitstream * stream, uint n); 
# 73
inline void stream_pad(bitstream * stream, uint n); 
# 76
inline size_t stream_align(bitstream * stream); 
# 79
inline size_t stream_flush(bitstream * stream); 
# 82
inline void stream_copy(bitstream * dst, bitstream * src, size_t n); 
# 90
}
# 38 "/usr/include/sys/time.h" 3
extern "C" {
# 56 "/usr/include/sys/time.h" 3
struct timezone { 
# 58
int tz_minuteswest; 
# 59
int tz_dsttime; 
# 60
}; 
# 62
typedef struct timezone *__restrict__ __timezone_ptr_t; 
# 72 "/usr/include/sys/time.h" 3
extern int gettimeofday(timeval *__restrict__ __tv, __timezone_ptr_t __tz) throw()
# 73
 __attribute((__nonnull__(1))); 
# 78
extern int settimeofday(const timeval * __tv, const struct timezone * __tz) throw(); 
# 86
extern int adjtime(const timeval * __delta, timeval * __olddelta) throw(); 
# 92
enum __itimer_which { 
# 95
ITIMER_REAL, 
# 98
ITIMER_VIRTUAL, 
# 102
ITIMER_PROF
# 104
}; 
# 108
struct itimerval { 
# 111
timeval it_interval; 
# 113
timeval it_value; 
# 114
}; 
# 121
typedef int __itimer_which_t; 
# 126
extern int getitimer(__itimer_which_t __which, itimerval * __value) throw(); 
# 132
extern int setitimer(__itimer_which_t __which, const itimerval *__restrict__ __new, itimerval *__restrict__ __old) throw(); 
# 139
extern int utimes(const char * __file, const timeval  __tvp[2]) throw()
# 140
 __attribute((__nonnull__(1))); 
# 144
extern int lutimes(const char * __file, const timeval  __tvp[2]) throw()
# 145
 __attribute((__nonnull__(1))); 
# 148
extern int futimes(int __fd, const timeval  __tvp[2]) throw(); 
# 155
extern int futimesat(int __fd, const char * __file, const timeval  __tvp[2]) throw(); 
# 190 "/usr/include/sys/time.h" 3
}
# 27 "/usr/include/unistd.h" 3
extern "C" {
# 267 "/usr/include/unistd.h" 3
typedef __intptr_t intptr_t; 
# 274
typedef __socklen_t socklen_t; 
# 287 "/usr/include/unistd.h" 3
extern int access(const char * __name, int __type) throw() __attribute((__nonnull__(1))); 
# 292
extern int euidaccess(const char * __name, int __type) throw()
# 293
 __attribute((__nonnull__(1))); 
# 296
extern int eaccess(const char * __name, int __type) throw()
# 297
 __attribute((__nonnull__(1))); 
# 304
extern int faccessat(int __fd, const char * __file, int __type, int __flag) throw()
# 305
 __attribute((__nonnull__(2))); 
# 334 "/usr/include/unistd.h" 3
extern __off_t lseek(int __fd, __off_t __offset, int __whence) throw(); 
# 345 "/usr/include/unistd.h" 3
extern __off64_t lseek64(int __fd, __off64_t __offset, int __whence) throw(); 
# 353
extern int close(int __fd); 
# 360
extern ssize_t read(int __fd, void * __buf, size_t __nbytes); 
# 366
extern ssize_t write(int __fd, const void * __buf, size_t __n); 
# 376 "/usr/include/unistd.h" 3
extern ssize_t pread(int __fd, void * __buf, size_t __nbytes, __off_t __offset); 
# 384
extern ssize_t pwrite(int __fd, const void * __buf, size_t __n, __off_t __offset); 
# 404 "/usr/include/unistd.h" 3
extern ssize_t pread64(int __fd, void * __buf, size_t __nbytes, __off64_t __offset); 
# 408
extern ssize_t pwrite64(int __fd, const void * __buf, size_t __n, __off64_t __offset); 
# 417
extern int pipe(int  __pipedes[2]) throw(); 
# 422
extern int pipe2(int  __pipedes[2], int __flags) throw(); 
# 432 "/usr/include/unistd.h" 3
extern unsigned alarm(unsigned __seconds) throw(); 
# 444 "/usr/include/unistd.h" 3
extern unsigned sleep(unsigned __seconds); 
# 452
extern __useconds_t ualarm(__useconds_t __value, __useconds_t __interval) throw(); 
# 460
extern int usleep(__useconds_t __useconds); 
# 469 "/usr/include/unistd.h" 3
extern int pause(); 
# 473
extern int chown(const char * __file, __uid_t __owner, __gid_t __group) throw()
# 474
 __attribute((__nonnull__(1))); 
# 478
extern int fchown(int __fd, __uid_t __owner, __gid_t __group) throw(); 
# 483
extern int lchown(const char * __file, __uid_t __owner, __gid_t __group) throw()
# 484
 __attribute((__nonnull__(1))); 
# 491
extern int fchownat(int __fd, const char * __file, __uid_t __owner, __gid_t __group, int __flag) throw()
# 493
 __attribute((__nonnull__(2))); 
# 497
extern int chdir(const char * __path) throw() __attribute((__nonnull__(1))); 
# 501
extern int fchdir(int __fd) throw(); 
# 511 "/usr/include/unistd.h" 3
extern char *getcwd(char * __buf, size_t __size) throw(); 
# 517
extern char *get_current_dir_name() throw(); 
# 525
extern char *getwd(char * __buf) throw()
# 526
 __attribute((__nonnull__(1))) __attribute((__deprecated__)); 
# 531
extern int dup(int __fd) throw(); 
# 534
extern int dup2(int __fd, int __fd2) throw(); 
# 539
extern int dup3(int __fd, int __fd2, int __flags) throw(); 
# 543
extern char **__environ; 
# 545
extern char **environ; 
# 551
extern int execve(const char * __path, char *const  __argv[], char *const  __envp[]) throw()
# 552
 __attribute((__nonnull__(1, 2))); 
# 557
extern int fexecve(int __fd, char *const  __argv[], char *const  __envp[]) throw()
# 558
 __attribute((__nonnull__(2))); 
# 563
extern int execv(const char * __path, char *const  __argv[]) throw()
# 564
 __attribute((__nonnull__(1, 2))); 
# 568
extern int execle(const char * __path, const char * __arg, ...) throw()
# 569
 __attribute((__nonnull__(1, 2))); 
# 573
extern int execl(const char * __path, const char * __arg, ...) throw()
# 574
 __attribute((__nonnull__(1, 2))); 
# 578
extern int execvp(const char * __file, char *const  __argv[]) throw()
# 579
 __attribute((__nonnull__(1, 2))); 
# 584
extern int execlp(const char * __file, const char * __arg, ...) throw()
# 585
 __attribute((__nonnull__(1, 2))); 
# 590
extern int execvpe(const char * __file, char *const  __argv[], char *const  __envp[]) throw()
# 592
 __attribute((__nonnull__(1, 2))); 
# 598
extern int nice(int __inc) throw(); 
# 603
extern void _exit(int __status) __attribute((__noreturn__)); 
# 26 "/usr/include/bits/confname.h" 3
enum { 
# 27
_PC_LINK_MAX, 
# 29
_PC_MAX_CANON, 
# 31
_PC_MAX_INPUT, 
# 33
_PC_NAME_MAX, 
# 35
_PC_PATH_MAX, 
# 37
_PC_PIPE_BUF, 
# 39
_PC_CHOWN_RESTRICTED, 
# 41
_PC_NO_TRUNC, 
# 43
_PC_VDISABLE, 
# 45
_PC_SYNC_IO, 
# 47
_PC_ASYNC_IO, 
# 49
_PC_PRIO_IO, 
# 51
_PC_SOCK_MAXBUF, 
# 53
_PC_FILESIZEBITS, 
# 55
_PC_REC_INCR_XFER_SIZE, 
# 57
_PC_REC_MAX_XFER_SIZE, 
# 59
_PC_REC_MIN_XFER_SIZE, 
# 61
_PC_REC_XFER_ALIGN, 
# 63
_PC_ALLOC_SIZE_MIN, 
# 65
_PC_SYMLINK_MAX, 
# 67
_PC_2_SYMLINKS
# 69
}; 
# 73
enum { 
# 74
_SC_ARG_MAX, 
# 76
_SC_CHILD_MAX, 
# 78
_SC_CLK_TCK, 
# 80
_SC_NGROUPS_MAX, 
# 82
_SC_OPEN_MAX, 
# 84
_SC_STREAM_MAX, 
# 86
_SC_TZNAME_MAX, 
# 88
_SC_JOB_CONTROL, 
# 90
_SC_SAVED_IDS, 
# 92
_SC_REALTIME_SIGNALS, 
# 94
_SC_PRIORITY_SCHEDULING, 
# 96
_SC_TIMERS, 
# 98
_SC_ASYNCHRONOUS_IO, 
# 100
_SC_PRIORITIZED_IO, 
# 102
_SC_SYNCHRONIZED_IO, 
# 104
_SC_FSYNC, 
# 106
_SC_MAPPED_FILES, 
# 108
_SC_MEMLOCK, 
# 110
_SC_MEMLOCK_RANGE, 
# 112
_SC_MEMORY_PROTECTION, 
# 114
_SC_MESSAGE_PASSING, 
# 116
_SC_SEMAPHORES, 
# 118
_SC_SHARED_MEMORY_OBJECTS, 
# 120
_SC_AIO_LISTIO_MAX, 
# 122
_SC_AIO_MAX, 
# 124
_SC_AIO_PRIO_DELTA_MAX, 
# 126
_SC_DELAYTIMER_MAX, 
# 128
_SC_MQ_OPEN_MAX, 
# 130
_SC_MQ_PRIO_MAX, 
# 132
_SC_VERSION, 
# 134
_SC_PAGESIZE, 
# 137
_SC_RTSIG_MAX, 
# 139
_SC_SEM_NSEMS_MAX, 
# 141
_SC_SEM_VALUE_MAX, 
# 143
_SC_SIGQUEUE_MAX, 
# 145
_SC_TIMER_MAX, 
# 150
_SC_BC_BASE_MAX, 
# 152
_SC_BC_DIM_MAX, 
# 154
_SC_BC_SCALE_MAX, 
# 156
_SC_BC_STRING_MAX, 
# 158
_SC_COLL_WEIGHTS_MAX, 
# 160
_SC_EQUIV_CLASS_MAX, 
# 162
_SC_EXPR_NEST_MAX, 
# 164
_SC_LINE_MAX, 
# 166
_SC_RE_DUP_MAX, 
# 168
_SC_CHARCLASS_NAME_MAX, 
# 171
_SC_2_VERSION, 
# 173
_SC_2_C_BIND, 
# 175
_SC_2_C_DEV, 
# 177
_SC_2_FORT_DEV, 
# 179
_SC_2_FORT_RUN, 
# 181
_SC_2_SW_DEV, 
# 183
_SC_2_LOCALEDEF, 
# 186
_SC_PII, 
# 188
_SC_PII_XTI, 
# 190
_SC_PII_SOCKET, 
# 192
_SC_PII_INTERNET, 
# 194
_SC_PII_OSI, 
# 196
_SC_POLL, 
# 198
_SC_SELECT, 
# 200
_SC_UIO_MAXIOV, 
# 202
_SC_IOV_MAX = 60, 
# 204
_SC_PII_INTERNET_STREAM, 
# 206
_SC_PII_INTERNET_DGRAM, 
# 208
_SC_PII_OSI_COTS, 
# 210
_SC_PII_OSI_CLTS, 
# 212
_SC_PII_OSI_M, 
# 214
_SC_T_IOV_MAX, 
# 218
_SC_THREADS, 
# 220
_SC_THREAD_SAFE_FUNCTIONS, 
# 222
_SC_GETGR_R_SIZE_MAX, 
# 224
_SC_GETPW_R_SIZE_MAX, 
# 226
_SC_LOGIN_NAME_MAX, 
# 228
_SC_TTY_NAME_MAX, 
# 230
_SC_THREAD_DESTRUCTOR_ITERATIONS, 
# 232
_SC_THREAD_KEYS_MAX, 
# 234
_SC_THREAD_STACK_MIN, 
# 236
_SC_THREAD_THREADS_MAX, 
# 238
_SC_THREAD_ATTR_STACKADDR, 
# 240
_SC_THREAD_ATTR_STACKSIZE, 
# 242
_SC_THREAD_PRIORITY_SCHEDULING, 
# 244
_SC_THREAD_PRIO_INHERIT, 
# 246
_SC_THREAD_PRIO_PROTECT, 
# 248
_SC_THREAD_PROCESS_SHARED, 
# 251
_SC_NPROCESSORS_CONF, 
# 253
_SC_NPROCESSORS_ONLN, 
# 255
_SC_PHYS_PAGES, 
# 257
_SC_AVPHYS_PAGES, 
# 259
_SC_ATEXIT_MAX, 
# 261
_SC_PASS_MAX, 
# 264
_SC_XOPEN_VERSION, 
# 266
_SC_XOPEN_XCU_VERSION, 
# 268
_SC_XOPEN_UNIX, 
# 270
_SC_XOPEN_CRYPT, 
# 272
_SC_XOPEN_ENH_I18N, 
# 274
_SC_XOPEN_SHM, 
# 277
_SC_2_CHAR_TERM, 
# 279
_SC_2_C_VERSION, 
# 281
_SC_2_UPE, 
# 284
_SC_XOPEN_XPG2, 
# 286
_SC_XOPEN_XPG3, 
# 288
_SC_XOPEN_XPG4, 
# 291
_SC_CHAR_BIT, 
# 293
_SC_CHAR_MAX, 
# 295
_SC_CHAR_MIN, 
# 297
_SC_INT_MAX, 
# 299
_SC_INT_MIN, 
# 301
_SC_LONG_BIT, 
# 303
_SC_WORD_BIT, 
# 305
_SC_MB_LEN_MAX, 
# 307
_SC_NZERO, 
# 309
_SC_SSIZE_MAX, 
# 311
_SC_SCHAR_MAX, 
# 313
_SC_SCHAR_MIN, 
# 315
_SC_SHRT_MAX, 
# 317
_SC_SHRT_MIN, 
# 319
_SC_UCHAR_MAX, 
# 321
_SC_UINT_MAX, 
# 323
_SC_ULONG_MAX, 
# 325
_SC_USHRT_MAX, 
# 328
_SC_NL_ARGMAX, 
# 330
_SC_NL_LANGMAX, 
# 332
_SC_NL_MSGMAX, 
# 334
_SC_NL_NMAX, 
# 336
_SC_NL_SETMAX, 
# 338
_SC_NL_TEXTMAX, 
# 341
_SC_XBS5_ILP32_OFF32, 
# 343
_SC_XBS5_ILP32_OFFBIG, 
# 345
_SC_XBS5_LP64_OFF64, 
# 347
_SC_XBS5_LPBIG_OFFBIG, 
# 350
_SC_XOPEN_LEGACY, 
# 352
_SC_XOPEN_REALTIME, 
# 354
_SC_XOPEN_REALTIME_THREADS, 
# 357
_SC_ADVISORY_INFO, 
# 359
_SC_BARRIERS, 
# 361
_SC_BASE, 
# 363
_SC_C_LANG_SUPPORT, 
# 365
_SC_C_LANG_SUPPORT_R, 
# 367
_SC_CLOCK_SELECTION, 
# 369
_SC_CPUTIME, 
# 371
_SC_THREAD_CPUTIME, 
# 373
_SC_DEVICE_IO, 
# 375
_SC_DEVICE_SPECIFIC, 
# 377
_SC_DEVICE_SPECIFIC_R, 
# 379
_SC_FD_MGMT, 
# 381
_SC_FIFO, 
# 383
_SC_PIPE, 
# 385
_SC_FILE_ATTRIBUTES, 
# 387
_SC_FILE_LOCKING, 
# 389
_SC_FILE_SYSTEM, 
# 391
_SC_MONOTONIC_CLOCK, 
# 393
_SC_MULTI_PROCESS, 
# 395
_SC_SINGLE_PROCESS, 
# 397
_SC_NETWORKING, 
# 399
_SC_READER_WRITER_LOCKS, 
# 401
_SC_SPIN_LOCKS, 
# 403
_SC_REGEXP, 
# 405
_SC_REGEX_VERSION, 
# 407
_SC_SHELL, 
# 409
_SC_SIGNALS, 
# 411
_SC_SPAWN, 
# 413
_SC_SPORADIC_SERVER, 
# 415
_SC_THREAD_SPORADIC_SERVER, 
# 417
_SC_SYSTEM_DATABASE, 
# 419
_SC_SYSTEM_DATABASE_R, 
# 421
_SC_TIMEOUTS, 
# 423
_SC_TYPED_MEMORY_OBJECTS, 
# 425
_SC_USER_GROUPS, 
# 427
_SC_USER_GROUPS_R, 
# 429
_SC_2_PBS, 
# 431
_SC_2_PBS_ACCOUNTING, 
# 433
_SC_2_PBS_LOCATE, 
# 435
_SC_2_PBS_MESSAGE, 
# 437
_SC_2_PBS_TRACK, 
# 439
_SC_SYMLOOP_MAX, 
# 441
_SC_STREAMS, 
# 443
_SC_2_PBS_CHECKPOINT, 
# 446
_SC_V6_ILP32_OFF32, 
# 448
_SC_V6_ILP32_OFFBIG, 
# 450
_SC_V6_LP64_OFF64, 
# 452
_SC_V6_LPBIG_OFFBIG, 
# 455
_SC_HOST_NAME_MAX, 
# 457
_SC_TRACE, 
# 459
_SC_TRACE_EVENT_FILTER, 
# 461
_SC_TRACE_INHERIT, 
# 463
_SC_TRACE_LOG, 
# 466
_SC_LEVEL1_ICACHE_SIZE, 
# 468
_SC_LEVEL1_ICACHE_ASSOC, 
# 470
_SC_LEVEL1_ICACHE_LINESIZE, 
# 472
_SC_LEVEL1_DCACHE_SIZE, 
# 474
_SC_LEVEL1_DCACHE_ASSOC, 
# 476
_SC_LEVEL1_DCACHE_LINESIZE, 
# 478
_SC_LEVEL2_CACHE_SIZE, 
# 480
_SC_LEVEL2_CACHE_ASSOC, 
# 482
_SC_LEVEL2_CACHE_LINESIZE, 
# 484
_SC_LEVEL3_CACHE_SIZE, 
# 486
_SC_LEVEL3_CACHE_ASSOC, 
# 488
_SC_LEVEL3_CACHE_LINESIZE, 
# 490
_SC_LEVEL4_CACHE_SIZE, 
# 492
_SC_LEVEL4_CACHE_ASSOC, 
# 494
_SC_LEVEL4_CACHE_LINESIZE, 
# 498
_SC_IPV6 = 235, 
# 500
_SC_RAW_SOCKETS, 
# 503
_SC_V7_ILP32_OFF32, 
# 505
_SC_V7_ILP32_OFFBIG, 
# 507
_SC_V7_LP64_OFF64, 
# 509
_SC_V7_LPBIG_OFFBIG, 
# 512
_SC_SS_REPL_MAX, 
# 515
_SC_TRACE_EVENT_NAME_MAX, 
# 517
_SC_TRACE_NAME_MAX, 
# 519
_SC_TRACE_SYS_MAX, 
# 521
_SC_TRACE_USER_EVENT_MAX, 
# 524
_SC_XOPEN_STREAMS, 
# 527
_SC_THREAD_ROBUST_PRIO_INHERIT, 
# 529
_SC_THREAD_ROBUST_PRIO_PROTECT
# 531
}; 
# 535
enum { 
# 536
_CS_PATH, 
# 539
_CS_V6_WIDTH_RESTRICTED_ENVS, 
# 543
_CS_GNU_LIBC_VERSION, 
# 545
_CS_GNU_LIBPTHREAD_VERSION, 
# 548
_CS_V5_WIDTH_RESTRICTED_ENVS, 
# 552
_CS_V7_WIDTH_RESTRICTED_ENVS, 
# 556
_CS_LFS_CFLAGS = 1000, 
# 558
_CS_LFS_LDFLAGS, 
# 560
_CS_LFS_LIBS, 
# 562
_CS_LFS_LINTFLAGS, 
# 564
_CS_LFS64_CFLAGS, 
# 566
_CS_LFS64_LDFLAGS, 
# 568
_CS_LFS64_LIBS, 
# 570
_CS_LFS64_LINTFLAGS, 
# 573
_CS_XBS5_ILP32_OFF32_CFLAGS = 1100, 
# 575
_CS_XBS5_ILP32_OFF32_LDFLAGS, 
# 577
_CS_XBS5_ILP32_OFF32_LIBS, 
# 579
_CS_XBS5_ILP32_OFF32_LINTFLAGS, 
# 581
_CS_XBS5_ILP32_OFFBIG_CFLAGS, 
# 583
_CS_XBS5_ILP32_OFFBIG_LDFLAGS, 
# 585
_CS_XBS5_ILP32_OFFBIG_LIBS, 
# 587
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS, 
# 589
_CS_XBS5_LP64_OFF64_CFLAGS, 
# 591
_CS_XBS5_LP64_OFF64_LDFLAGS, 
# 593
_CS_XBS5_LP64_OFF64_LIBS, 
# 595
_CS_XBS5_LP64_OFF64_LINTFLAGS, 
# 597
_CS_XBS5_LPBIG_OFFBIG_CFLAGS, 
# 599
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS, 
# 601
_CS_XBS5_LPBIG_OFFBIG_LIBS, 
# 603
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS, 
# 606
_CS_POSIX_V6_ILP32_OFF32_CFLAGS, 
# 608
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS, 
# 610
_CS_POSIX_V6_ILP32_OFF32_LIBS, 
# 612
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS, 
# 614
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS, 
# 616
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS, 
# 618
_CS_POSIX_V6_ILP32_OFFBIG_LIBS, 
# 620
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS, 
# 622
_CS_POSIX_V6_LP64_OFF64_CFLAGS, 
# 624
_CS_POSIX_V6_LP64_OFF64_LDFLAGS, 
# 626
_CS_POSIX_V6_LP64_OFF64_LIBS, 
# 628
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS, 
# 630
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS, 
# 632
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS, 
# 634
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS, 
# 636
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS, 
# 639
_CS_POSIX_V7_ILP32_OFF32_CFLAGS, 
# 641
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS, 
# 643
_CS_POSIX_V7_ILP32_OFF32_LIBS, 
# 645
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS, 
# 647
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS, 
# 649
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS, 
# 651
_CS_POSIX_V7_ILP32_OFFBIG_LIBS, 
# 653
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS, 
# 655
_CS_POSIX_V7_LP64_OFF64_CFLAGS, 
# 657
_CS_POSIX_V7_LP64_OFF64_LDFLAGS, 
# 659
_CS_POSIX_V7_LP64_OFF64_LIBS, 
# 661
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS, 
# 663
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS, 
# 665
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS, 
# 667
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS, 
# 669
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS, 
# 672
_CS_V6_ENV, 
# 674
_CS_V7_ENV
# 676
}; 
# 612 "/usr/include/unistd.h" 3
extern long pathconf(const char * __path, int __name) throw()
# 613
 __attribute((__nonnull__(1))); 
# 616
extern long fpathconf(int __fd, int __name) throw(); 
# 619
extern long sysconf(int __name) throw(); 
# 623
extern size_t confstr(int __name, char * __buf, size_t __len) throw(); 
# 628
extern __pid_t getpid() throw(); 
# 631
extern __pid_t getppid() throw(); 
# 636
extern __pid_t getpgrp() throw(); 
# 646 "/usr/include/unistd.h" 3
extern __pid_t __getpgid(__pid_t __pid) throw(); 
# 648
extern __pid_t getpgid(__pid_t __pid) throw(); 
# 655
extern int setpgid(__pid_t __pid, __pid_t __pgid) throw(); 
# 672 "/usr/include/unistd.h" 3
extern int setpgrp() throw(); 
# 689 "/usr/include/unistd.h" 3
extern __pid_t setsid() throw(); 
# 693
extern __pid_t getsid(__pid_t __pid) throw(); 
# 697
extern __uid_t getuid() throw(); 
# 700
extern __uid_t geteuid() throw(); 
# 703
extern __gid_t getgid() throw(); 
# 706
extern __gid_t getegid() throw(); 
# 711
extern int getgroups(int __size, __gid_t  __list[]) throw(); 
# 715
extern int group_member(__gid_t __gid) throw(); 
# 722
extern int setuid(__uid_t __uid) throw(); 
# 727
extern int setreuid(__uid_t __ruid, __uid_t __euid) throw(); 
# 732
extern int seteuid(__uid_t __uid) throw(); 
# 739
extern int setgid(__gid_t __gid) throw(); 
# 744
extern int setregid(__gid_t __rgid, __gid_t __egid) throw(); 
# 749
extern int setegid(__gid_t __gid) throw(); 
# 755
extern int getresuid(__uid_t * __ruid, __uid_t * __euid, __uid_t * __suid) throw(); 
# 760
extern int getresgid(__gid_t * __rgid, __gid_t * __egid, __gid_t * __sgid) throw(); 
# 765
extern int setresuid(__uid_t __ruid, __uid_t __euid, __uid_t __suid) throw(); 
# 770
extern int setresgid(__gid_t __rgid, __gid_t __egid, __gid_t __sgid) throw(); 
# 778
extern __pid_t fork() throw(); 
# 786
extern __pid_t vfork() throw(); 
# 792
extern char *ttyname(int __fd) throw(); 
# 796
extern int ttyname_r(int __fd, char * __buf, size_t __buflen) throw()
# 797
 __attribute((__nonnull__(2))); 
# 801
extern int isatty(int __fd) throw(); 
# 807
extern int ttyslot() throw(); 
# 812
extern int link(const char * __from, const char * __to) throw()
# 813
 __attribute((__nonnull__(1, 2))); 
# 818
extern int linkat(int __fromfd, const char * __from, int __tofd, const char * __to, int __flags) throw()
# 820
 __attribute((__nonnull__(2, 4))); 
# 825
extern int symlink(const char * __from, const char * __to) throw()
# 826
 __attribute((__nonnull__(1, 2))); 
# 831
extern ssize_t readlink(const char *__restrict__ __path, char *__restrict__ __buf, size_t __len) throw()
# 833
 __attribute((__nonnull__(1, 2))); 
# 838
extern int symlinkat(const char * __from, int __tofd, const char * __to) throw()
# 839
 __attribute((__nonnull__(1, 3))); 
# 842
extern ssize_t readlinkat(int __fd, const char *__restrict__ __path, char *__restrict__ __buf, size_t __len) throw()
# 844
 __attribute((__nonnull__(2, 3))); 
# 848
extern int unlink(const char * __name) throw() __attribute((__nonnull__(1))); 
# 852
extern int unlinkat(int __fd, const char * __name, int __flag) throw()
# 853
 __attribute((__nonnull__(2))); 
# 857
extern int rmdir(const char * __path) throw() __attribute((__nonnull__(1))); 
# 861
extern __pid_t tcgetpgrp(int __fd) throw(); 
# 864
extern int tcsetpgrp(int __fd, __pid_t __pgrp_id) throw(); 
# 871
extern char *getlogin(); 
# 879
extern int getlogin_r(char * __name, size_t __name_len) __attribute((__nonnull__(1))); 
# 884
extern int setlogin(const char * __name) throw() __attribute((__nonnull__(1))); 
# 49 "/usr/include/getopt.h" 3
extern "C" {
# 58 "/usr/include/getopt.h" 3
extern char *optarg; 
# 72 "/usr/include/getopt.h" 3
extern int optind; 
# 77
extern int opterr; 
# 81
extern int optopt; 
# 151 "/usr/include/getopt.h" 3
extern int getopt(int ___argc, char *const * ___argv, const char * __shortopts) throw(); 
# 186 "/usr/include/getopt.h" 3
}
# 901 "/usr/include/unistd.h" 3
extern int gethostname(char * __name, size_t __len) throw() __attribute((__nonnull__(1))); 
# 908
extern int sethostname(const char * __name, size_t __len) throw()
# 909
 __attribute((__nonnull__(1))); 
# 913
extern int sethostid(long __id) throw(); 
# 919
extern int getdomainname(char * __name, size_t __len) throw()
# 920
 __attribute((__nonnull__(1))); 
# 921
extern int setdomainname(const char * __name, size_t __len) throw()
# 922
 __attribute((__nonnull__(1))); 
# 928
extern int vhangup() throw(); 
# 931
extern int revoke(const char * __file) throw() __attribute((__nonnull__(1))); 
# 939
extern int profil(unsigned short * __sample_buffer, size_t __size, size_t __offset, unsigned __scale) throw()
# 941
 __attribute((__nonnull__(1))); 
# 947
extern int acct(const char * __name) throw(); 
# 951
extern char *getusershell() throw(); 
# 952
extern void endusershell() throw(); 
# 953
extern void setusershell() throw(); 
# 959
extern int daemon(int __nochdir, int __noclose) throw(); 
# 966
extern int chroot(const char * __path) throw() __attribute((__nonnull__(1))); 
# 970
extern char *getpass(const char * __prompt) __attribute((__nonnull__(1))); 
# 978
extern int fsync(int __fd); 
# 984
extern int syncfs(int __fd) throw(); 
# 991
extern long gethostid(); 
# 994
extern void sync() throw(); 
# 1000
extern int getpagesize() throw() __attribute((const)); 
# 1005
extern int getdtablesize() throw(); 
# 1015 "/usr/include/unistd.h" 3
extern int truncate(const char * __file, __off_t __length) throw()
# 1016
 __attribute((__nonnull__(1))); 
# 1027 "/usr/include/unistd.h" 3
extern int truncate64(const char * __file, __off64_t __length) throw()
# 1028
 __attribute((__nonnull__(1))); 
# 1038 "/usr/include/unistd.h" 3
extern int ftruncate(int __fd, __off_t __length) throw(); 
# 1048 "/usr/include/unistd.h" 3
extern int ftruncate64(int __fd, __off64_t __length) throw(); 
# 1059 "/usr/include/unistd.h" 3
extern int brk(void * __addr) throw(); 
# 1065
extern void *sbrk(intptr_t __delta) throw(); 
# 1080 "/usr/include/unistd.h" 3
extern long syscall(long __sysno, ...) throw(); 
# 1103 "/usr/include/unistd.h" 3
extern int lockf(int __fd, int __cmd, __off_t __len); 
# 1113 "/usr/include/unistd.h" 3
extern int lockf64(int __fd, int __cmd, __off64_t __len); 
# 1134 "/usr/include/unistd.h" 3
extern int fdatasync(int __fildes); 
# 1142
extern char *crypt(const char * __key, const char * __salt) throw()
# 1143
 __attribute((__nonnull__(1, 2))); 
# 1147
extern void encrypt(char * __block, int __edflag) throw() __attribute((__nonnull__(1))); 
# 1154
extern void swab(const void *__restrict__ __from, void *__restrict__ __to, ssize_t __n) throw()
# 1155
 __attribute((__nonnull__(1, 2))); 
# 1172 "/usr/include/unistd.h" 3
}
# 29 "/usr/include/stdio.h" 3
extern "C" {
# 44 "/usr/include/stdio.h" 3
struct _IO_FILE; 
# 48
typedef _IO_FILE FILE; 
# 64 "/usr/include/stdio.h" 3
typedef _IO_FILE __FILE; 
# 94 "/usr/include/wchar.h" 3
typedef 
# 83
struct { 
# 84
int __count; 
# 86
union { 
# 88
unsigned __wch; 
# 92
char __wchb[4]; 
# 93
} __value; 
# 94
} __mbstate_t; 
# 25 "/usr/include/_G_config.h" 3
typedef 
# 22
struct { 
# 23
__off_t __pos; 
# 24
__mbstate_t __state; 
# 25
} _G_fpos_t; 
# 30
typedef 
# 27
struct { 
# 28
__off64_t __pos; 
# 29
__mbstate_t __state; 
# 30
} _G_fpos64_t; 
# 40 "/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list; 
# 145 "/usr/include/libio.h" 3
struct _IO_jump_t; struct _IO_FILE; 
# 155 "/usr/include/libio.h" 3
typedef void _IO_lock_t; 
# 161
struct _IO_marker { 
# 162
_IO_marker *_next; 
# 163
_IO_FILE *_sbuf; 
# 167
int _pos; 
# 178 "/usr/include/libio.h" 3
}; 
# 181
enum __codecvt_result { 
# 183
__codecvt_ok, 
# 184
__codecvt_partial, 
# 185
__codecvt_error, 
# 186
__codecvt_noconv
# 187
}; 
# 246 "/usr/include/libio.h" 3
struct _IO_FILE { 
# 247
int _flags; 
# 252
char *_IO_read_ptr; 
# 253
char *_IO_read_end; 
# 254
char *_IO_read_base; 
# 255
char *_IO_write_base; 
# 256
char *_IO_write_ptr; 
# 257
char *_IO_write_end; 
# 258
char *_IO_buf_base; 
# 259
char *_IO_buf_end; 
# 261
char *_IO_save_base; 
# 262
char *_IO_backup_base; 
# 263
char *_IO_save_end; 
# 265
_IO_marker *_markers; 
# 267
_IO_FILE *_chain; 
# 269
int _fileno; 
# 273
int _flags2; 
# 275
__off_t _old_offset; 
# 279
unsigned short _cur_column; 
# 280
signed char _vtable_offset; 
# 281
char _shortbuf[1]; 
# 285
_IO_lock_t *_lock; 
# 294 "/usr/include/libio.h" 3
__off64_t _offset; 
# 303 "/usr/include/libio.h" 3
void *__pad1; 
# 304
void *__pad2; 
# 305
void *__pad3; 
# 306
void *__pad4; 
# 307
size_t __pad5; 
# 309
int _mode; 
# 311
char _unused2[(((15) * sizeof(int)) - ((4) * sizeof(void *))) - sizeof(size_t)]; 
# 313
}; 
# 319
struct _IO_FILE_plus; 
# 321
extern _IO_FILE_plus _IO_2_1_stdin_; 
# 322
extern _IO_FILE_plus _IO_2_1_stdout_; 
# 323
extern _IO_FILE_plus _IO_2_1_stderr_; 
# 339 "/usr/include/libio.h" 3
typedef __ssize_t __io_read_fn(void * __cookie, char * __buf, size_t __nbytes); 
# 347
typedef __ssize_t __io_write_fn(void * __cookie, const char * __buf, size_t __n); 
# 356
typedef int __io_seek_fn(void * __cookie, __off64_t * __pos, int __w); 
# 359
typedef int __io_close_fn(void * __cookie); 
# 364
typedef __io_read_fn cookie_read_function_t; 
# 365
typedef __io_write_fn cookie_write_function_t; 
# 366
typedef __io_seek_fn cookie_seek_function_t; 
# 367
typedef __io_close_fn cookie_close_function_t; 
# 376
typedef 
# 371
struct { 
# 372
__io_read_fn *read; 
# 373
__io_write_fn *write; 
# 374
__io_seek_fn *seek; 
# 375
__io_close_fn *close; 
# 376
} _IO_cookie_io_functions_t; 
# 377
typedef _IO_cookie_io_functions_t cookie_io_functions_t; 
# 379
struct _IO_cookie_file; 
# 382
extern void _IO_cookie_init(_IO_cookie_file * __cfile, int __read_write, void * __cookie, _IO_cookie_io_functions_t __fns); 
# 388
extern "C" {
# 391
extern int __underflow(_IO_FILE *); 
# 392
extern int __uflow(_IO_FILE *); 
# 393
extern int __overflow(_IO_FILE *, int); 
# 435 "/usr/include/libio.h" 3
extern int _IO_getc(_IO_FILE * __fp); 
# 436
extern int _IO_putc(int __c, _IO_FILE * __fp); 
# 437
extern int _IO_feof(_IO_FILE * __fp) throw(); 
# 438
extern int _IO_ferror(_IO_FILE * __fp) throw(); 
# 440
extern int _IO_peekc_locked(_IO_FILE * __fp); 
# 446
extern void _IO_flockfile(_IO_FILE *) throw(); 
# 447
extern void _IO_funlockfile(_IO_FILE *) throw(); 
# 448
extern int _IO_ftrylockfile(_IO_FILE *) throw(); 
# 465 "/usr/include/libio.h" 3
extern int _IO_vfscanf(_IO_FILE *__restrict__, const char *__restrict__, __gnuc_va_list, int *__restrict__); 
# 467
extern int _IO_vfprintf(_IO_FILE *__restrict__, const char *__restrict__, __gnuc_va_list); 
# 469
extern __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t); 
# 470
extern size_t _IO_sgetn(_IO_FILE *, void *, size_t); 
# 472
extern __off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int); 
# 473
extern __off64_t _IO_seekpos(_IO_FILE *, __off64_t, int); 
# 475
extern void _IO_free_backup_area(_IO_FILE *) throw(); 
# 527 "/usr/include/libio.h" 3
}
# 79 "/usr/include/stdio.h" 3
typedef __gnuc_va_list va_list; 
# 110 "/usr/include/stdio.h" 3
typedef _G_fpos_t fpos_t; 
# 116
typedef _G_fpos64_t fpos64_t; 
# 168 "/usr/include/stdio.h" 3
extern _IO_FILE *stdin; 
# 169
extern _IO_FILE *stdout; 
# 170
extern _IO_FILE *stderr; 
# 178
extern int remove(const char * __filename) throw(); 
# 180
extern int rename(const char * __old, const char * __new) throw(); 
# 185
extern int renameat(int __oldfd, const char * __old, int __newfd, const char * __new) throw(); 
# 195
extern FILE *tmpfile(); 
# 205 "/usr/include/stdio.h" 3
extern FILE *tmpfile64(); 
# 209
extern char *tmpnam(char * __s) throw(); 
# 215
extern char *tmpnam_r(char * __s) throw(); 
# 227 "/usr/include/stdio.h" 3
extern char *tempnam(const char * __dir, const char * __pfx) throw()
# 228
 __attribute((__malloc__)); 
# 237
extern int fclose(FILE * __stream); 
# 242
extern int fflush(FILE * __stream); 
# 252 "/usr/include/stdio.h" 3
extern int fflush_unlocked(FILE * __stream); 
# 262 "/usr/include/stdio.h" 3
extern int fcloseall(); 
# 272
extern FILE *fopen(const char *__restrict__ __filename, const char *__restrict__ __modes); 
# 278
extern FILE *freopen(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream); 
# 297 "/usr/include/stdio.h" 3
extern FILE *fopen64(const char *__restrict__ __filename, const char *__restrict__ __modes); 
# 299
extern FILE *freopen64(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream); 
# 306
extern FILE *fdopen(int __fd, const char * __modes) throw(); 
# 312
extern FILE *fopencookie(void *__restrict__ __magic_cookie, const char *__restrict__ __modes, _IO_cookie_io_functions_t __io_funcs) throw(); 
# 319
extern FILE *fmemopen(void * __s, size_t __len, const char * __modes) throw(); 
# 325
extern FILE *open_memstream(char ** __bufloc, size_t * __sizeloc) throw(); 
# 332
extern void setbuf(FILE *__restrict__ __stream, char *__restrict__ __buf) throw(); 
# 336
extern int setvbuf(FILE *__restrict__ __stream, char *__restrict__ __buf, int __modes, size_t __n) throw(); 
# 343
extern void setbuffer(FILE *__restrict__ __stream, char *__restrict__ __buf, size_t __size) throw(); 
# 347
extern void setlinebuf(FILE * __stream) throw(); 
# 356
extern int fprintf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...); 
# 362
extern int printf(const char *__restrict__ __format, ...); 
# 364
extern int sprintf(char *__restrict__ __s, const char *__restrict__ __format, ...) throw(); 
# 371
extern int vfprintf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg); 
# 377
extern __attribute((gnu_inline)) inline int vprintf(const char *__restrict__ __format, __gnuc_va_list __arg); 
# 379
extern int vsprintf(char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 386
extern int snprintf(char *__restrict__ __s, size_t __maxlen, const char *__restrict__ __format, ...) throw()
# 388
 __attribute((__format__(__printf__, 3, 4))); 
# 390
extern int vsnprintf(char *__restrict__ __s, size_t __maxlen, const char *__restrict__ __format, __gnuc_va_list __arg) throw()
# 392
 __attribute((__format__(__printf__, 3, 0))); 
# 399
extern int vasprintf(char **__restrict__ __ptr, const char *__restrict__ __f, __gnuc_va_list __arg) throw()
# 401
 __attribute((__format__(__printf__, 2, 0))); 
# 402
extern int __asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw()
# 404
 __attribute((__format__(__printf__, 2, 3))); 
# 405
extern int asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw()
# 407
 __attribute((__format__(__printf__, 2, 3))); 
# 412
extern int vdprintf(int __fd, const char *__restrict__ __fmt, __gnuc_va_list __arg)
# 414
 __attribute((__format__(__printf__, 2, 0))); 
# 415
extern int dprintf(int __fd, const char *__restrict__ __fmt, ...)
# 416
 __attribute((__format__(__printf__, 2, 3))); 
# 425
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...); 
# 431
extern int scanf(const char *__restrict__ __format, ...); 
# 433
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) throw(); 
# 471 "/usr/include/stdio.h" 3
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg)
# 473
 __attribute((__format__(__scanf__, 2, 0))); 
# 479
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg)
# 480
 __attribute((__format__(__scanf__, 1, 0))); 
# 483
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw()
# 485
 __attribute((__format__(__scanf__, 2, 0))); 
# 531 "/usr/include/stdio.h" 3
extern int fgetc(FILE * __stream); 
# 532
extern int getc(FILE * __stream); 
# 538
extern __attribute((gnu_inline)) inline int getchar(); 
# 550 "/usr/include/stdio.h" 3
extern __attribute((gnu_inline)) inline int getc_unlocked(FILE * __stream); 
# 551
extern __attribute((gnu_inline)) inline int getchar_unlocked(); 
# 561 "/usr/include/stdio.h" 3
extern __attribute((gnu_inline)) inline int fgetc_unlocked(FILE * __stream); 
# 573
extern int fputc(int __c, FILE * __stream); 
# 574
extern int putc(int __c, FILE * __stream); 
# 580
extern __attribute((gnu_inline)) inline int putchar(int __c); 
# 594 "/usr/include/stdio.h" 3
extern __attribute((gnu_inline)) inline int fputc_unlocked(int __c, FILE * __stream); 
# 602
extern __attribute((gnu_inline)) inline int putc_unlocked(int __c, FILE * __stream); 
# 603
extern __attribute((gnu_inline)) inline int putchar_unlocked(int __c); 
# 610
extern int getw(FILE * __stream); 
# 613
extern int putw(int __w, FILE * __stream); 
# 622
extern char *fgets(char *__restrict__ __s, int __n, FILE *__restrict__ __stream); 
# 638 "/usr/include/stdio.h" 3
extern char *gets(char * __s) __attribute((__deprecated__)); 
# 649 "/usr/include/stdio.h" 3
extern char *fgets_unlocked(char *__restrict__ __s, int __n, FILE *__restrict__ __stream); 
# 665 "/usr/include/stdio.h" 3
extern __ssize_t __getdelim(char **__restrict__ __lineptr, size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream); 
# 668
extern __ssize_t getdelim(char **__restrict__ __lineptr, size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream); 
# 678
extern __attribute((gnu_inline)) inline __ssize_t getline(char **__restrict__ __lineptr, size_t *__restrict__ __n, FILE *__restrict__ __stream); 
# 689
extern int fputs(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 695
extern int puts(const char * __s); 
# 702
extern int ungetc(int __c, FILE * __stream); 
# 709
extern size_t fread(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 715
extern size_t fwrite(const void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __s); 
# 726 "/usr/include/stdio.h" 3
extern int fputs_unlocked(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 737 "/usr/include/stdio.h" 3
extern size_t fread_unlocked(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 739
extern size_t fwrite_unlocked(const void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 749
extern int fseek(FILE * __stream, long __off, int __whence); 
# 754
extern long ftell(FILE * __stream); 
# 759
extern void rewind(FILE * __stream); 
# 773 "/usr/include/stdio.h" 3
extern int fseeko(FILE * __stream, __off_t __off, int __whence); 
# 778
extern __off_t ftello(FILE * __stream); 
# 798 "/usr/include/stdio.h" 3
extern int fgetpos(FILE *__restrict__ __stream, fpos_t *__restrict__ __pos); 
# 803
extern int fsetpos(FILE * __stream, const fpos_t * __pos); 
# 818 "/usr/include/stdio.h" 3
extern int fseeko64(FILE * __stream, __off64_t __off, int __whence); 
# 819
extern __off64_t ftello64(FILE * __stream); 
# 820
extern int fgetpos64(FILE *__restrict__ __stream, fpos64_t *__restrict__ __pos); 
# 821
extern int fsetpos64(FILE * __stream, const fpos64_t * __pos); 
# 826
extern void clearerr(FILE * __stream) throw(); 
# 828
extern int feof(FILE * __stream) throw(); 
# 830
extern int ferror(FILE * __stream) throw(); 
# 835
extern void clearerr_unlocked(FILE * __stream) throw(); 
# 836
extern __attribute((gnu_inline)) inline int feof_unlocked(FILE * __stream) throw(); 
# 837
extern __attribute((gnu_inline)) inline int ferror_unlocked(FILE * __stream) throw(); 
# 846
extern void perror(const char * __s); 
# 26 "/usr/include/bits/sys_errlist.h" 3
extern int sys_nerr; 
# 27
extern const char *const sys_errlist[]; 
# 30
extern int _sys_nerr; 
# 31
extern const char *const _sys_errlist[]; 
# 858 "/usr/include/stdio.h" 3
extern int fileno(FILE * __stream) throw(); 
# 863
extern int fileno_unlocked(FILE * __stream) throw(); 
# 873 "/usr/include/stdio.h" 3
extern FILE *popen(const char * __command, const char * __modes); 
# 879
extern int pclose(FILE * __stream); 
# 885
extern char *ctermid(char * __s) throw(); 
# 891
extern char *cuserid(char * __s); 
# 896
struct obstack; 
# 899
extern int obstack_printf(obstack *__restrict__ __obstack, const char *__restrict__ __format, ...) throw()
# 901
 __attribute((__format__(__printf__, 2, 3))); 
# 902
extern int obstack_vprintf(obstack *__restrict__ __obstack, const char *__restrict__ __format, __gnuc_va_list __args) throw()
# 905
 __attribute((__format__(__printf__, 2, 0))); 
# 913
extern void flockfile(FILE * __stream) throw(); 
# 917
extern int ftrylockfile(FILE * __stream) throw(); 
# 920
extern void funlockfile(FILE * __stream) throw(); 
# 35 "/usr/include/bits/stdio.h" 3
__attribute((__gnu_inline__)) extern inline int 
# 36
vprintf(const char *__restrict__ __fmt, __gnuc_va_list __arg) 
# 37
{ 
# 38
return vfprintf(stdout, __fmt, __arg); 
# 39
} 
# 43
__attribute((__gnu_inline__)) extern inline int 
# 44
getchar() 
# 45
{ 
# 46
return _IO_getc(stdin); 
# 47
} 
# 52
__attribute((__gnu_inline__)) extern inline int 
# 53
fgetc_unlocked(FILE *__fp) 
# 54
{ 
# 55
return (__builtin_expect((__fp->_IO_read_ptr) >= (__fp->_IO_read_end), 0)) ? __uflow(__fp) : (*((unsigned char *)((__fp->_IO_read_ptr)++))); 
# 56
} 
# 62
__attribute((__gnu_inline__)) extern inline int 
# 63
getc_unlocked(FILE *__fp) 
# 64
{ 
# 65
return (__builtin_expect((__fp->_IO_read_ptr) >= (__fp->_IO_read_end), 0)) ? __uflow(__fp) : (*((unsigned char *)((__fp->_IO_read_ptr)++))); 
# 66
} 
# 69
__attribute((__gnu_inline__)) extern inline int 
# 70
getchar_unlocked() 
# 71
{ 
# 72
return (__builtin_expect((stdin->_IO_read_ptr) >= (stdin->_IO_read_end), 0)) ? __uflow(stdin) : (*((unsigned char *)((stdin->_IO_read_ptr)++))); 
# 73
} 
# 78
__attribute((__gnu_inline__)) extern inline int 
# 79
putchar(int __c) 
# 80
{ 
# 81
return _IO_putc(__c, stdout); 
# 82
} 
# 87
__attribute((__gnu_inline__)) extern inline int 
# 88
fputc_unlocked(int __c, FILE *__stream) 
# 89
{ 
# 90
return (__builtin_expect((__stream->_IO_write_ptr) >= (__stream->_IO_write_end), 0)) ? __overflow(__stream, (unsigned char)__c) : ((unsigned char)((*((__stream->_IO_write_ptr)++)) = __c)); 
# 91
} 
# 97
__attribute((__gnu_inline__)) extern inline int 
# 98
putc_unlocked(int __c, FILE *__stream) 
# 99
{ 
# 100
return (__builtin_expect((__stream->_IO_write_ptr) >= (__stream->_IO_write_end), 0)) ? __overflow(__stream, (unsigned char)__c) : ((unsigned char)((*((__stream->_IO_write_ptr)++)) = __c)); 
# 101
} 
# 104
__attribute((__gnu_inline__)) extern inline int 
# 105
putchar_unlocked(int __c) 
# 106
{ 
# 107
return (__builtin_expect((stdout->_IO_write_ptr) >= (stdout->_IO_write_end), 0)) ? __overflow(stdout, (unsigned char)__c) : ((unsigned char)((*((stdout->_IO_write_ptr)++)) = __c)); 
# 108
} 
# 114
__attribute((__gnu_inline__)) extern inline __ssize_t 
# 115
getline(char **__lineptr, size_t *__n, FILE *__stream) 
# 116
{ 
# 117
return __getdelim(__lineptr, __n, '\n', __stream); 
# 118
} 
# 124
__attribute((__gnu_inline__)) extern inline int
# 125
 __attribute((__leaf__)) feof_unlocked(FILE *__stream) throw() 
# 126
{ 
# 127
return ((__stream->_flags) & 16) != 0; 
# 128
} 
# 131
__attribute((__gnu_inline__)) extern inline int
# 132
 __attribute((__leaf__)) ferror_unlocked(FILE *__stream) throw() 
# 133
{ 
# 134
return ((__stream->_flags) & 32) != 0; 
# 135
} 
# 943 "/usr/include/stdio.h" 3
}
# 48 "/usr/include/stdint.h" 3
typedef unsigned char uint8_t; 
# 49
typedef unsigned short uint16_t; 
# 51
typedef unsigned uint32_t; 
# 55
typedef unsigned long uint64_t; 
# 65 "/usr/include/stdint.h" 3
typedef signed char int_least8_t; 
# 66
typedef short int_least16_t; 
# 67
typedef int int_least32_t; 
# 69
typedef long int_least64_t; 
# 76
typedef unsigned char uint_least8_t; 
# 77
typedef unsigned short uint_least16_t; 
# 78
typedef unsigned uint_least32_t; 
# 80
typedef unsigned long uint_least64_t; 
# 90 "/usr/include/stdint.h" 3
typedef signed char int_fast8_t; 
# 92
typedef long int_fast16_t; 
# 93
typedef long int_fast32_t; 
# 94
typedef long int_fast64_t; 
# 103 "/usr/include/stdint.h" 3
typedef unsigned char uint_fast8_t; 
# 105
typedef unsigned long uint_fast16_t; 
# 106
typedef unsigned long uint_fast32_t; 
# 107
typedef unsigned long uint_fast64_t; 
# 122 "/usr/include/stdint.h" 3
typedef unsigned long uintptr_t; 
# 134 "/usr/include/stdint.h" 3
typedef long intmax_t; 
# 135
typedef unsigned long uintmax_t; 
# 136 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/include/zfp.h"
typedef 
# 132
enum { 
# 133
zfp_exec_serial, 
# 134
zfp_exec_omp, 
# 135
zfp_exec_cuda
# 136
} zfp_exec_policy; 
# 142
typedef 
# 139
struct { 
# 140
uint threads; 
# 141
uint chunk_size; 
# 142
} zfp_exec_params_omp; 
# 147
typedef 
# 145
union { 
# 146
zfp_exec_params_omp omp; 
# 147
} zfp_exec_params; 
# 152
typedef 
# 149
struct { 
# 150
zfp_exec_policy policy; 
# 151
zfp_exec_params params; 
# 152
} zfp_execution; 
# 162
typedef 
# 155
struct { 
# 156
uint minbits; 
# 157
uint maxbits; 
# 158
uint maxprec; 
# 159
int minexp; 
# 160
bitstream *stream; 
# 161
zfp_execution exec; 
# 162
} zfp_stream; 
# 172
typedef 
# 165
enum { 
# 166
zfp_mode_null, 
# 167
zfp_mode_expert, 
# 168
zfp_mode_fixed_rate, 
# 169
zfp_mode_fixed_precision, 
# 170
zfp_mode_fixed_accuracy, 
# 171
zfp_mode_reversible
# 172
} zfp_mode; 
# 181
typedef 
# 175
enum { 
# 176
zfp_type_none, 
# 177
zfp_type_int32, 
# 178
zfp_type_int64, 
# 179
zfp_type_float, 
# 180
zfp_type_double
# 181
} zfp_type; 
# 189
typedef 
# 184
struct { 
# 185
zfp_type type; 
# 186
uint nx, ny, nz, nw; 
# 187
int sx, sy, sz, sw; 
# 188
void *data; 
# 189
} zfp_field; 
# 192
extern "C" {
# 197
extern const uint zfp_codec_version; 
# 198
extern const uint zfp_library_version; 
# 199
extern const char *const zfp_version_string; 
# 204
size_t zfp_type_size(zfp_type type); 
# 212
zfp_stream *zfp_stream_open(bitstream * stream); 
# 218
void zfp_stream_close(zfp_stream * stream); 
# 226
bitstream *zfp_stream_bit_stream(const zfp_stream * stream); 
# 232
zfp_mode zfp_stream_compression_mode(const zfp_stream * stream); 
# 238
uint64 zfp_stream_mode(const zfp_stream * stream); 
# 244
void zfp_stream_params(const zfp_stream * stream, uint * minbits, uint * maxbits, uint * maxprec, int * minexp); 
# 254
size_t zfp_stream_compressed_size(const zfp_stream * stream); 
# 260
size_t zfp_stream_maximum_size(const zfp_stream * stream, const zfp_field * field); 
# 269
void zfp_stream_rewind(zfp_stream * stream); 
# 275
void zfp_stream_set_bit_stream(zfp_stream * stream, bitstream * bs); 
# 282
void zfp_stream_set_reversible(zfp_stream * stream); 
# 288
double zfp_stream_set_rate(zfp_stream * stream, double rate, zfp_type type, uint dims, int wra); 
# 298
uint zfp_stream_set_precision(zfp_stream * stream, uint precision); 
# 305
double zfp_stream_set_accuracy(zfp_stream * stream, double tolerance); 
# 312
zfp_mode zfp_stream_set_mode(zfp_stream * stream, uint64 mode); 
# 319
int zfp_stream_set_params(zfp_stream * stream, uint minbits, uint maxbits, uint maxprec, int minexp); 
# 331
zfp_exec_policy zfp_stream_execution(const zfp_stream * stream); 
# 337
uint zfp_stream_omp_threads(const zfp_stream * stream); 
# 343
uint zfp_stream_omp_chunk_size(const zfp_stream * stream); 
# 349
int zfp_stream_set_execution(zfp_stream * stream, zfp_exec_policy policy); 
# 356
int zfp_stream_set_omp_threads(zfp_stream * stream, uint threads); 
# 363
int zfp_stream_set_omp_chunk_size(zfp_stream * stream, uint chunk_size); 
# 372
zfp_field *zfp_field_alloc(); 
# 376
zfp_field *zfp_field_1d(void * pointer, zfp_type type, uint nx); 
# 384
zfp_field *zfp_field_2d(void * pointer, zfp_type type, uint nx, uint ny); 
# 393
zfp_field *zfp_field_3d(void * pointer, zfp_type type, uint nx, uint ny, uint nz); 
# 403
zfp_field *zfp_field_4d(void * pointer, zfp_type type, uint nx, uint ny, uint nz, uint nw); 
# 414
void zfp_field_free(zfp_field * field); 
# 422
void *zfp_field_pointer(const zfp_field * field); 
# 428
zfp_type zfp_field_type(const zfp_field * field); 
# 434
uint zfp_field_precision(const zfp_field * field); 
# 440
uint zfp_field_dimensionality(const zfp_field * field); 
# 446
size_t zfp_field_size(const zfp_field * field, uint * size); 
# 453
int zfp_field_stride(const zfp_field * field, int * stride); 
# 460
uint64 zfp_field_metadata(const zfp_field * field); 
# 468
void zfp_field_set_pointer(zfp_field * field, void * pointer); 
# 475
zfp_type zfp_field_set_type(zfp_field * field, zfp_type type); 
# 482
void zfp_field_set_size_1d(zfp_field * field, uint nx); 
# 489
void zfp_field_set_size_2d(zfp_field * field, uint nx, uint ny); 
# 497
void zfp_field_set_size_3d(zfp_field * field, uint nx, uint ny, uint nz); 
# 506
void zfp_field_set_size_4d(zfp_field * field, uint nx, uint ny, uint nz, uint nw); 
# 516
void zfp_field_set_stride_1d(zfp_field * field, int sx); 
# 523
void zfp_field_set_stride_2d(zfp_field * field, int sx, int sy); 
# 531
void zfp_field_set_stride_3d(zfp_field * field, int sx, int sy, int sz); 
# 540
void zfp_field_set_stride_4d(zfp_field * field, int sx, int sy, int sz, int sw); 
# 550
int zfp_field_set_metadata(zfp_field * field, uint64 meta); 
# 559
size_t zfp_compress(zfp_stream * stream, const zfp_field * field); 
# 566
size_t zfp_decompress(zfp_stream * stream, zfp_field * field); 
# 573
size_t zfp_write_header(zfp_stream * stream, const zfp_field * field, uint mask); 
# 581
size_t zfp_read_header(zfp_stream * stream, zfp_field * field, uint mask); 
# 591
size_t zfp_stream_flush(zfp_stream * stream); 
# 597
size_t zfp_stream_align(zfp_stream * stream); 
# 614 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/include/zfp.h"
uint zfp_encode_block_int32_1(zfp_stream * stream, const int32 * block); 
# 615
uint zfp_encode_block_int64_1(zfp_stream * stream, const int64 * block); 
# 616
uint zfp_encode_block_float_1(zfp_stream * stream, const float * block); 
# 617
uint zfp_encode_block_double_1(zfp_stream * stream, const double * block); 
# 620
uint zfp_encode_block_strided_int32_1(zfp_stream * stream, const int32 * p, int sx); 
# 621
uint zfp_encode_block_strided_int64_1(zfp_stream * stream, const int64 * p, int sx); 
# 622
uint zfp_encode_block_strided_float_1(zfp_stream * stream, const float * p, int sx); 
# 623
uint zfp_encode_block_strided_double_1(zfp_stream * stream, const double * p, int sx); 
# 624
uint zfp_encode_partial_block_strided_int32_1(zfp_stream * stream, const int32 * p, uint nx, int sx); 
# 625
uint zfp_encode_partial_block_strided_int64_1(zfp_stream * stream, const int64 * p, uint nx, int sx); 
# 626
uint zfp_encode_partial_block_strided_float_1(zfp_stream * stream, const float * p, uint nx, int sx); 
# 627
uint zfp_encode_partial_block_strided_double_1(zfp_stream * stream, const double * p, uint nx, int sx); 
# 630
uint zfp_encode_block_int32_2(zfp_stream * stream, const int32 * block); 
# 631
uint zfp_encode_block_int64_2(zfp_stream * stream, const int64 * block); 
# 632
uint zfp_encode_block_float_2(zfp_stream * stream, const float * block); 
# 633
uint zfp_encode_block_double_2(zfp_stream * stream, const double * block); 
# 636
uint zfp_encode_partial_block_strided_int32_2(zfp_stream * stream, const int32 * p, uint nx, uint ny, int sx, int sy); 
# 637
uint zfp_encode_partial_block_strided_int64_2(zfp_stream * stream, const int64 * p, uint nx, uint ny, int sx, int sy); 
# 638
uint zfp_encode_partial_block_strided_float_2(zfp_stream * stream, const float * p, uint nx, uint ny, int sx, int sy); 
# 639
uint zfp_encode_partial_block_strided_double_2(zfp_stream * stream, const double * p, uint nx, uint ny, int sx, int sy); 
# 640
uint zfp_encode_block_strided_int32_2(zfp_stream * stream, const int32 * p, int sx, int sy); 
# 641
uint zfp_encode_block_strided_int64_2(zfp_stream * stream, const int64 * p, int sx, int sy); 
# 642
uint zfp_encode_block_strided_float_2(zfp_stream * stream, const float * p, int sx, int sy); 
# 643
uint zfp_encode_block_strided_double_2(zfp_stream * stream, const double * p, int sx, int sy); 
# 646
uint zfp_encode_block_int32_3(zfp_stream * stream, const int32 * block); 
# 647
uint zfp_encode_block_int64_3(zfp_stream * stream, const int64 * block); 
# 648
uint zfp_encode_block_float_3(zfp_stream * stream, const float * block); 
# 649
uint zfp_encode_block_double_3(zfp_stream * stream, const double * block); 
# 652
uint zfp_encode_block_strided_int32_3(zfp_stream * stream, const int32 * p, int sx, int sy, int sz); 
# 653
uint zfp_encode_block_strided_int64_3(zfp_stream * stream, const int64 * p, int sx, int sy, int sz); 
# 654
uint zfp_encode_block_strided_float_3(zfp_stream * stream, const float * p, int sx, int sy, int sz); 
# 655
uint zfp_encode_block_strided_double_3(zfp_stream * stream, const double * p, int sx, int sy, int sz); 
# 656
uint zfp_encode_partial_block_strided_int32_3(zfp_stream * stream, const int32 * p, uint nx, uint ny, uint nz, int sx, int sy, int sz); 
# 657
uint zfp_encode_partial_block_strided_int64_3(zfp_stream * stream, const int64 * p, uint nx, uint ny, uint nz, int sx, int sy, int sz); 
# 658
uint zfp_encode_partial_block_strided_float_3(zfp_stream * stream, const float * p, uint nx, uint ny, uint nz, int sx, int sy, int sz); 
# 659
uint zfp_encode_partial_block_strided_double_3(zfp_stream * stream, const double * p, uint nx, uint ny, uint nz, int sx, int sy, int sz); 
# 662
uint zfp_encode_block_int32_4(zfp_stream * stream, const int32 * block); 
# 663
uint zfp_encode_block_int64_4(zfp_stream * stream, const int64 * block); 
# 664
uint zfp_encode_block_float_4(zfp_stream * stream, const float * block); 
# 665
uint zfp_encode_block_double_4(zfp_stream * stream, const double * block); 
# 668
uint zfp_encode_block_strided_int32_4(zfp_stream * stream, const int32 * p, int sx, int sy, int sz, int sw); 
# 669
uint zfp_encode_block_strided_int64_4(zfp_stream * stream, const int64 * p, int sx, int sy, int sz, int sw); 
# 670
uint zfp_encode_block_strided_float_4(zfp_stream * stream, const float * p, int sx, int sy, int sz, int sw); 
# 671
uint zfp_encode_block_strided_double_4(zfp_stream * stream, const double * p, int sx, int sy, int sz, int sw); 
# 672
uint zfp_encode_partial_block_strided_int32_4(zfp_stream * stream, const int32 * p, uint nx, uint ny, uint nz, uint nw, int sx, int sy, int sz, int sw); 
# 673
uint zfp_encode_partial_block_strided_int64_4(zfp_stream * stream, const int64 * p, uint nx, uint ny, uint nz, uint nw, int sx, int sy, int sz, int sw); 
# 674
uint zfp_encode_partial_block_strided_float_4(zfp_stream * stream, const float * p, uint nx, uint ny, uint nz, uint nw, int sx, int sy, int sz, int sw); 
# 675
uint zfp_encode_partial_block_strided_double_4(zfp_stream * stream, const double * p, uint nx, uint ny, uint nz, uint nw, int sx, int sy, int sz, int sw); 
# 686 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/include/zfp.h"
uint zfp_decode_block_int32_1(zfp_stream * stream, int32 * block); 
# 687
uint zfp_decode_block_int64_1(zfp_stream * stream, int64 * block); 
# 688
uint zfp_decode_block_float_1(zfp_stream * stream, float * block); 
# 689
uint zfp_decode_block_double_1(zfp_stream * stream, double * block); 
# 692
uint zfp_decode_block_strided_int32_1(zfp_stream * stream, int32 * p, int sx); 
# 693
uint zfp_decode_block_strided_int64_1(zfp_stream * stream, int64 * p, int sx); 
# 694
uint zfp_decode_block_strided_float_1(zfp_stream * stream, float * p, int sx); 
# 695
uint zfp_decode_block_strided_double_1(zfp_stream * stream, double * p, int sx); 
# 696
uint zfp_decode_partial_block_strided_int32_1(zfp_stream * stream, int32 * p, uint nx, int sx); 
# 697
uint zfp_decode_partial_block_strided_int64_1(zfp_stream * stream, int64 * p, uint nx, int sx); 
# 698
uint zfp_decode_partial_block_strided_float_1(zfp_stream * stream, float * p, uint nx, int sx); 
# 699
uint zfp_decode_partial_block_strided_double_1(zfp_stream * stream, double * p, uint nx, int sx); 
# 702
uint zfp_decode_block_int32_2(zfp_stream * stream, int32 * block); 
# 703
uint zfp_decode_block_int64_2(zfp_stream * stream, int64 * block); 
# 704
uint zfp_decode_block_float_2(zfp_stream * stream, float * block); 
# 705
uint zfp_decode_block_double_2(zfp_stream * stream, double * block); 
# 708
uint zfp_decode_block_strided_int32_2(zfp_stream * stream, int32 * p, int sx, int sy); 
# 709
uint zfp_decode_block_strided_int64_2(zfp_stream * stream, int64 * p, int sx, int sy); 
# 710
uint zfp_decode_block_strided_float_2(zfp_stream * stream, float * p, int sx, int sy); 
# 711
uint zfp_decode_block_strided_double_2(zfp_stream * stream, double * p, int sx, int sy); 
# 712
uint zfp_decode_partial_block_strided_int32_2(zfp_stream * stream, int32 * p, uint nx, uint ny, int sx, int sy); 
# 713
uint zfp_decode_partial_block_strided_int64_2(zfp_stream * stream, int64 * p, uint nx, uint ny, int sx, int sy); 
# 714
uint zfp_decode_partial_block_strided_float_2(zfp_stream * stream, float * p, uint nx, uint ny, int sx, int sy); 
# 715
uint zfp_decode_partial_block_strided_double_2(zfp_stream * stream, double * p, uint nx, uint ny, int sx, int sy); 
# 718
uint zfp_decode_block_int32_3(zfp_stream * stream, int32 * block); 
# 719
uint zfp_decode_block_int64_3(zfp_stream * stream, int64 * block); 
# 720
uint zfp_decode_block_float_3(zfp_stream * stream, float * block); 
# 721
uint zfp_decode_block_double_3(zfp_stream * stream, double * block); 
# 724
uint zfp_decode_block_strided_int32_3(zfp_stream * stream, int32 * p, int sx, int sy, int sz); 
# 725
uint zfp_decode_block_strided_int64_3(zfp_stream * stream, int64 * p, int sx, int sy, int sz); 
# 726
uint zfp_decode_block_strided_float_3(zfp_stream * stream, float * p, int sx, int sy, int sz); 
# 727
uint zfp_decode_block_strided_double_3(zfp_stream * stream, double * p, int sx, int sy, int sz); 
# 728
uint zfp_decode_partial_block_strided_int32_3(zfp_stream * stream, int32 * p, uint nx, uint ny, uint nz, int sx, int sy, int sz); 
# 729
uint zfp_decode_partial_block_strided_int64_3(zfp_stream * stream, int64 * p, uint nx, uint ny, uint nz, int sx, int sy, int sz); 
# 730
uint zfp_decode_partial_block_strided_float_3(zfp_stream * stream, float * p, uint nx, uint ny, uint nz, int sx, int sy, int sz); 
# 731
uint zfp_decode_partial_block_strided_double_3(zfp_stream * stream, double * p, uint nx, uint ny, uint nz, int sx, int sy, int sz); 
# 734
uint zfp_decode_block_int32_4(zfp_stream * stream, int32 * block); 
# 735
uint zfp_decode_block_int64_4(zfp_stream * stream, int64 * block); 
# 736
uint zfp_decode_block_float_4(zfp_stream * stream, float * block); 
# 737
uint zfp_decode_block_double_4(zfp_stream * stream, double * block); 
# 740
uint zfp_decode_block_strided_int32_4(zfp_stream * stream, int32 * p, int sx, int sy, int sz, int sw); 
# 741
uint zfp_decode_block_strided_int64_4(zfp_stream * stream, int64 * p, int sx, int sy, int sz, int sw); 
# 742
uint zfp_decode_block_strided_float_4(zfp_stream * stream, float * p, int sx, int sy, int sz, int sw); 
# 743
uint zfp_decode_block_strided_double_4(zfp_stream * stream, double * p, int sx, int sy, int sz, int sw); 
# 744
uint zfp_decode_partial_block_strided_int32_4(zfp_stream * stream, int32 * p, uint nx, uint ny, uint nz, uint nw, int sx, int sy, int sz, int sw); 
# 745
uint zfp_decode_partial_block_strided_int64_4(zfp_stream * stream, int64 * p, uint nx, uint ny, uint nz, uint nw, int sx, int sy, int sz, int sw); 
# 746
uint zfp_decode_partial_block_strided_float_4(zfp_stream * stream, float * p, uint nx, uint ny, uint nz, uint nw, int sx, int sy, int sz, int sw); 
# 747
uint zfp_decode_partial_block_strided_double_4(zfp_stream * stream, double * p, uint nx, uint ny, uint nz, uint nw, int sx, int sy, int sz, int sw); 
# 752
void zfp_promote_int8_to_int32(int32 * oblock, const int8 * iblock, uint dims); 
# 753
void zfp_promote_uint8_to_int32(int32 * oblock, const uint8 * iblock, uint dims); 
# 754
void zfp_promote_int16_to_int32(int32 * oblock, const int16 * iblock, uint dims); 
# 755
void zfp_promote_uint16_to_int32(int32 * oblock, const uint16 * iblock, uint dims); 
# 758
void zfp_demote_int32_to_int8(int8 * oblock, const int32 * iblock, uint dims); 
# 759
void zfp_demote_int32_to_uint8(uint8 * oblock, const int32 * iblock, uint dims); 
# 760
void zfp_demote_int32_to_int16(int16 * oblock, const int32 * iblock, uint dims); 
# 761
void zfp_demote_int32_to_uint16(uint16 * oblock, const int32 * iblock, uint dims); 
# 764
}
# 770
timeval expCostS; 
# 771
timeval expCostE; 
# 772
timeval mCostS; 
# 773
timeval mCostE; 
# 774
timeval xCostS; 
# 775
timeval xCostE; 
# 776
timeval oCostS; 
# 777
timeval oCostE; 
# 778
timeval enCostS; 
# 779
timeval enCostE; 
# 7 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/cuZFP.h"
extern "C" {
# 9
size_t cuda_compress(zfp_stream * stream, const zfp_field * field); 
# 10
void cuda_decompress(zfp_stream * stream, zfp_field * field); 
# 12
}
# 5 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
typedef unsigned long long Word; 
# 4 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/type_info.cuh"
namespace cuZFP { 
# 6
template< class T> inline int get_ebias(); 
# 7
template<> inline int get_ebias< double> () { return 1023; } 
# 8
template<> inline int get_ebias< float> () { return 127; } 
# 9
template<> inline int get_ebias< long long> () { return 0; } 
# 10
template<> inline int get_ebias< int> () { return 0; } 
# 12
template< class T> inline int get_ebits(); 
# 13
template<> inline int get_ebits< double> () { return 11; } 
# 14
template<> inline int get_ebits< float> () { return 8; } 
# 15
template<> inline int get_ebits< int> () { return 0; } 
# 16
template<> inline int get_ebits< long long> () { return 0; } 
# 18
template< class T> inline int get_precision(); 
# 19
template<> inline int get_precision< double> () { return 64; } 
# 20
template<> inline int get_precision< long long> () { return 64; } 
# 21
template<> inline int get_precision< float> () { return 32; } 
# 22
template<> inline int get_precision< int> () { return 32; } 
# 24
template< class T> inline int get_min_exp(); 
# 25
template<> inline int get_min_exp< double> () { return -1074; } 
# 26
template<> inline int get_min_exp< float> () { return -1074; } 
# 27
template<> inline int get_min_exp< long long> () { return 0; } 
# 28
template<> inline int get_min_exp< int> () { return 0; } 
# 30
template< class T> inline int scalar_sizeof(); 
# 32
template<> inline int scalar_sizeof< double> () { return 8; } 
# 33
template<> inline int scalar_sizeof< long long> () { return 8; } 
# 34
template<> inline int scalar_sizeof< float> () { return 4; } 
# 35
template<> inline int scalar_sizeof< int> () { return 4; } 
# 37
template< class T> struct zfp_traits; 
# 39
template<> struct zfp_traits< double>  { 
# 41
typedef unsigned long long UInt; 
# 42
typedef long long Int; 
# 43
}; 
# 45
template<> struct zfp_traits< long long>  { 
# 47
typedef unsigned long long UInt; 
# 48
typedef long long Int; 
# 49
}; 
# 51
template<> struct zfp_traits< float>  { 
# 53
typedef unsigned UInt; 
# 54
typedef int Int; 
# 55
}; 
# 57
template<> struct zfp_traits< int>  { 
# 59
typedef unsigned UInt; 
# 60
typedef int Int; 
# 61
}; 
# 63
template< class T> inline bool is_int() 
# 64
{ 
# 65
return false; 
# 66
} 
# 68
template<> inline bool is_int< int> () 
# 69
{ 
# 70
return true; 
# 71
} 
# 73
template<> inline bool is_int< long long> () 
# 74
{ 
# 75
return true; 
# 76
} 
# 78
template< int T> struct block_traits; 
# 80
template<> struct block_traits< 1>  { 
# 82
typedef unsigned char PlaneType; 
# 83
}; 
# 85
template<> struct block_traits< 2>  { 
# 87
typedef unsigned short PlaneType; 
# 88
}; 
# 91
}
# 20 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
static unsigned char c_perm_1[4]; 
# 21
static unsigned char c_perm_2[16]; 
# 22
static unsigned char c_perm[64]; 
# 24
namespace cuZFP { 
# 27
template< class T> __attribute__((unused)) void 
# 28
print_bits(const T &bits) 
# 29
{int volatile ___ = 1;(void)bits;
# 40
::exit(___);}
#if 0
# 29
{ 
# 30
const int bit_size = (sizeof(T) * (8)); 
# 32
for (int i = (bit_size - 1); i >= 0; --i) 
# 33
{ 
# 34
T one = (1); 
# 35
T mask = one << i; 
# 36
T val = (bits & mask) >> i; 
# 37
printf("%d", (int)val); 
# 38
}  
# 39
printf("\n"); 
# 40
} 
#endif
# 42 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
size_t calc_device_mem1d(const int dim, const int 
# 43
maxbits) 
# 44
{ 
# 46
const size_t vals_per_block = (4); 
# 47
size_t total_blocks = dim / vals_per_block; 
# 48
if ((dim % vals_per_block) != (0)) 
# 49
{ 
# 50
total_blocks++; 
# 51
}  
# 52
const size_t bits_per_block = maxbits; 
# 53
const size_t bits_per_word = (sizeof(Word) * (8)); 
# 54
const size_t total_bits = bits_per_block * total_blocks; 
# 55
size_t alloc_size = total_bits / bits_per_word; 
# 56
if ((total_bits % bits_per_word) != (0)) { alloc_size++; }  
# 58
return alloc_size * sizeof(Word); 
# 59
} 
# 61
size_t calc_device_mem2d(const uint2 dims, const int 
# 62
maxbits) 
# 63
{ 
# 65
const size_t vals_per_block = (16); 
# 66
size_t total_blocks = ((dims.x) * (dims.y)) / vals_per_block; 
# 67
if ((((dims.x) * (dims.y)) % vals_per_block) != (0)) { total_blocks++; }  
# 68
const size_t bits_per_block = maxbits; 
# 69
const size_t bits_per_word = (sizeof(Word) * (8)); 
# 70
const size_t total_bits = bits_per_block * total_blocks; 
# 71
size_t alloc_size = total_bits / bits_per_word; 
# 72
if ((total_bits % bits_per_word) != (0)) { alloc_size++; }  
# 73
return alloc_size * sizeof(Word); 
# 74
} 
# 76
size_t calc_device_mem3d(const uint3 encoded_dims, const int 
# 77
bits_per_block) 
# 78
{ 
# 79
const size_t vals_per_block = (64); 
# 80
const size_t size = ((encoded_dims.x) * (encoded_dims.y)) * (encoded_dims.z); 
# 81
size_t total_blocks = size / vals_per_block; 
# 82
const size_t bits_per_word = (sizeof(Word) * (8)); 
# 83
const size_t total_bits = bits_per_block * total_blocks; 
# 84
const size_t alloc_size = total_bits / bits_per_word; 
# 85
return alloc_size * sizeof(Word); 
# 86
} 
# 88
dim3 get_max_grid_dims() 
# 89
{ 
# 90
cudaDeviceProp prop; 
# 91
int device = 0; 
# 92
cudaGetDeviceProperties(&prop, device); 
# 93
dim3 grid_dims; 
# 94
(grid_dims.x) = ((prop.maxGridSize)[0]); 
# 95
(grid_dims.y) = ((prop.maxGridSize)[1]); 
# 96
(grid_dims.z) = ((prop.maxGridSize)[2]); 
# 97
return grid_dims; 
# 98
} 
# 101
dim3 calculate_grid_size(size_t size, size_t cuda_block_size) 
# 102
{ 
# 103
size_t grids = size / cuda_block_size; 
# 104
dim3 max_grid_dims = get_max_grid_dims(); 
# 105
int dims = 1; 
# 107
if (grids > (max_grid_dims.x)) 
# 108
{ 
# 109
dims = 2; 
# 110
}  
# 111
if (grids > ((max_grid_dims.x) * (max_grid_dims.y))) 
# 112
{ 
# 113
dims = 3; 
# 114
}  
# 116
dim3 grid_size; 
# 117
(grid_size.x) = (1); 
# 118
(grid_size.y) = (1); 
# 119
(grid_size.z) = (1); 
# 121
if (dims == 1) 
# 122
{ 
# 123
(grid_size.x) = grids; 
# 124
}  
# 126
if (dims == 2) 
# 127
{ 
# 128
float sq_r = sqrt((float)grids); 
# 129
float intpart = ((0.0)); 
# 130
modf(sq_r, &intpart); 
# 131
uint base = intpart; 
# 132
(grid_size.x) = base; 
# 133
(grid_size.y) = base; 
# 135
uint rem = size - (base * base); 
# 136
uint y_rows = rem / base; 
# 137
if ((rem % base) != (0)) { y_rows++; }  
# 138
(grid_size.y) += y_rows; 
# 139
}  
# 141
if (dims == 3) 
# 142
{ 
# 143
float cub_r = pow((float)grids, (1.0F) / (3.0F)); ; 
# 144
float intpart = ((0.0)); 
# 145
modf(cub_r, &intpart); 
# 146
int base = intpart; 
# 147
(grid_size.x) = base; 
# 148
(grid_size.y) = base; 
# 149
(grid_size.z) = base; 
# 151
uint rem = size - ((base * base) * base); 
# 152
uint z_rows = rem / (base * base); 
# 153
if ((rem % (base * base)) != (0)) { z_rows++; }  
# 154
(grid_size.z) += z_rows; 
# 155
}  
# 158
return grid_size; 
# 159
} 
# 164
__attribute__((unused)) inline unsigned long long int2uint(const long long x) 
# 165
{int volatile ___ = 1;(void)x;
# 168
::exit(___);}
#if 0
# 165
{ 
# 166
return (x + ((unsigned long long)12297829382473034410ULL)) ^ ((unsigned long long)12297829382473034410ULL); 
# 168
} 
#endif
# 171 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
__attribute__((unused)) inline unsigned int2uint(const int x) 
# 172
{int volatile ___ = 1;(void)x;
# 175
::exit(___);}
#if 0
# 172
{ 
# 173
return (x + ((unsigned)2863311530U)) ^ ((unsigned)2863311530U); 
# 175
} 
#endif
# 178 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
template< class Int, class Scalar> __attribute__((unused)) Scalar dequantize(const Int & x, const int & e); 
# 186
template<> __attribute__((unused)) double dequantize< long long, double> (const long long &x, const int &e) 
# 187
{int volatile ___ = 1;(void)x;(void)e;
# 189
::exit(___);}
#if 0
# 187
{ 
# 188
return ldexp((double)x, e - ((8 * scalar_sizeof< double> ()) - 2)); 
# 189
} 
#endif
# 194 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
template<> __attribute__((unused)) float dequantize< int, float> (const int &x, const int &e) 
# 195
{int volatile ___ = 1;(void)x;(void)e;
# 197
::exit(___);}
#if 0
# 195
{ 
# 196
return ldexp((float)x, e - ((8 * scalar_sizeof< float> ()) - 2)); 
# 197
} 
#endif
# 202 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
template<> __attribute__((unused)) int dequantize< int, int> (const int &x, const int &e) 
# 203
{int volatile ___ = 1;(void)x;(void)e;
# 205
::exit(___);}
#if 0
# 203
{ 
# 204
return 1; 
# 205
} 
#endif
# 210 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
template<> __attribute__((unused)) long long dequantize< long long, long long> (const long long &x, const int &e) 
# 211
{int volatile ___ = 1;(void)x;(void)e;
# 213
::exit(___);}
#if 0
# 211
{ 
# 212
return 1; 
# 213
} 
#endif
# 216 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
template< class Int, uint s> __attribute__((unused)) static void 
# 219
inv_lift(Int *p) 
# 220
{int volatile ___ = 1;(void)p;
# 244 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
::exit(___);}
#if 0
# 220 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
{ 
# 221
Int x, y, z, w; 
# 222
x = (*p); p += s; 
# 223
y = (*p); p += s; 
# 224
z = (*p); p += s; 
# 225
w = (*p); p += s; 
# 234 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
y += (w >> 1); w -= (y >> 1); 
# 235
y += w; w <<= 1; w -= y; 
# 236
z += x; x <<= 1; x -= z; 
# 237
y += z; z <<= 1; z -= y; 
# 238
w += x; x <<= 1; x -= w; 
# 240
p -= s; (*p) = w; 
# 241
p -= s; (*p) = z; 
# 242
p -= s; (*p) = y; 
# 243
p -= s; (*p) = x; 
# 244
} 
#endif
# 247 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
template< int BlockSize> __attribute__((unused)) unsigned char *get_perm(); 
# 253
template<> __attribute__((unused)) unsigned char *get_perm< 64> () 
# 254
{int volatile ___ = 1;
# 256
::exit(___);}
#if 0
# 254
{ 
# 255
return c_perm; 
# 256
} 
#endif
# 260 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
template<> __attribute__((unused)) unsigned char *get_perm< 16> () 
# 261
{int volatile ___ = 1;
# 263
::exit(___);}
#if 0
# 261
{ 
# 262
return c_perm_2; 
# 263
} 
#endif
# 267 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
template<> __attribute__((unused)) unsigned char *get_perm< 4> () 
# 268
{int volatile ___ = 1;
# 270
::exit(___);}
#if 0
# 268
{ 
# 269
return c_perm_1; 
# 270
} 
#endif
# 282 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/shared.h"
}
# 6 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
namespace cuZFP { 
# 12
__attribute__((unused)) static int precision(int maxexp, int maxprec, int minexp) 
# 13
{int volatile ___ = 1;(void)maxexp;(void)maxprec;(void)minexp;
# 15
::exit(___);}
#if 0
# 13
{ 
# 14
return (maxprec < ((0 > ((maxexp - minexp) + 8)) ? 0 : ((maxexp - minexp) + 8))) ? maxprec : ((0 > ((maxexp - minexp) + 8)) ? 0 : ((maxexp - minexp) + 8)); 
# 15
} 
#endif
# 17 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template< class Scalar> __attribute__((unused)) inline void 
# 19
pad_block(Scalar *p, uint n, uint s) 
# 20
{int volatile ___ = 1;(void)p;(void)n;(void)s;
# 38
::exit(___);}
#if 0
# 20
{ 
# 21
switch (n) 
# 22
{ 
# 23
case 0:  
# 24
(p[(0) * s]) = 0; 
# 26
case 1:  
# 27
(p[(1) * s]) = (p[(0) * s]); 
# 29
case 2:  
# 30
(p[(2) * s]) = (p[(1) * s]); 
# 32
case 3:  
# 33
(p[(3) * s]) = (p[(0) * s]); 
# 35
default:  
# 36
break; 
# 37
}  
# 38
} 
#endif
# 40 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template< class Scalar> __attribute__((unused)) static int 
# 43
exponent(Scalar x) 
# 44
{int volatile ___ = 1;(void)x;
# 52
::exit(___);}
#if 0
# 44
{ 
# 45
if (x > 0) { 
# 46
int e; 
# 47
frexp(x, &e); 
# 49
return max(e, 1 - get_ebias< Scalar> ()); 
# 50
}  
# 51
return -get_ebias< Scalar> (); 
# 52
} 
#endif
# 54 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template< class Scalar, int BlockSize> __attribute__((unused)) static int 
# 57
max_exponent(const Scalar *p) 
# 58
{int volatile ___ = 1;(void)p;
# 66
::exit(___);}
#if 0
# 58
{ 
# 59
Scalar max_val = (0); 
# 60
for (int i = 0; i < BlockSize; ++i) 
# 61
{ 
# 62
Scalar f = fabs(p[i]); 
# 63
max_val = max(max_val, f); 
# 64
}  
# 65
return exponent< Scalar> (max_val); 
# 66
} 
#endif
# 69 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template< class Int, uint s> __attribute__((unused)) static void 
# 72
fwd_lift(Int *p) 
# 73
{int volatile ___ = 1;(void)p;
# 94
::exit(___);}
#if 0
# 73
{ 
# 74
Int x = *p; p += s; 
# 75
Int y = *p; p += s; 
# 76
Int z = *p; p += s; 
# 77
Int w = *p; p += s; 
# 84
x += w; x >>= 1; w -= x; 
# 85
z += y; z >>= 1; y -= z; 
# 86
x += z; x >>= 1; z -= x; 
# 87
w += y; w >>= 1; y -= w; 
# 88
w += (y >> 1); y -= (w >> 1); 
# 90
p -= s; (*p) = w; 
# 91
p -= s; (*p) = z; 
# 92
p -= s; (*p) = y; 
# 93
p -= s; (*p) = x; 
# 94
} 
#endif
# 96 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template< class Scalar> __attribute__((unused)) inline Scalar quantize_factor(const int & exponent, Scalar); 
# 104
template<> __attribute__((unused)) inline float quantize_factor< float> (const int &exponent, float) 
# 105
{int volatile ___ = 1;(void)exponent;
# 107
::exit(___);}
#if 0
# 105
{ 
# 106
return ldexp((1.0), (get_precision< float> () - 2) - exponent); 
# 107
} 
#endif
# 112 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template<> __attribute__((unused)) inline double quantize_factor< double> (const int &exponent, double) 
# 113
{int volatile ___ = 1;(void)exponent;
# 115
::exit(___);}
#if 0
# 113
{ 
# 114
return ldexp((1.0), (get_precision< double> () - 2) - exponent); 
# 115
} 
#endif
# 117 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template< class Scalar, class Int, int BlockSize> __attribute__((unused)) void 
# 118
fwd_cast(Int *iblock, const Scalar *fblock, int emax) 
# 119
{int volatile ___ = 1;(void)iblock;(void)fblock;(void)emax;
# 125
::exit(___);}
#if 0
# 119
{ 
# 120
Scalar s = quantize_factor(emax, Scalar()); 
# 121
for (int i = 0; i < BlockSize; ++i) 
# 122
{ 
# 123
(iblock[i]) = ((Int)(s * (fblock[i]))); 
# 124
}  
# 125
} 
#endif
# 127 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template< int BlockSize> struct transform; 
# 131
template<> struct transform< 64>  { 
# 133
template< class Int> void 
# 134
fwd_xform(Int *p) 
# 135
{int volatile ___ = 1;(void)p;
# 150
::exit(___);}
#if 0
# 135
{ 
# 137
uint x, y, z; 
# 139
for (z = (0); z < (4); z++) { 
# 140
for (y = (0); y < (4); y++) { 
# 141
fwd_lift< Int, 1> ((p + ((4) * y)) + ((16) * z)); }  }  
# 143
for (x = (0); x < (4); x++) { 
# 144
for (z = (0); z < (4); z++) { 
# 145
fwd_lift< Int, 4> ((p + ((16) * z)) + ((1) * x)); }  }  
# 147
for (y = (0); y < (4); y++) { 
# 148
for (x = (0); x < (4); x++) { 
# 149
fwd_lift< Int, 16> ((p + ((1) * x)) + ((4) * y)); }  }  
# 150
} 
#endif
# 152 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
}; 
# 155
template<> struct transform< 16>  { 
# 157
template< class Int> void 
# 158
fwd_xform(Int *p) 
# 159
{int volatile ___ = 1;(void)p;
# 167
::exit(___);}
#if 0
# 159
{ 
# 160
uint x, y; 
# 162
for (y = (0); y < (4); y++) { 
# 163
fwd_lift< Int, 1> (p + ((4) * y)); }  
# 165
for (x = (0); x < (4); x++) { 
# 166
fwd_lift< Int, 4> (p + ((1) * x)); }  
# 167
} 
#endif
# 168 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
}; 
# 171
template<> struct transform< 4>  { 
# 173
template< class Int> void 
# 174
fwd_xform(Int *p) 
# 175
{int volatile ___ = 1;(void)p;
# 177
::exit(___);}
#if 0
# 175
{ 
# 176
fwd_lift< Int, 1> (p); 
# 177
} 
#endif
# 179 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
}; 
# 181
template< class Int, class UInt, int BlockSize> __attribute__((unused)) void 
# 182
fwd_order(UInt *ublock, const Int *iblock) 
# 183
{int volatile ___ = 1;(void)ublock;(void)iblock;
# 190
::exit(___);}
#if 0
# 183
{ 
# 184
unsigned char *perm = get_perm< BlockSize> (); 
# 186
for (int i = 0; i < BlockSize; ++i) 
# 187
{ 
# 188
(ublock[i]) = int2uint(iblock[perm[i]]); 
# 189
}  
# 190
} 
#endif
# 192 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template< int block_size> 
# 193
struct BlockWriter { 
# 196
uint m_word_index; 
# 197
uint m_start_bit; 
# 198
uint m_current_bit; 
# 199
const int m_maxbits; 
# 200
Word *m_stream; 
# 202
BlockWriter(Word *stream, const int &maxbits, const uint &block_idx) : m_current_bit((0)), m_maxbits(maxbits), m_stream(stream) 
# 206
{int *volatile ___ = 0;(void)stream;(void)maxbits;(void)block_idx;
# 209
::free(___);}
#if 0
# 206
{ 
# 207
(m_word_index) = ((block_idx * maxbits) / (sizeof(Word) * (8))); 
# 208
(m_start_bit) = ((uint)((block_idx * maxbits) % (sizeof(Word) * (8)))); 
# 209
} 
#endif
# 211 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template< class T> void 
# 213
print_bits(T bits) 
# 214
{int volatile ___ = 1;(void)bits;
# 224
::exit(___);}
#if 0
# 214
{ 
# 215
const int bit_size = (sizeof(T) * (8)); 
# 216
for (int i = (bit_size - 1); i >= 0; --i) 
# 217
{ 
# 218
T one = (1); 
# 219
T mask = one << i; 
# 220
int val = (bits & mask) >> i; 
# 221
printf("%d", val); 
# 222
}  
# 223
printf("\n"); 
# 224
} 
#endif
# 226 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
void print(int index) 
# 227
{int volatile ___ = 1;(void)index;
# 229
::exit(___);}
#if 0
# 227
{ 
# 228
print_bits((m_stream)[index]); 
# 229
} 
#endif
# 234 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
unsigned long long write_bits(const unsigned long long &bits, const uint &n_bits) 
# 235
{int volatile ___ = 1;(void)bits;(void)n_bits;
# 261
::exit(___);}
#if 0
# 235
{ 
# 236
const uint wbits = (sizeof(Word) * (8)); 
# 237
uint seg_start = ((m_start_bit) + (m_current_bit)) % wbits; 
# 238
uint write_index = (m_word_index) + ((uint)(((m_start_bit) + (m_current_bit)) / wbits)); 
# 239
uint seg_end = (seg_start + n_bits) - (1); 
# 240
uint shift = seg_start; 
# 246
Word left = (bits >> n_bits) << n_bits; 
# 248
Word b = bits - left; 
# 249
Word add = b << shift; 
# 250
atomicAdd(&((m_stream)[write_index]), add); 
# 252
bool straddle = (seg_start < (sizeof(Word) * (8))) && (seg_end >= (sizeof(Word) * (8))); 
# 253
if (straddle) 
# 254
{ 
# 255
Word rem = b >> ((sizeof(Word) * (8)) - shift); 
# 256
atomicAdd(&((m_stream)[write_index + (1)]), rem); 
# 257
}  
# 258
(m_current_bit) += n_bits; 
# 260
return bits >> ((Word)n_bits); 
# 261
} 
#endif
# 264 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
uint write_bit(const unsigned &bit) 
# 265
{int volatile ___ = 1;(void)bit;
# 283
::exit(___);}
#if 0
# 265
{ 
# 266
const uint wbits = (sizeof(Word) * (8)); 
# 267
uint seg_start = ((m_start_bit) + (m_current_bit)) % wbits; 
# 268
uint write_index = (m_word_index) + ((uint)(((m_start_bit) + (m_current_bit)) / wbits)); 
# 269
uint shift = seg_start; 
# 275
Word add = ((Word)bit) << shift; 
# 277
atomicAdd(&((m_stream)[write_index]), add); 
# 280
(m_current_bit) += (1); 
# 282
return bit; 
# 283
} 
#endif
# 285 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
}; 
# 287
template< class Int, int BlockSize> __attribute__((unused)) inline void 
# 288
encode_block(BlockWriter< BlockSize>  &stream, int 
# 289
maxbits, int 
# 290
maxprec, Int *
# 291
iblock) 
# 292
{int volatile ___ = 1;(void)stream;(void)maxbits;(void)maxprec;(void)iblock;
# 344
::exit(___);}
#if 0
# 292
{ 
# 294
transform< BlockSize>  tform; 
# 296
(tform.fwd_xform(iblock)); 
# 298
typedef typename zfp_traits< Int> ::UInt UInt; 
# 299
UInt ublock[BlockSize]; 
# 302
fwd_order< Int, typename zfp_traits< Int> ::UInt, BlockSize> (ublock, iblock); 
# 304
uint intprec = ((8) * ((uint)sizeof(UInt))); 
# 305
uint kmin = (intprec > maxprec) ? intprec - maxprec : (0); 
# 306
uint bits = maxbits; 
# 307
uint i, k, m, n; 
# 308
uint64 x; 
# 311
for ((k = intprec), (n = (0)); bits && ((k--) > kmin);) { 
# 314
x = (0); 
# 315
for (i = (0); i < (BlockSize); i++) 
# 316
{ 
# 317
x += (((uint64)(((ublock[i]) >> k) & 1U)) << i); 
# 318
}  
# 321
m = min(n, bits); 
# 322
bits -= m; 
# 323
x = (stream.write_bits(x, m)); 
# 326
for (; (n < (BlockSize)) && bits && ((bits--), (stream.write_bit(!(!x)))); (x >>= 1), (n++)) 
# 327
{ 
# 331
for (; (n < (BlockSize - 1)) && bits && ((bits--), (!(stream.write_bit(x & (1U))))); (x >>= 1), (n++)) 
# 332
{ 
# 336
}  
# 340
}  
# 342
}  
# 344
} 
#endif
# 346 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template< class Scalar, int BlockSize> __attribute__((unused)) inline void 
# 347
zfp_encode_block(Scalar *fblock, const int 
# 348
maxbits, const uint 
# 349
block_idx, Word *
# 350
stream) 
# 351
{int volatile ___ = 1;(void)fblock;(void)maxbits;(void)block_idx;(void)stream;
# 371
::exit(___);}
#if 0
# 351
{ 
# 354
BlockWriter< BlockSize>  block_writer(stream, maxbits, block_idx); 
# 356
int emax = max_exponent< Scalar, BlockSize> (fblock); 
# 357
int maxprec = precision(emax, get_precision< Scalar> (), get_min_exp< Scalar> ()); 
# 358
uint e = (maxprec) ? emax + get_ebias< Scalar> () : 0; 
# 360
if (e) 
# 361
{ 
# 362
const uint ebits = get_ebits< Scalar> () + 1; 
# 363
(block_writer.write_bits(((2) * e) + (1), ebits)); 
# 364
typedef typename zfp_traits< Scalar> ::Int Int; 
# 365
Int iblock[BlockSize]; 
# 366
fwd_cast< Scalar, typename zfp_traits< Scalar> ::Int, BlockSize> (iblock, fblock, emax); 
# 369
encode_block< typename zfp_traits< Scalar> ::Int, BlockSize> (block_writer, maxbits - ebits, maxprec, iblock); 
# 370
}  
# 371
} 
#endif
# 374 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template<> __attribute__((unused)) inline void zfp_encode_block< int, 64> (int *fblock, const int 
# 375
maxbits, const uint 
# 376
block_idx, Word *
# 377
stream) 
# 378
{int volatile ___ = 1;(void)fblock;(void)maxbits;(void)block_idx;(void)stream;
# 382
::exit(___);}
#if 0
# 378
{ 
# 379
BlockWriter< 64>  block_writer(stream, maxbits, block_idx); 
# 380
const int intprec = get_precision< int> (); 
# 381
encode_block< int, 64> (block_writer, maxbits, intprec, fblock); 
# 382
} 
#endif
# 385 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template<> __attribute__((unused)) inline void zfp_encode_block< long long, 64> (long long *fblock, const int 
# 386
maxbits, const uint 
# 387
block_idx, Word *
# 388
stream) 
# 389
{int volatile ___ = 1;(void)fblock;(void)maxbits;(void)block_idx;(void)stream;
# 393
::exit(___);}
#if 0
# 389
{ 
# 390
BlockWriter< 64>  block_writer(stream, maxbits, block_idx); 
# 391
const int intprec = get_precision< long long> (); 
# 392
encode_block< long long, 64> (block_writer, maxbits, intprec, fblock); 
# 393
} 
#endif
# 396 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template<> __attribute__((unused)) inline void zfp_encode_block< int, 16> (int *fblock, const int 
# 397
maxbits, const uint 
# 398
block_idx, Word *
# 399
stream) 
# 400
{int volatile ___ = 1;(void)fblock;(void)maxbits;(void)block_idx;(void)stream;
# 404
::exit(___);}
#if 0
# 400
{ 
# 401
BlockWriter< 16>  block_writer(stream, maxbits, block_idx); 
# 402
const int intprec = get_precision< int> (); 
# 403
encode_block< int, 16> (block_writer, maxbits, intprec, fblock); 
# 404
} 
#endif
# 407 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template<> __attribute__((unused)) inline void zfp_encode_block< long long, 16> (long long *fblock, const int 
# 408
maxbits, const uint 
# 409
block_idx, Word *
# 410
stream) 
# 411
{int volatile ___ = 1;(void)fblock;(void)maxbits;(void)block_idx;(void)stream;
# 415
::exit(___);}
#if 0
# 411
{ 
# 412
BlockWriter< 16>  block_writer(stream, maxbits, block_idx); 
# 413
const int intprec = get_precision< long long> (); 
# 414
encode_block< long long, 16> (block_writer, maxbits, intprec, fblock); 
# 415
} 
#endif
# 418 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template<> __attribute__((unused)) inline void zfp_encode_block< int, 4> (int *fblock, const int 
# 419
maxbits, const uint 
# 420
block_idx, Word *
# 421
stream) 
# 422
{int volatile ___ = 1;(void)fblock;(void)maxbits;(void)block_idx;(void)stream;
# 426
::exit(___);}
#if 0
# 422
{ 
# 423
BlockWriter< 4>  block_writer(stream, maxbits, block_idx); 
# 424
const int intprec = get_precision< int> (); 
# 425
encode_block< int, 4> (block_writer, maxbits, intprec, fblock); 
# 426
} 
#endif
# 429 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
template<> __attribute__((unused)) inline void zfp_encode_block< long long, 4> (long long *fblock, const int 
# 430
maxbits, const uint 
# 431
block_idx, Word *
# 432
stream) 
# 433
{int volatile ___ = 1;(void)fblock;(void)maxbits;(void)block_idx;(void)stream;
# 437
::exit(___);}
#if 0
# 433
{ 
# 434
BlockWriter< 4>  block_writer(stream, maxbits, block_idx); 
# 435
const int intprec = get_precision< long long> (); 
# 436
encode_block< long long, 4> (block_writer, maxbits, intprec, fblock); 
# 437
} 
#endif
# 439 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode.cuh"
}
# 55 "/sw/summit/cuda/10.1.168/include/cuda_profiler_api.h"
extern "C" {
# 121 "/sw/summit/cuda/10.1.168/include/cuda_profiler_api.h"
extern cudaError_t cudaProfilerInitialize(const char * configFile, const char * outputFile, cudaOutputMode_t outputMode); 
# 146 "/sw/summit/cuda/10.1.168/include/cuda_profiler_api.h"
extern cudaError_t cudaProfilerStart(); 
# 168 "/sw/summit/cuda/10.1.168/include/cuda_profiler_api.h"
extern cudaError_t cudaProfilerStop(); 
# 173
}
# 50 "/usr/include/c++/4.8.2/bits/memoryfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/4.8.2/bits/memoryfwd.h" 3
template< class > class allocator; 
# 67
template<> class allocator< void> ; 
# 70
template< class , class > struct uses_allocator; 
# 76
}
# 42 "/usr/include/c++/4.8.2/bits/stringfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class _CharT> struct char_traits; 
# 55
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 56
_Alloc = allocator< _CharT> > class basic_string; 
# 59
template<> struct char_traits< char> ; 
# 62
typedef basic_string< char>  string; 
# 65
template<> struct char_traits< wchar_t> ; 
# 68
typedef basic_string< wchar_t>  wstring; 
# 87 "/usr/include/c++/4.8.2/bits/stringfwd.h" 3
}
# 353 "/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/include/stddef.h" 3
typedef unsigned wint_t; 
# 106 "/usr/include/wchar.h" 3
typedef __mbstate_t mbstate_t; 
# 132 "/usr/include/wchar.h" 3
extern "C" {
# 137
struct tm; 
# 147
extern wchar_t *wcscpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw(); 
# 150
extern wchar_t *wcsncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw(); 
# 155
extern wchar_t *wcscat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw(); 
# 158
extern wchar_t *wcsncat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw(); 
# 163
extern int wcscmp(const wchar_t * __s1, const wchar_t * __s2) throw()
# 164
 __attribute((__pure__)); 
# 166
extern int wcsncmp(const wchar_t * __s1, const wchar_t * __s2, size_t __n) throw()
# 167
 __attribute((__pure__)); 
# 172
extern int wcscasecmp(const wchar_t * __s1, const wchar_t * __s2) throw(); 
# 175
extern int wcsncasecmp(const wchar_t * __s1, const wchar_t * __s2, size_t __n) throw(); 
# 182
extern int wcscasecmp_l(const wchar_t * __s1, const wchar_t * __s2, __locale_t __loc) throw(); 
# 185
extern int wcsncasecmp_l(const wchar_t * __s1, const wchar_t * __s2, size_t __n, __locale_t __loc) throw(); 
# 192
extern int wcscoll(const wchar_t * __s1, const wchar_t * __s2) throw(); 
# 196
extern size_t wcsxfrm(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw(); 
# 206
extern int wcscoll_l(const wchar_t * __s1, const wchar_t * __s2, __locale_t __loc) throw(); 
# 212
extern size_t wcsxfrm_l(wchar_t * __s1, const wchar_t * __s2, size_t __n, __locale_t __loc) throw(); 
# 216
extern wchar_t *wcsdup(const wchar_t * __s) throw() __attribute((__malloc__)); 
# 222
extern "C++" wchar_t *wcschr(wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcschr")
# 223
 __attribute((__pure__)); 
# 224
extern "C++" const wchar_t *wcschr(const wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcschr")
# 225
 __attribute((__pure__)); 
# 232
extern "C++" wchar_t *wcsrchr(wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcsrchr")
# 233
 __attribute((__pure__)); 
# 234
extern "C++" const wchar_t *wcsrchr(const wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcsrchr")
# 235
 __attribute((__pure__)); 
# 245
extern wchar_t *wcschrnul(const wchar_t * __s, wchar_t __wc) throw()
# 246
 __attribute((__pure__)); 
# 252
extern size_t wcscspn(const wchar_t * __wcs, const wchar_t * __reject) throw()
# 253
 __attribute((__pure__)); 
# 256
extern size_t wcsspn(const wchar_t * __wcs, const wchar_t * __accept) throw()
# 257
 __attribute((__pure__)); 
# 260
extern "C++" wchar_t *wcspbrk(wchar_t * __wcs, const wchar_t * __accept) throw() __asm__("wcspbrk")
# 261
 __attribute((__pure__)); 
# 262
extern "C++" const wchar_t *wcspbrk(const wchar_t * __wcs, const wchar_t * __accept) throw() __asm__("wcspbrk")
# 264
 __attribute((__pure__)); 
# 271
extern "C++" wchar_t *wcsstr(wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcsstr")
# 272
 __attribute((__pure__)); 
# 273
extern "C++" const wchar_t *wcsstr(const wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcsstr")
# 275
 __attribute((__pure__)); 
# 282
extern wchar_t *wcstok(wchar_t *__restrict__ __s, const wchar_t *__restrict__ __delim, wchar_t **__restrict__ __ptr) throw(); 
# 287
extern size_t wcslen(const wchar_t * __s) throw() __attribute((__pure__)); 
# 293
extern "C++" wchar_t *wcswcs(wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcswcs")
# 294
 __attribute((__pure__)); 
# 295
extern "C++" const wchar_t *wcswcs(const wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcswcs")
# 297
 __attribute((__pure__)); 
# 306 "/usr/include/wchar.h" 3
extern size_t wcsnlen(const wchar_t * __s, size_t __maxlen) throw()
# 307
 __attribute((__pure__)); 
# 314
extern "C++" wchar_t *wmemchr(wchar_t * __s, wchar_t __c, size_t __n) throw() __asm__("wmemchr")
# 315
 __attribute((__pure__)); 
# 316
extern "C++" const wchar_t *wmemchr(const wchar_t * __s, wchar_t __c, size_t __n) throw() __asm__("wmemchr")
# 318
 __attribute((__pure__)); 
# 325
extern int wmemcmp(const wchar_t * __s1, const wchar_t * __s2, size_t __n) throw()
# 326
 __attribute((__pure__)); 
# 329
extern wchar_t *wmemcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw(); 
# 334
extern wchar_t *wmemmove(wchar_t * __s1, const wchar_t * __s2, size_t __n) throw(); 
# 338
extern wchar_t *wmemset(wchar_t * __s, wchar_t __c, size_t __n) throw(); 
# 344
extern wchar_t *wmempcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw(); 
# 353
extern __attribute((gnu_inline)) inline wint_t btowc(int __c) throw(); 
# 357
extern __attribute((gnu_inline)) inline int wctob(wint_t __c) throw(); 
# 361
extern int mbsinit(const mbstate_t * __ps) throw() __attribute((__pure__)); 
# 365
extern size_t mbrtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __p) throw(); 
# 370
extern size_t wcrtomb(char *__restrict__ __s, wchar_t __wc, mbstate_t *__restrict__ __ps) throw(); 
# 374
extern size_t __mbrlen(const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __ps) throw(); 
# 376
extern __attribute((gnu_inline)) inline size_t mbrlen(const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __ps) throw(); 
# 386
extern wint_t __btowc_alias(int __c) __asm__("btowc"); 
# 387
__attribute((__gnu_inline__)) extern inline wint_t
# 388
 __attribute((__leaf__)) btowc(int __c) throw() 
# 389
{ return ((0) && (__c >= ('\000')) && (__c <= ('\177'))) ? (wint_t)__c : __btowc_alias(__c); 
# 390
} 
# 392
extern int __wctob_alias(wint_t __c) __asm__("wctob"); 
# 393
__attribute((__gnu_inline__)) extern inline int
# 394
 __attribute((__leaf__)) wctob(wint_t __wc) throw() 
# 395
{ return ((0) && (__wc >= (L'\x0')) && (__wc <= (L'\x7f'))) ? (int)__wc : __wctob_alias(__wc); 
# 396
} 
# 398
__attribute((__gnu_inline__)) extern inline size_t
# 399
 __attribute((__leaf__)) mbrlen(const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __ps) throw() 
# 401
{ return (__ps != (__null)) ? mbrtowc(__null, __s, __n, __ps) : __mbrlen(__s, __n, __null); 
# 402
} 
# 408
extern size_t mbsrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 414
extern size_t wcsrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 423
extern size_t mbsnrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __nmc, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 429
extern size_t wcsnrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __nwc, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 439
extern int wcwidth(wchar_t __c) throw(); 
# 443
extern int wcswidth(const wchar_t * __s, size_t __n) throw(); 
# 450
extern double wcstod(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 457
extern float wcstof(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 459
extern long double wcstold(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 468
extern long wcstol(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 473
extern unsigned long wcstoul(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 483
__extension__ extern long long wcstoll(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 490
__extension__ extern unsigned long long wcstoull(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 500
__extension__ extern long long wcstoq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 507
__extension__ extern unsigned long long wcstouq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 530 "/usr/include/wchar.h" 3
extern long wcstol_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, __locale_t __loc) throw(); 
# 534
extern unsigned long wcstoul_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, __locale_t __loc) throw(); 
# 539
__extension__ extern long long wcstoll_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, __locale_t __loc) throw(); 
# 544
__extension__ extern unsigned long long wcstoull_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, __locale_t __loc) throw(); 
# 549
extern double wcstod_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, __locale_t __loc) throw(); 
# 553
extern float wcstof_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, __locale_t __loc) throw(); 
# 557
extern long double wcstold_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, __locale_t __loc) throw(); 
# 566
extern wchar_t *wcpcpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw(); 
# 571
extern wchar_t *wcpncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw(); 
# 580
extern __FILE *open_wmemstream(wchar_t ** __bufloc, size_t * __sizeloc) throw(); 
# 587
extern int fwide(__FILE * __fp, int __mode) throw(); 
# 594
extern int fwprintf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...); 
# 601
extern int wprintf(const wchar_t *__restrict__ __format, ...); 
# 604
extern int swprintf(wchar_t *__restrict__ __s, size_t __n, const wchar_t *__restrict__ __format, ...) throw(); 
# 612
extern int vfwprintf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 620
extern int vwprintf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 625
extern int vswprintf(wchar_t *__restrict__ __s, size_t __n, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 635
extern int fwscanf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...); 
# 642
extern int wscanf(const wchar_t *__restrict__ __format, ...); 
# 645
extern int swscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, ...) throw(); 
# 689 "/usr/include/wchar.h" 3
extern int vfwscanf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 697
extern int vwscanf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 701
extern int vswscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 745 "/usr/include/wchar.h" 3
extern wint_t fgetwc(__FILE * __stream); 
# 746
extern wint_t getwc(__FILE * __stream); 
# 752
extern wint_t getwchar(); 
# 759
extern wint_t fputwc(wchar_t __wc, __FILE * __stream); 
# 760
extern wint_t putwc(wchar_t __wc, __FILE * __stream); 
# 766
extern wint_t putwchar(wchar_t __wc); 
# 774
extern wchar_t *fgetws(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 781
extern int fputws(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 789
extern wint_t ungetwc(wint_t __wc, __FILE * __stream); 
# 801 "/usr/include/wchar.h" 3
extern wint_t getwc_unlocked(__FILE * __stream); 
# 802
extern wint_t getwchar_unlocked(); 
# 810
extern wint_t fgetwc_unlocked(__FILE * __stream); 
# 818
extern wint_t fputwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 827 "/usr/include/wchar.h" 3
extern wint_t putwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 828
extern wint_t putwchar_unlocked(wchar_t __wc); 
# 837 "/usr/include/wchar.h" 3
extern wchar_t *fgetws_unlocked(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 846
extern int fputws_unlocked(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 855
extern size_t wcsftime(wchar_t *__restrict__ __s, size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp) throw(); 
# 865
extern size_t wcsftime_l(wchar_t *__restrict__ __s, size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp, __locale_t __loc) throw(); 
# 891 "/usr/include/wchar.h" 3
}
# 62 "/usr/include/c++/4.8.2/cwchar" 3
namespace std { 
# 64
using ::mbstate_t;
# 65
}
# 135 "/usr/include/c++/4.8.2/cwchar" 3
namespace std __attribute((__visibility__("default"))) { 
# 139
using ::wint_t;
# 141
using ::btowc;
# 142
using ::fgetwc;
# 143
using ::fgetws;
# 144
using ::fputwc;
# 145
using ::fputws;
# 146
using ::fwide;
# 147
using ::fwprintf;
# 148
using ::fwscanf;
# 149
using ::getwc;
# 150
using ::getwchar;
# 151
using ::mbrlen;
# 152
using ::mbrtowc;
# 153
using ::mbsinit;
# 154
using ::mbsrtowcs;
# 155
using ::putwc;
# 156
using ::putwchar;
# 158
using ::swprintf;
# 160
using ::swscanf;
# 161
using ::ungetwc;
# 162
using ::vfwprintf;
# 164
using ::vfwscanf;
# 167
using ::vswprintf;
# 170
using ::vswscanf;
# 172
using ::vwprintf;
# 174
using ::vwscanf;
# 176
using ::wcrtomb;
# 177
using ::wcscat;
# 178
using ::wcscmp;
# 179
using ::wcscoll;
# 180
using ::wcscpy;
# 181
using ::wcscspn;
# 182
using ::wcsftime;
# 183
using ::wcslen;
# 184
using ::wcsncat;
# 185
using ::wcsncmp;
# 186
using ::wcsncpy;
# 187
using ::wcsrtombs;
# 188
using ::wcsspn;
# 189
using ::wcstod;
# 191
using ::wcstof;
# 193
using ::wcstok;
# 194
using ::wcstol;
# 195
using ::wcstoul;
# 196
using ::wcsxfrm;
# 197
using ::wctob;
# 198
using ::wmemcmp;
# 199
using ::wmemcpy;
# 200
using ::wmemmove;
# 201
using ::wmemset;
# 202
using ::wprintf;
# 203
using ::wscanf;
# 204
using ::wcschr;
# 205
using ::wcspbrk;
# 206
using ::wcsrchr;
# 207
using ::wcsstr;
# 208
using ::wmemchr;
# 233 "/usr/include/c++/4.8.2/cwchar" 3
}
# 241
namespace __gnu_cxx { 
# 248
using ::wcstold;
# 257 "/usr/include/c++/4.8.2/cwchar" 3
using ::wcstoll;
# 258
using ::wcstoull;
# 260
}
# 262
namespace std { 
# 264
using __gnu_cxx::wcstold;
# 265
using __gnu_cxx::wcstoll;
# 266
using __gnu_cxx::wcstoull;
# 267
}
# 68 "/usr/include/c++/4.8.2/bits/postypes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 88 "/usr/include/c++/4.8.2/bits/postypes.h" 3
typedef long streamoff; 
# 98 "/usr/include/c++/4.8.2/bits/postypes.h" 3
typedef ptrdiff_t streamsize; 
# 111 "/usr/include/c++/4.8.2/bits/postypes.h" 3
template< class _StateT> 
# 112
class fpos { 
# 115
streamoff _M_off; 
# 116
_StateT _M_state; 
# 123
public: fpos() : _M_off((0)), _M_state() 
# 124
{ } 
# 133 "/usr/include/c++/4.8.2/bits/postypes.h" 3
fpos(streamoff __off) : _M_off(__off), _M_state() 
# 134
{ } 
# 137
operator streamoff() const { return _M_off; } 
# 141
void state(_StateT __st) 
# 142
{ (_M_state) = __st; } 
# 146
_StateT state() const 
# 147
{ return _M_state; } 
# 154
fpos &operator+=(streamoff __off) 
# 155
{ 
# 156
(_M_off) += __off; 
# 157
return *this; 
# 158
} 
# 165
fpos &operator-=(streamoff __off) 
# 166
{ 
# 167
(_M_off) -= __off; 
# 168
return *this; 
# 169
} 
# 178
fpos operator+(streamoff __off) const 
# 179
{ 
# 180
fpos __pos(*this); 
# 181
__pos += __off; 
# 182
return __pos; 
# 183
} 
# 192
fpos operator-(streamoff __off) const 
# 193
{ 
# 194
fpos __pos(*this); 
# 195
__pos -= __off; 
# 196
return __pos; 
# 197
} 
# 205
streamoff operator-(const fpos &__other) const 
# 206
{ return (_M_off) - (__other._M_off); } 
# 207
}; 
# 214
template< class _StateT> inline bool 
# 216 "/usr/include/c++/4.8.2/bits/postypes.h" 3
operator==(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 217
{ return ((streamoff)__lhs) == ((streamoff)__rhs); } 
# 219
template< class _StateT> inline bool 
# 221 "/usr/include/c++/4.8.2/bits/postypes.h" 3
operator!=(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 222
{ return ((streamoff)__lhs) != ((streamoff)__rhs); } 
# 228
typedef fpos< __mbstate_t>  streampos; 
# 230
typedef fpos< __mbstate_t>  wstreampos; 
# 240 "/usr/include/c++/4.8.2/bits/postypes.h" 3
}
# 42 "/usr/include/c++/4.8.2/iosfwd" 3
namespace std __attribute((__visibility__("default"))) { 
# 74 "/usr/include/c++/4.8.2/iosfwd" 3
class ios_base; 
# 76
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ios; 
# 79
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_streambuf; 
# 82
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_istream; 
# 85
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ostream; 
# 88
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_iostream; 
# 91
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 92
_Alloc = allocator< _CharT> > class basic_stringbuf; 
# 95
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 96
_Alloc = allocator< _CharT> > class basic_istringstream; 
# 99
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 100
_Alloc = allocator< _CharT> > class basic_ostringstream; 
# 103
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 104
_Alloc = allocator< _CharT> > class basic_stringstream; 
# 107
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_filebuf; 
# 110
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ifstream; 
# 113
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ofstream; 
# 116
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_fstream; 
# 119
template< class _CharT, class _Traits = char_traits< _CharT> > class istreambuf_iterator; 
# 122
template< class _CharT, class _Traits = char_traits< _CharT> > class ostreambuf_iterator; 
# 127
typedef basic_ios< char>  ios; 
# 130
typedef basic_streambuf< char>  streambuf; 
# 133
typedef basic_istream< char>  istream; 
# 136
typedef basic_ostream< char>  ostream; 
# 139
typedef basic_iostream< char>  iostream; 
# 142
typedef basic_stringbuf< char>  stringbuf; 
# 145
typedef basic_istringstream< char>  istringstream; 
# 148
typedef basic_ostringstream< char>  ostringstream; 
# 151
typedef basic_stringstream< char>  stringstream; 
# 154
typedef basic_filebuf< char>  filebuf; 
# 157
typedef basic_ifstream< char>  ifstream; 
# 160
typedef basic_ofstream< char>  ofstream; 
# 163
typedef basic_fstream< char>  fstream; 
# 167
typedef basic_ios< wchar_t>  wios; 
# 170
typedef basic_streambuf< wchar_t>  wstreambuf; 
# 173
typedef basic_istream< wchar_t>  wistream; 
# 176
typedef basic_ostream< wchar_t>  wostream; 
# 179
typedef basic_iostream< wchar_t>  wiostream; 
# 182
typedef basic_stringbuf< wchar_t>  wstringbuf; 
# 185
typedef basic_istringstream< wchar_t>  wistringstream; 
# 188
typedef basic_ostringstream< wchar_t>  wostringstream; 
# 191
typedef basic_stringstream< wchar_t>  wstringstream; 
# 194
typedef basic_filebuf< wchar_t>  wfilebuf; 
# 197
typedef basic_ifstream< wchar_t>  wifstream; 
# 200
typedef basic_ofstream< wchar_t>  wofstream; 
# 203
typedef basic_fstream< wchar_t>  wfstream; 
# 208
}
# 35 "/usr/include/c++/4.8.2/exception" 3
#pragma GCC visibility push ( default )
# 40 "/usr/include/c++/4.8.2/exception" 3
extern "C++" {
# 42
namespace std { 
# 60 "/usr/include/c++/4.8.2/exception" 3
class exception { 
# 63
public: exception() throw() { } 
# 64
virtual ~exception() throw(); 
# 68
virtual const char *what() const throw(); 
# 69
}; 
# 73
class bad_exception : public exception { 
# 76
public: bad_exception() throw() { } 
# 80
virtual ~bad_exception() throw(); 
# 83
virtual const char *what() const throw(); 
# 84
}; 
# 87
typedef void (*terminate_handler)(void); 
# 90
typedef void (*unexpected_handler)(void); 
# 93
terminate_handler set_terminate(terminate_handler) throw(); 
# 97
void terminate() throw() __attribute((__noreturn__)); 
# 100
unexpected_handler set_unexpected(unexpected_handler) throw(); 
# 104
void unexpected() __attribute((__noreturn__)); 
# 117 "/usr/include/c++/4.8.2/exception" 3
bool uncaught_exception() throw() __attribute((__pure__)); 
# 120
}
# 122
namespace __gnu_cxx { 
# 142 "/usr/include/c++/4.8.2/exception" 3
void __verbose_terminate_handler(); 
# 145
}
# 147
}
# 149
#pragma GCC visibility pop
# 42 "/usr/include/c++/4.8.2/bits/functexcept.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
void __throw_bad_exception() __attribute((__noreturn__)); 
# 52
void __throw_bad_alloc() __attribute((__noreturn__)); 
# 56
void __throw_bad_cast() __attribute((__noreturn__)); 
# 59
void __throw_bad_typeid() __attribute((__noreturn__)); 
# 63
void __throw_logic_error(const char *) __attribute((__noreturn__)); 
# 66
void __throw_domain_error(const char *) __attribute((__noreturn__)); 
# 69
void __throw_invalid_argument(const char *) __attribute((__noreturn__)); 
# 72
void __throw_length_error(const char *) __attribute((__noreturn__)); 
# 75
void __throw_out_of_range(const char *) __attribute((__noreturn__)); 
# 78
void __throw_runtime_error(const char *) __attribute((__noreturn__)); 
# 81
void __throw_range_error(const char *) __attribute((__noreturn__)); 
# 84
void __throw_overflow_error(const char *) __attribute((__noreturn__)); 
# 87
void __throw_underflow_error(const char *) __attribute((__noreturn__)); 
# 91
void __throw_ios_failure(const char *) __attribute((__noreturn__)); 
# 94
void __throw_system_error(int) __attribute((__noreturn__)); 
# 97
void __throw_future_error(int) __attribute((__noreturn__)); 
# 101
void __throw_bad_function_call() __attribute((__noreturn__)); 
# 104
}
# 37 "/usr/include/c++/4.8.2/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 54 "/usr/include/c++/4.8.2/ext/numeric_traits.h" 3
template< class _Value> 
# 55
struct __numeric_traits_integer { 
# 58
static const _Value __min = ((((_Value)(-1)) < 0) ? ((_Value)1) << ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)) : ((_Value)0)); 
# 59
static const _Value __max = ((((_Value)(-1)) < 0) ? (((((_Value)1) << (((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((_Value)0))); 
# 63
static const bool __is_signed = (((_Value)(-1)) < 0); 
# 64
static const int __digits = ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)); 
# 65
}; 
# 67
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__min; 
# 70
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__max; 
# 73
template< class _Value> const bool __numeric_traits_integer< _Value> ::__is_signed; 
# 76
template< class _Value> const int __numeric_traits_integer< _Value> ::__digits; 
# 99 "/usr/include/c++/4.8.2/ext/numeric_traits.h" 3
template< class _Value> 
# 100
struct __numeric_traits_floating { 
# 103
static const int __max_digits10 = ((2) + ((((std::__are_same< _Value, float> ::__value) ? 24 : ((std::__are_same< _Value, double> ::__value) ? 53 : 106)) * 643L) / (2136))); 
# 106
static const bool __is_signed = true; 
# 107
static const int __digits10 = ((std::__are_same< _Value, float> ::__value) ? 6 : ((std::__are_same< _Value, double> ::__value) ? 15 : 31)); 
# 108
static const int __max_exponent10 = ((std::__are_same< _Value, float> ::__value) ? 38 : ((std::__are_same< _Value, double> ::__value) ? 308 : 308)); 
# 109
}; 
# 111
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_digits10; 
# 114
template< class _Value> const bool __numeric_traits_floating< _Value> ::__is_signed; 
# 117
template< class _Value> const int __numeric_traits_floating< _Value> ::__digits10; 
# 120
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_exponent10; 
# 123
template< class _Value> 
# 124
struct __numeric_traits : public __conditional_type< std::__is_integer< _Value> ::__value, __numeric_traits_integer< _Value> , __numeric_traits_floating< _Value> > ::__type { 
# 128
}; 
# 131
}
# 36 "/usr/include/c++/4.8.2/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _Tp> inline _Tp *
# 47
__addressof(_Tp &__r) 
# 48
{ 
# 49
return reinterpret_cast< _Tp *>(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__r)))); 
# 51
} 
# 54
}
# 149 "/usr/include/c++/4.8.2/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 164 "/usr/include/c++/4.8.2/bits/move.h" 3
template< class _Tp> inline void 
# 166
swap(_Tp &__a, _Tp &__b) 
# 171
{ 
# 175
_Tp __tmp = __a; 
# 176
__a = __b; 
# 177
__b = __tmp; 
# 178
} 
# 183
template< class _Tp, size_t _Nm> inline void 
# 185
swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm]) 
# 189
{ 
# 190
for (size_t __n = (0); __n < _Nm; ++__n) { 
# 191
swap(__a[__n], __b[__n]); }  
# 192
} 
# 196
}
# 65 "/usr/include/c++/4.8.2/bits/stl_pair.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 95 "/usr/include/c++/4.8.2/bits/stl_pair.h" 3
template< class _T1, class _T2> 
# 96
struct pair { 
# 98
typedef _T1 first_type; 
# 99
typedef _T2 second_type; 
# 101
_T1 first; 
# 102
_T2 second; 
# 108
pair() : first(), second() 
# 109
{ } 
# 112
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 113
{ } 
# 117
template< class _U1, class _U2> 
# 118
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 119
{ } 
# 209 "/usr/include/c++/4.8.2/bits/stl_pair.h" 3
}; 
# 212
template< class _T1, class _T2> inline bool 
# 214 "/usr/include/c++/4.8.2/bits/stl_pair.h" 3
operator==(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 215
{ return ((__x.first) == (__y.first)) && ((__x.second) == (__y.second)); } 
# 218
template< class _T1, class _T2> inline bool 
# 220 "/usr/include/c++/4.8.2/bits/stl_pair.h" 3
operator<(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 221
{ return ((__x.first) < (__y.first)) || ((!((__y.first) < (__x.first))) && ((__x.second) < (__y.second))); 
# 222
} 
# 225
template< class _T1, class _T2> inline bool 
# 227 "/usr/include/c++/4.8.2/bits/stl_pair.h" 3
operator!=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 228
{ return !(__x == __y); } 
# 231
template< class _T1, class _T2> inline bool 
# 233 "/usr/include/c++/4.8.2/bits/stl_pair.h" 3
operator>(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 234
{ return __y < __x; } 
# 237
template< class _T1, class _T2> inline bool 
# 239 "/usr/include/c++/4.8.2/bits/stl_pair.h" 3
operator<=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 240
{ return !(__y < __x); } 
# 243
template< class _T1, class _T2> inline bool 
# 245 "/usr/include/c++/4.8.2/bits/stl_pair.h" 3
operator>=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 246
{ return !(__x < __y); } 
# 284 "/usr/include/c++/4.8.2/bits/stl_pair.h" 3
template< class _T1, class _T2> inline pair< _T1, _T2>  
# 286
make_pair(_T1 __x, _T2 __y) 
# 287
{ return pair< _T1, _T2> (__x, __y); } 
# 293
}
# 70 "/usr/include/c++/4.8.2/bits/stl_iterator_base_types.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 89 "/usr/include/c++/4.8.2/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { }; 
# 92
struct output_iterator_tag { }; 
# 95
struct forward_iterator_tag : public input_iterator_tag { }; 
# 99
struct bidirectional_iterator_tag : public forward_iterator_tag { }; 
# 103
struct random_access_iterator_tag : public bidirectional_iterator_tag { }; 
# 116 "/usr/include/c++/4.8.2/bits/stl_iterator_base_types.h" 3
template< class _Category, class _Tp, class _Distance = ptrdiff_t, class 
# 117
_Pointer = _Tp *, class _Reference = _Tp &> 
# 118
struct iterator { 
# 121
typedef _Category iterator_category; 
# 123
typedef _Tp value_type; 
# 125
typedef _Distance difference_type; 
# 127
typedef _Pointer pointer; 
# 129
typedef _Reference reference; 
# 130
}; 
# 162 "/usr/include/c++/4.8.2/bits/stl_iterator_base_types.h" 3
template< class _Iterator> 
# 163
struct iterator_traits { 
# 165
typedef typename _Iterator::iterator_category iterator_category; 
# 166
typedef typename _Iterator::value_type value_type; 
# 167
typedef typename _Iterator::difference_type difference_type; 
# 168
typedef typename _Iterator::pointer pointer; 
# 169
typedef typename _Iterator::reference reference; 
# 170
}; 
# 174
template< class _Tp> 
# 175
struct iterator_traits< _Tp *>  { 
# 177
typedef random_access_iterator_tag iterator_category; 
# 178
typedef _Tp value_type; 
# 179
typedef ptrdiff_t difference_type; 
# 180
typedef _Tp *pointer; 
# 181
typedef _Tp &reference; 
# 182
}; 
# 185
template< class _Tp> 
# 186
struct iterator_traits< const _Tp *>  { 
# 188
typedef random_access_iterator_tag iterator_category; 
# 189
typedef _Tp value_type; 
# 190
typedef ptrdiff_t difference_type; 
# 191
typedef const _Tp *pointer; 
# 192
typedef const _Tp &reference; 
# 193
}; 
# 199
template< class _Iter> inline typename iterator_traits< _Iter> ::iterator_category 
# 201
__iterator_category(const _Iter &) 
# 202
{ return typename iterator_traits< _Iter> ::iterator_category(); } 
# 208
template< class _Iterator, bool _HasBase> 
# 209
struct _Iter_base { 
# 211
typedef _Iterator iterator_type; 
# 212
static iterator_type _S_base(_Iterator __it) 
# 213
{ return __it; } 
# 214
}; 
# 216
template< class _Iterator> 
# 217
struct _Iter_base< _Iterator, true>  { 
# 219
typedef typename _Iterator::iterator_type iterator_type; 
# 220
static iterator_type _S_base(_Iterator __it) 
# 221
{ return (__it.base()); } 
# 222
}; 
# 233 "/usr/include/c++/4.8.2/bits/stl_iterator_base_types.h" 3
}
# 46 "/usr/include/c++/4.8.2/debug/debug.h" 3
namespace std { 
# 48
namespace __debug { }
# 49
}
# 54
namespace __gnu_debug { 
# 56
using namespace std::__debug;
# 57
}
# 67 "/usr/include/c++/4.8.2/bits/stl_iterator_base_funcs.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
template< class _InputIterator> inline typename iterator_traits< _InputIterator> ::difference_type 
# 73
__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag) 
# 75
{ 
# 79
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 80
while (__first != __last) 
# 81
{ 
# 82
++__first; 
# 83
++__n; 
# 84
}  
# 85
return __n; 
# 86
} 
# 88
template< class _RandomAccessIterator> inline typename iterator_traits< _RandomAccessIterator> ::difference_type 
# 90
__distance(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) 
# 92
{ 
# 96
return __last - __first; 
# 97
} 
# 112 "/usr/include/c++/4.8.2/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator> inline typename iterator_traits< _InputIterator> ::difference_type 
# 114
distance(_InputIterator __first, _InputIterator __last) 
# 115
{ 
# 117
return std::__distance(__first, __last, std::__iterator_category(__first)); 
# 119
} 
# 121
template< class _InputIterator, class _Distance> inline void 
# 123
__advance(_InputIterator &__i, _Distance __n, input_iterator_tag) 
# 124
{ 
# 127
; 
# 128
while (__n--) { 
# 129
++__i; }  
# 130
} 
# 132
template< class _BidirectionalIterator, class _Distance> inline void 
# 134
__advance(_BidirectionalIterator &__i, _Distance __n, bidirectional_iterator_tag) 
# 136
{ 
# 140
if (__n > 0) { 
# 141
while (__n--) { 
# 142
++__i; }  } else { 
# 144
while (__n++) { 
# 145
--__i; }  }  
# 146
} 
# 148
template< class _RandomAccessIterator, class _Distance> inline void 
# 150
__advance(_RandomAccessIterator &__i, _Distance __n, random_access_iterator_tag) 
# 152
{ 
# 156
__i += __n; 
# 157
} 
# 171 "/usr/include/c++/4.8.2/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator, class _Distance> inline void 
# 173
advance(_InputIterator &__i, _Distance __n) 
# 174
{ 
# 176
typename iterator_traits< _InputIterator> ::difference_type __d = __n; 
# 177
std::__advance(__i, __d, std::__iterator_category(__i)); 
# 178
} 
# 203 "/usr/include/c++/4.8.2/bits/stl_iterator_base_funcs.h" 3
}
# 67 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 95 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
template< class _Iterator> 
# 96
class reverse_iterator : public iterator< typename iterator_traits< _Iterator> ::iterator_category, typename iterator_traits< _Iterator> ::value_type, typename iterator_traits< _Iterator> ::difference_type, typename iterator_traits< _Iterator> ::pointer, typename iterator_traits< _Iterator> ::reference>  { 
# 104
protected: _Iterator current; 
# 106
typedef iterator_traits< _Iterator>  __traits_type; 
# 109
public: typedef _Iterator iterator_type; 
# 110
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 111
typedef typename iterator_traits< _Iterator> ::pointer pointer; 
# 112
typedef typename iterator_traits< _Iterator> ::reference reference; 
# 120
reverse_iterator() : current() { } 
# 126
explicit reverse_iterator(iterator_type __x) : current(__x) { } 
# 131
reverse_iterator(const reverse_iterator &__x) : current(__x.current) 
# 132
{ } 
# 138
template< class _Iter> 
# 139
reverse_iterator(const std::reverse_iterator< _Iter>  &__x) : current((__x.base())) 
# 140
{ } 
# 146
iterator_type base() const 
# 147
{ return current; } 
# 160 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
reference operator*() const 
# 161
{ 
# 162
_Iterator __tmp = current; 
# 163
return *(--__tmp); 
# 164
} 
# 172
pointer operator->() const 
# 173
{ return &operator*(); } 
# 181
reverse_iterator &operator++() 
# 182
{ 
# 183
--(current); 
# 184
return *this; 
# 185
} 
# 193
reverse_iterator operator++(int) 
# 194
{ 
# 195
reverse_iterator __tmp = *this; 
# 196
--(current); 
# 197
return __tmp; 
# 198
} 
# 206
reverse_iterator &operator--() 
# 207
{ 
# 208
++(current); 
# 209
return *this; 
# 210
} 
# 218
reverse_iterator operator--(int) 
# 219
{ 
# 220
reverse_iterator __tmp = *this; 
# 221
++(current); 
# 222
return __tmp; 
# 223
} 
# 231
reverse_iterator operator+(difference_type __n) const 
# 232
{ return ((reverse_iterator)((current) - __n)); } 
# 241
reverse_iterator &operator+=(difference_type __n) 
# 242
{ 
# 243
(current) -= __n; 
# 244
return *this; 
# 245
} 
# 253
reverse_iterator operator-(difference_type __n) const 
# 254
{ return ((reverse_iterator)((current) + __n)); } 
# 263
reverse_iterator &operator-=(difference_type __n) 
# 264
{ 
# 265
(current) += __n; 
# 266
return *this; 
# 267
} 
# 275
reference operator[](difference_type __n) const 
# 276
{ return *((*this) + __n); } 
# 277
}; 
# 289 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
template< class _Iterator> inline bool 
# 291 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator==(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 292
__y) 
# 293
{ return (__x.base()) == (__y.base()); } 
# 295
template< class _Iterator> inline bool 
# 297 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator<(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 298
__y) 
# 299
{ return (__y.base()) < (__x.base()); } 
# 301
template< class _Iterator> inline bool 
# 303 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator!=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 304
__y) 
# 305
{ return !(__x == __y); } 
# 307
template< class _Iterator> inline bool 
# 309 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator>(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 310
__y) 
# 311
{ return __y < __x; } 
# 313
template< class _Iterator> inline bool 
# 315 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator<=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 316
__y) 
# 317
{ return !(__y < __x); } 
# 319
template< class _Iterator> inline bool 
# 321 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator>=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 322
__y) 
# 323
{ return !(__x < __y); } 
# 325
template< class _Iterator> inline typename reverse_iterator< _Iterator> ::difference_type 
# 327
operator-(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 328
__y) 
# 329
{ return (__y.base()) - (__x.base()); } 
# 331
template< class _Iterator> inline reverse_iterator< _Iterator>  
# 333
operator+(typename reverse_iterator< _Iterator> ::difference_type __n, const reverse_iterator< _Iterator>  &
# 334
__x) 
# 335
{ return ((reverse_iterator< _Iterator> )((__x.base()) - __n)); } 
# 339
template< class _IteratorL, class _IteratorR> inline bool 
# 341 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator==(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 342
__y) 
# 343
{ return (__x.base()) == (__y.base()); } 
# 345
template< class _IteratorL, class _IteratorR> inline bool 
# 347 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator<(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 348
__y) 
# 349
{ return (__y.base()) < (__x.base()); } 
# 351
template< class _IteratorL, class _IteratorR> inline bool 
# 353 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator!=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 354
__y) 
# 355
{ return !(__x == __y); } 
# 357
template< class _IteratorL, class _IteratorR> inline bool 
# 359 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator>(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 360
__y) 
# 361
{ return __y < __x; } 
# 363
template< class _IteratorL, class _IteratorR> inline bool 
# 365 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator<=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 366
__y) 
# 367
{ return !(__y < __x); } 
# 369
template< class _IteratorL, class _IteratorR> inline bool 
# 371 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator>=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 372
__y) 
# 373
{ return !(__x < __y); } 
# 375
template< class _IteratorL, class _IteratorR> inline typename reverse_iterator< _IteratorL> ::difference_type 
# 384
operator-(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 385
__y) 
# 387
{ return (__y.base()) - (__x.base()); } 
# 401 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
template< class _Container> 
# 402
class back_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 406
protected: _Container *container; 
# 410
public: typedef _Container container_type; 
# 414
explicit back_insert_iterator(_Container &__x) : container((&__x)) { } 
# 429 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
back_insert_iterator &operator=(typename _Container::const_reference __value) 
# 430
{ 
# 431
((container)->push_back(__value)); 
# 432
return *this; 
# 433
} 
# 452 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
back_insert_iterator &operator*() 
# 453
{ return *this; } 
# 457
back_insert_iterator &operator++() 
# 458
{ return *this; } 
# 462
back_insert_iterator operator++(int) 
# 463
{ return *this; } 
# 464
}; 
# 477 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
template< class _Container> inline back_insert_iterator< _Container>  
# 479
back_inserter(_Container &__x) 
# 480
{ return ((back_insert_iterator< _Container> )(__x)); } 
# 492 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
template< class _Container> 
# 493
class front_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 497
protected: _Container *container; 
# 501
public: typedef _Container container_type; 
# 504
explicit front_insert_iterator(_Container &__x) : container((&__x)) { } 
# 519 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
front_insert_iterator &operator=(typename _Container::const_reference __value) 
# 520
{ 
# 521
((container)->push_front(__value)); 
# 522
return *this; 
# 523
} 
# 542 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
front_insert_iterator &operator*() 
# 543
{ return *this; } 
# 547
front_insert_iterator &operator++() 
# 548
{ return *this; } 
# 552
front_insert_iterator operator++(int) 
# 553
{ return *this; } 
# 554
}; 
# 567 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
template< class _Container> inline front_insert_iterator< _Container>  
# 569
front_inserter(_Container &__x) 
# 570
{ return ((front_insert_iterator< _Container> )(__x)); } 
# 586 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
template< class _Container> 
# 587
class insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 591
protected: _Container *container; 
# 592
typename _Container::iterator iter; 
# 596
public: typedef _Container container_type; 
# 602
insert_iterator(_Container &__x, typename _Container::iterator __i) : container((&__x)), iter(__i) 
# 603
{ } 
# 630 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
insert_iterator &operator=(typename _Container::const_reference __value) 
# 631
{ 
# 632
(iter) = ((container)->insert(iter, __value)); 
# 633
++(iter); 
# 634
return *this; 
# 635
} 
# 656 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
insert_iterator &operator*() 
# 657
{ return *this; } 
# 661
insert_iterator &operator++() 
# 662
{ return *this; } 
# 666
insert_iterator &operator++(int) 
# 667
{ return *this; } 
# 668
}; 
# 681 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
template< class _Container, class _Iterator> inline insert_iterator< _Container>  
# 683
inserter(_Container &__x, _Iterator __i) 
# 684
{ 
# 685
return insert_iterator< _Container> (__x, (typename _Container::iterator)__i); 
# 687
} 
# 692
}
# 694
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 705 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
using std::iterator_traits;
# 706
using std::iterator;
# 707
template< class _Iterator, class _Container> 
# 708
class __normal_iterator { 
# 711
protected: _Iterator _M_current; 
# 713
typedef std::iterator_traits< _Iterator>  __traits_type; 
# 716
public: typedef _Iterator iterator_type; 
# 717
typedef typename std::iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 718
typedef typename std::iterator_traits< _Iterator> ::value_type value_type; 
# 719
typedef typename std::iterator_traits< _Iterator> ::difference_type difference_type; 
# 720
typedef typename std::iterator_traits< _Iterator> ::reference reference; 
# 721
typedef typename std::iterator_traits< _Iterator> ::pointer pointer; 
# 723
__normal_iterator() : _M_current(_Iterator()) { } 
# 726
explicit __normal_iterator(const _Iterator &__i) : _M_current(__i) { } 
# 729
template< class _Iter> 
# 730
__normal_iterator(const __gnu_cxx::__normal_iterator< _Iter, typename __enable_if< std::__are_same< _Iter, typename _Container::pointer> ::__value, _Container> ::__type>  &
# 733
__i) : _M_current((__i.base())) 
# 734
{ } 
# 738
reference operator*() const 
# 739
{ return *(_M_current); } 
# 742
pointer operator->() const 
# 743
{ return _M_current; } 
# 746
__normal_iterator &operator++() 
# 747
{ 
# 748
++(_M_current); 
# 749
return *this; 
# 750
} 
# 753
__normal_iterator operator++(int) 
# 754
{ return ((__normal_iterator)((_M_current)++)); } 
# 758
__normal_iterator &operator--() 
# 759
{ 
# 760
--(_M_current); 
# 761
return *this; 
# 762
} 
# 765
__normal_iterator operator--(int) 
# 766
{ return ((__normal_iterator)((_M_current)--)); } 
# 770
reference operator[](const difference_type &__n) const 
# 771
{ return (_M_current)[__n]; } 
# 774
__normal_iterator &operator+=(const difference_type &__n) 
# 775
{ (_M_current) += __n; return *this; } 
# 778
__normal_iterator operator+(const difference_type &__n) const 
# 779
{ return ((__normal_iterator)((_M_current) + __n)); } 
# 782
__normal_iterator &operator-=(const difference_type &__n) 
# 783
{ (_M_current) -= __n; return *this; } 
# 786
__normal_iterator operator-(const difference_type &__n) const 
# 787
{ return ((__normal_iterator)((_M_current) - __n)); } 
# 790
const _Iterator &base() const 
# 791
{ return _M_current; } 
# 792
}; 
# 803 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 805 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator==(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 806
__rhs) 
# 807
{ return (__lhs.base()) == (__rhs.base()); } 
# 809
template< class _Iterator, class _Container> inline bool 
# 811 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator==(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 812
__rhs) 
# 813
{ return (__lhs.base()) == (__rhs.base()); } 
# 815
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 817 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator!=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 818
__rhs) 
# 819
{ return (__lhs.base()) != (__rhs.base()); } 
# 821
template< class _Iterator, class _Container> inline bool 
# 823 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator!=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 824
__rhs) 
# 825
{ return (__lhs.base()) != (__rhs.base()); } 
# 828
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 830 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator<(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 831
__rhs) 
# 832
{ return (__lhs.base()) < (__rhs.base()); } 
# 834
template< class _Iterator, class _Container> inline bool 
# 836 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator<(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 837
__rhs) 
# 838
{ return (__lhs.base()) < (__rhs.base()); } 
# 840
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 842 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator>(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 843
__rhs) 
# 844
{ return (__lhs.base()) > (__rhs.base()); } 
# 846
template< class _Iterator, class _Container> inline bool 
# 848 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator>(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 849
__rhs) 
# 850
{ return (__lhs.base()) > (__rhs.base()); } 
# 852
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 854 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator<=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 855
__rhs) 
# 856
{ return (__lhs.base()) <= (__rhs.base()); } 
# 858
template< class _Iterator, class _Container> inline bool 
# 860 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator<=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 861
__rhs) 
# 862
{ return (__lhs.base()) <= (__rhs.base()); } 
# 864
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 866 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator>=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 867
__rhs) 
# 868
{ return (__lhs.base()) >= (__rhs.base()); } 
# 870
template< class _Iterator, class _Container> inline bool 
# 872 "/usr/include/c++/4.8.2/bits/stl_iterator.h" 3
operator>=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 873
__rhs) 
# 874
{ return (__lhs.base()) >= (__rhs.base()); } 
# 880
template< class _IteratorL, class _IteratorR, class _Container> inline typename __normal_iterator< _IteratorL, _Container> ::difference_type 
# 889
operator-(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 890
__rhs) 
# 892
{ return (__lhs.base()) - (__rhs.base()); } 
# 894
template< class _Iterator, class _Container> inline typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 896
operator-(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 897
__rhs) 
# 898
{ return (__lhs.base()) - (__rhs.base()); } 
# 900
template< class _Iterator, class _Container> inline __normal_iterator< _Iterator, _Container>  
# 902
operator+(typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 903
__n, const __normal_iterator< _Iterator, _Container>  &__i) 
# 904
{ return ((__normal_iterator< _Iterator, _Container> )((__i.base()) + __n)); } 
# 907
}
# 72 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 80
template< bool _BoolType> 
# 81
struct __iter_swap { 
# 83
template< class _ForwardIterator1, class _ForwardIterator2> static void 
# 85
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) 
# 86
{ 
# 88
typedef typename iterator_traits< _ForwardIterator1> ::value_type _ValueType1; 
# 89
_ValueType1 __tmp = (*__a); 
# 90
(*__a) = (*__b); 
# 91
(*__b) = __tmp; 
# 92
} 
# 93
}; 
# 96
template<> struct __iter_swap< true>  { 
# 98
template< class _ForwardIterator1, class _ForwardIterator2> static void 
# 100
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) 
# 101
{ 
# 102
swap(*__a, *__b); 
# 103
} 
# 104
}; 
# 117 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline void 
# 119
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) 
# 120
{ 
# 129
typedef typename iterator_traits< _ForwardIterator1> ::value_type _ValueType1; 
# 131
typedef typename iterator_traits< _ForwardIterator2> ::value_type _ValueType2; 
# 139
typedef typename iterator_traits< _ForwardIterator1> ::reference _ReferenceType1; 
# 141
typedef typename iterator_traits< _ForwardIterator2> ::reference _ReferenceType2; 
# 142
std::__iter_swap< __are_same< typename iterator_traits< _ForwardIterator1> ::value_type, typename iterator_traits< _ForwardIterator2> ::value_type> ::__value && __are_same< typename iterator_traits< _ForwardIterator1> ::value_type &, typename iterator_traits< _ForwardIterator1> ::reference> ::__value && __are_same< typename iterator_traits< _ForwardIterator2> ::value_type &, typename iterator_traits< _ForwardIterator2> ::reference> ::__value> ::iter_swap(__a, __b); 
# 149
} 
# 163 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> _ForwardIterator2 
# 165
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 166
__first2) 
# 167
{ 
# 173
; 
# 175
for (; __first1 != __last1; (++__first1), (++__first2)) { 
# 176
std::iter_swap(__first1, __first2); }  
# 177
return __first2; 
# 178
} 
# 191 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _Tp> inline const _Tp &
# 193
min(const _Tp &__a, const _Tp &__b) 
# 194
{ 
# 198
if (__b < __a) { 
# 199
return __b; }  
# 200
return __a; 
# 201
} 
# 214 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _Tp> inline const _Tp &
# 216
max(const _Tp &__a, const _Tp &__b) 
# 217
{ 
# 221
if (__a < __b) { 
# 222
return __b; }  
# 223
return __a; 
# 224
} 
# 237 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> inline const _Tp &
# 239
min(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 240
{ 
# 242
if (__comp(__b, __a)) { 
# 243
return __b; }  
# 244
return __a; 
# 245
} 
# 258 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> inline const _Tp &
# 260
max(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 261
{ 
# 263
if (__comp(__a, __b)) { 
# 264
return __b; }  
# 265
return __a; 
# 266
} 
# 270
template< class _Iterator> 
# 271
struct _Niter_base : public _Iter_base< _Iterator, __is_normal_iterator< _Iterator> ::__value>  { 
# 273
}; 
# 275
template< class _Iterator> inline typename _Niter_base< _Iterator> ::iterator_type 
# 277
__niter_base(_Iterator __it) 
# 278
{ return std::_Niter_base< _Iterator> ::_S_base(__it); } 
# 281
template< class _Iterator> 
# 282
struct _Miter_base : public _Iter_base< _Iterator, __is_move_iterator< _Iterator> ::__value>  { 
# 284
}; 
# 286
template< class _Iterator> inline typename _Miter_base< _Iterator> ::iterator_type 
# 288
__miter_base(_Iterator __it) 
# 289
{ return std::_Miter_base< _Iterator> ::_S_base(__it); } 
# 297
template< bool , bool , class > 
# 298
struct __copy_move { 
# 300
template< class _II, class _OI> static _OI 
# 302
__copy_m(_II __first, _II __last, _OI __result) 
# 303
{ 
# 304
for (; __first != __last; (++__result), (++__first)) { 
# 305
(*__result) = (*__first); }  
# 306
return __result; 
# 307
} 
# 308
}; 
# 326 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template<> struct __copy_move< false, false, random_access_iterator_tag>  { 
# 328
template< class _II, class _OI> static _OI 
# 330
__copy_m(_II __first, _II __last, _OI __result) 
# 331
{ 
# 332
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 333
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 334
{ 
# 335
(*__result) = (*__first); 
# 336
++__first; 
# 337
++__result; 
# 338
}  
# 339
return __result; 
# 340
} 
# 341
}; 
# 363 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< bool _IsMove> 
# 364
struct __copy_move< _IsMove, true, random_access_iterator_tag>  { 
# 366
template< class _Tp> static _Tp *
# 368
__copy_m(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 369
{ 
# 370
const ptrdiff_t _Num = __last - __first; 
# 371
if (_Num) { 
# 372
__builtin_memmove(__result, __first, sizeof(_Tp) * _Num); }  
# 373
return __result + _Num; 
# 374
} 
# 375
}; 
# 377
template< bool _IsMove, class _II, class _OI> inline _OI 
# 379
__copy_move_a(_II __first, _II __last, _OI __result) 
# 380
{ 
# 381
typedef typename iterator_traits< _II> ::value_type _ValueTypeI; 
# 382
typedef typename iterator_traits< _OI> ::value_type _ValueTypeO; 
# 383
typedef typename iterator_traits< _II> ::iterator_category _Category; 
# 384
const bool __simple = (__is_trivial(_ValueTypeI) && __is_pointer< _II> ::__value && __is_pointer< _OI> ::__value && __are_same< typename iterator_traits< _II> ::value_type, typename iterator_traits< _OI> ::value_type> ::__value); 
# 389
return std::__copy_move< _IsMove, __simple, typename iterator_traits< _II> ::iterator_category> ::__copy_m(__first, __last, __result); 
# 391
} 
# 395
template< class _CharT> struct char_traits; 
# 398
template< class _CharT, class _Traits> class istreambuf_iterator; 
# 401
template< class _CharT, class _Traits> class ostreambuf_iterator; 
# 404
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(_CharT *, _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 410
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(const _CharT *, const _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 416
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type __copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> > , istreambuf_iterator< _CharT, char_traits< _CharT> > , _CharT *); 
# 422
template< bool _IsMove, class _II, class _OI> inline _OI 
# 424
__copy_move_a2(_II __first, _II __last, _OI __result) 
# 425
{ 
# 426
return (_OI)std::__copy_move_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result)); 
# 429
} 
# 448 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 450
copy(_II __first, _II __last, _OI __result) 
# 451
{ 
# 456
; 
# 458
return std::__copy_move_a2< __is_move_iterator< _II> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 461
} 
# 500 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< bool , bool , class > 
# 501
struct __copy_move_backward { 
# 503
template< class _BI1, class _BI2> static _BI2 
# 505
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 506
{ 
# 507
while (__first != __last) { 
# 508
(*(--__result)) = (*(--__last)); }  
# 509
return __result; 
# 510
} 
# 511
}; 
# 529 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template<> struct __copy_move_backward< false, false, random_access_iterator_tag>  { 
# 531
template< class _BI1, class _BI2> static _BI2 
# 533
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 534
{ 
# 535
typename iterator_traits< _BI1> ::difference_type __n; 
# 536
for (__n = (__last - __first); __n > 0; --__n) { 
# 537
(*(--__result)) = (*(--__last)); }  
# 538
return __result; 
# 539
} 
# 540
}; 
# 558 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< bool _IsMove> 
# 559
struct __copy_move_backward< _IsMove, true, random_access_iterator_tag>  { 
# 561
template< class _Tp> static _Tp *
# 563
__copy_move_b(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 564
{ 
# 565
const ptrdiff_t _Num = __last - __first; 
# 566
if (_Num) { 
# 567
__builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num); }  
# 568
return __result - _Num; 
# 569
} 
# 570
}; 
# 572
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 574
__copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result) 
# 575
{ 
# 576
typedef typename iterator_traits< _BI1> ::value_type _ValueType1; 
# 577
typedef typename iterator_traits< _BI2> ::value_type _ValueType2; 
# 578
typedef typename iterator_traits< _BI1> ::iterator_category _Category; 
# 579
const bool __simple = (__is_trivial(_ValueType1) && __is_pointer< _BI1> ::__value && __is_pointer< _BI2> ::__value && __are_same< typename iterator_traits< _BI1> ::value_type, typename iterator_traits< _BI2> ::value_type> ::__value); 
# 584
return std::__copy_move_backward< _IsMove, __simple, typename iterator_traits< _BI1> ::iterator_category> ::__copy_move_b(__first, __last, __result); 
# 588
} 
# 590
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 592
__copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result) 
# 593
{ 
# 594
return (_BI2)std::__copy_move_backward_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result)); 
# 597
} 
# 617 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 619
copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 620
{ 
# 627
; 
# 629
return std::__copy_move_backward_a2< __is_move_iterator< _BI1> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 632
} 
# 675 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, void> ::__type 
# 678
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 679
__value) 
# 680
{ 
# 681
for (; __first != __last; ++__first) { 
# 682
(*__first) = __value; }  
# 683
} 
# 685
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, void> ::__type 
# 688
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 689
__value) 
# 690
{ 
# 691
const _Tp __tmp = __value; 
# 692
for (; __first != __last; ++__first) { 
# 693
(*__first) = __tmp; }  
# 694
} 
# 697
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, void> ::__type 
# 700
__fill_a(_Tp *__first, _Tp *__last, const _Tp &__c) 
# 701
{ 
# 702
const _Tp __tmp = __c; 
# 703
__builtin_memset(__first, static_cast< unsigned char>(__tmp), __last - __first); 
# 705
} 
# 719 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline void 
# 721
fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value) 
# 722
{ 
# 726
; 
# 728
std::__fill_a(std::__niter_base(__first), std::__niter_base(__last), __value); 
# 730
} 
# 732
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 735
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 736
{ 
# 737
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), (++__first)) { 
# 739
(*__first) = __value; }  
# 740
return __first; 
# 741
} 
# 743
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 746
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 747
{ 
# 748
const _Tp __tmp = __value; 
# 749
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), (++__first)) { 
# 751
(*__first) = __tmp; }  
# 752
return __first; 
# 753
} 
# 755
template< class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, _Tp *> ::__type 
# 758
__fill_n_a(_Tp *__first, _Size __n, const _Tp &__c) 
# 759
{ 
# 760
std::__fill_a(__first, __first + __n, __c); 
# 761
return __first + __n; 
# 762
} 
# 779 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _OI, class _Size, class _Tp> inline _OI 
# 781
fill_n(_OI __first, _Size __n, const _Tp &__value) 
# 782
{ 
# 786
return (_OI)std::__fill_n_a(std::__niter_base(__first), __n, __value); 
# 787
} 
# 789
template< bool _BoolType> 
# 790
struct __equal { 
# 792
template< class _II1, class _II2> static bool 
# 794 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 795
{ 
# 796
for (; __first1 != __last1; (++__first1), (++__first2)) { 
# 797
if (!((*__first1) == (*__first2))) { 
# 798
return false; }  }  
# 799
return true; 
# 800
} 
# 801
}; 
# 804
template<> struct __equal< true>  { 
# 806
template< class _Tp> static bool 
# 808 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
equal(const _Tp *__first1, const _Tp *__last1, const _Tp *__first2) 
# 809
{ 
# 810
return !(__builtin_memcmp(__first1, __first2, sizeof(_Tp) * (__last1 - __first1))); 
# 812
} 
# 813
}; 
# 815
template< class _II1, class _II2> inline bool 
# 817 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
__equal_aux(_II1 __first1, _II1 __last1, _II2 __first2) 
# 818
{ 
# 819
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 820
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 821
const bool __simple = ((__is_integer< typename iterator_traits< _II1> ::value_type> ::__value || __is_pointer< typename iterator_traits< _II1> ::value_type> ::__value) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value && __are_same< typename iterator_traits< _II1> ::value_type, typename iterator_traits< _II2> ::value_type> ::__value); 
# 827
return std::__equal< __simple> ::equal(__first1, __last1, __first2); 
# 828
} 
# 831
template< class , class > 
# 832
struct __lc_rai { 
# 834
template< class _II1, class _II2> static _II1 
# 836
__newlast1(_II1, _II1 __last1, _II2, _II2) 
# 837
{ return __last1; } 
# 839
template< class _II> static bool 
# 841 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
__cnd2(_II __first, _II __last) 
# 842
{ return __first != __last; } 
# 843
}; 
# 846
template<> struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag>  { 
# 848
template< class _RAI1, class _RAI2> static _RAI1 
# 850
__newlast1(_RAI1 __first1, _RAI1 __last1, _RAI2 
# 851
__first2, _RAI2 __last2) 
# 852
{ 
# 854
const typename iterator_traits< _RAI1> ::difference_type __diff1 = __last1 - __first1; 
# 856
const typename iterator_traits< _RAI2> ::difference_type __diff2 = __last2 - __first2; 
# 857
return (__diff2 < __diff1) ? __first1 + __diff2 : __last1; 
# 858
} 
# 860
template< class _RAI> static bool 
# 862 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
__cnd2(_RAI, _RAI) 
# 863
{ return true; } 
# 864
}; 
# 866
template< bool _BoolType> 
# 867
struct __lexicographical_compare { 
# 869
template< class _II1, class _II2> static bool __lc(_II1, _II1, _II2, _II2); 
# 871
}; 
# 873
template< bool _BoolType> 
# 874
template< class _II1, class _II2> bool 
# 877 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
__lexicographical_compare< _BoolType> ::__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 878
{ 
# 879
typedef typename iterator_traits< _II1> ::iterator_category _Category1; 
# 880
typedef typename iterator_traits< _II2> ::iterator_category _Category2; 
# 881
typedef __lc_rai< typename iterator_traits< _II1> ::iterator_category, typename iterator_traits< _II2> ::iterator_category>  __rai_type; 
# 883
__last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2); 
# 885
for (; (__first1 != __last1) && __rai_type::__cnd2(__first2, __last2); (++__first1), (++__first2)) 
# 887
{ 
# 888
if ((*__first1) < (*__first2)) { 
# 889
return true; }  
# 890
if ((*__first2) < (*__first1)) { 
# 891
return false; }  
# 892
}  
# 893
return (__first1 == __last1) && (__first2 != __last2); 
# 894
} 
# 897
template<> struct __lexicographical_compare< true>  { 
# 899
template< class _Tp, class _Up> static bool 
# 901 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
__lc(const _Tp *__first1, const _Tp *__last1, const _Up *
# 902
__first2, const _Up *__last2) 
# 903
{ 
# 904
const size_t __len1 = __last1 - __first1; 
# 905
const size_t __len2 = __last2 - __first2; 
# 906
const int __result = __builtin_memcmp(__first1, __first2, std::min(__len1, __len2)); 
# 908
return (__result != 0) ? __result < 0 : (__len1 < __len2); 
# 909
} 
# 910
}; 
# 912
template< class _II1, class _II2> inline bool 
# 914 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
__lexicographical_compare_aux(_II1 __first1, _II1 __last1, _II2 
# 915
__first2, _II2 __last2) 
# 916
{ 
# 917
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 918
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 919
const bool __simple = (__is_byte< typename iterator_traits< _II1> ::value_type> ::__value && __is_byte< typename iterator_traits< _II2> ::value_type> ::__value && (!__gnu_cxx::__numeric_traits< typename iterator_traits< _II1> ::value_type> ::__is_signed) && (!__gnu_cxx::__numeric_traits< typename iterator_traits< _II2> ::value_type> ::__is_signed) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value); 
# 926
return std::__lexicographical_compare< __simple> ::__lc(__first1, __last1, __first2, __last2); 
# 928
} 
# 941 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> _ForwardIterator 
# 943
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 944
__val) 
# 945
{ 
# 951
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 956
; 
# 958
_DistanceType __len = std::distance(__first, __last); 
# 960
while (__len > 0) 
# 961
{ 
# 962
_DistanceType __half = __len >> 1; 
# 963
_ForwardIterator __middle = __first; 
# 964
std::advance(__middle, __half); 
# 965
if ((*__middle) < __val) 
# 966
{ 
# 967
__first = __middle; 
# 968
++__first; 
# 969
__len = ((__len - __half) - 1); 
# 970
} else { 
# 972
__len = __half; }  
# 973
}  
# 974
return __first; 
# 975
} 
# 980
inline int __lg(int __n) 
# 981
{ return ((sizeof(int) * (8)) - (1)) - (__builtin_clz(__n)); } 
# 984
inline unsigned __lg(unsigned __n) 
# 985
{ return ((sizeof(int) * (8)) - (1)) - (__builtin_clz(__n)); } 
# 988
inline long __lg(long __n) 
# 989
{ return ((sizeof(long) * (8)) - (1)) - (__builtin_clzl(__n)); } 
# 992
inline unsigned long __lg(unsigned long __n) 
# 993
{ return ((sizeof(long) * (8)) - (1)) - (__builtin_clzl(__n)); } 
# 996
inline long long __lg(long long __n) 
# 997
{ return ((sizeof(long long) * (8)) - (1)) - (__builtin_clzll(__n)); } 
# 1000
inline unsigned long long __lg(unsigned long long __n) 
# 1001
{ return ((sizeof(long long) * (8)) - (1)) - (__builtin_clzll(__n)); } 
# 1019 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1021 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1022
{ 
# 1029
; 
# 1031
return std::__equal_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2)); 
# 1034
} 
# 1051 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1053 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1054
__first2, _BinaryPredicate __binary_pred) 
# 1055
{ 
# 1059
; 
# 1061
for (; __first1 != __last1; (++__first1), (++__first2)) { 
# 1062
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1063
return false; }  }  
# 1064
return true; 
# 1065
} 
# 1082 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1084 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1085
__first2, _II2 __last2) 
# 1086
{ 
# 1096
; 
# 1097
; 
# 1099
return std::__lexicographical_compare_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2), std::__niter_base(__last2)); 
# 1103
} 
# 1118 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _II1, class _II2, class _Compare> bool 
# 1120 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1121
__first2, _II2 __last2, _Compare __comp) 
# 1122
{ 
# 1123
typedef typename iterator_traits< _II1> ::iterator_category _Category1; 
# 1124
typedef typename iterator_traits< _II2> ::iterator_category _Category2; 
# 1125
typedef __lc_rai< typename iterator_traits< _II1> ::iterator_category, typename iterator_traits< _II2> ::iterator_category>  __rai_type; 
# 1130
; 
# 1131
; 
# 1133
__last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2); 
# 1134
for (; (__first1 != __last1) && __rai_type::__cnd2(__first2, __last2); (++__first1), (++__first2)) 
# 1136
{ 
# 1137
if (__comp(*__first1, *__first2)) { 
# 1138
return true; }  
# 1139
if (__comp(*__first2, *__first1)) { 
# 1140
return false; }  
# 1141
}  
# 1142
return (__first1 == __last1) && (__first2 != __last2); 
# 1143
} 
# 1158 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> pair< _InputIterator1, _InputIterator2>  
# 1160
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1161
__first2) 
# 1162
{ 
# 1169
; 
# 1171
while ((__first1 != __last1) && ((*__first1) == (*__first2))) 
# 1172
{ 
# 1173
++__first1; 
# 1174
++__first2; 
# 1175
}  
# 1176
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1177
} 
# 1195 "/usr/include/c++/4.8.2/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1196
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1198
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1199
__first2, _BinaryPredicate __binary_pred) 
# 1200
{ 
# 1204
; 
# 1206
while ((__first1 != __last1) && ((bool)__binary_pred(*__first1, *__first2))) 
# 1207
{ 
# 1208
++__first1; 
# 1209
++__first2; 
# 1210
}  
# 1211
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1212
} 
# 1215
}
# 43 "/usr/include/c++/4.8.2/bits/char_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 57 "/usr/include/c++/4.8.2/bits/char_traits.h" 3
template< class _CharT> 
# 58
struct _Char_types { 
# 60
typedef unsigned long int_type; 
# 61
typedef std::streampos pos_type; 
# 62
typedef std::streamoff off_type; 
# 63
typedef mbstate_t state_type; 
# 64
}; 
# 82 "/usr/include/c++/4.8.2/bits/char_traits.h" 3
template< class _CharT> 
# 83
struct char_traits { 
# 85
typedef _CharT char_type; 
# 86
typedef typename _Char_types< _CharT> ::int_type int_type; 
# 87
typedef typename _Char_types< _CharT> ::pos_type pos_type; 
# 88
typedef typename _Char_types< _CharT> ::off_type off_type; 
# 89
typedef typename _Char_types< _CharT> ::state_type state_type; 
# 92
static void assign(char_type &__c1, const char_type &__c2) 
# 93
{ __c1 = __c2; } 
# 96 "/usr/include/c++/4.8.2/bits/char_traits.h" 3
static bool eq(const char_type &__c1, const char_type &__c2) 
# 97
{ return __c1 == __c2; } 
# 100 "/usr/include/c++/4.8.2/bits/char_traits.h" 3
static bool lt(const char_type &__c1, const char_type &__c2) 
# 101
{ return __c1 < __c2; } 
# 104
static int compare(const char_type * __s1, const char_type * __s2, std::size_t __n); 
# 107
static std::size_t length(const char_type * __s); 
# 110
static const char_type *find(const char_type * __s, std::size_t __n, const char_type & __a); 
# 113
static char_type *move(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 116
static char_type *copy(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 119
static char_type *assign(char_type * __s, std::size_t __n, char_type __a); 
# 122
static char_type to_char_type(const int_type &__c) 
# 123
{ return static_cast< char_type>(__c); } 
# 126
static int_type to_int_type(const char_type &__c) 
# 127
{ return static_cast< int_type>(__c); } 
# 130 "/usr/include/c++/4.8.2/bits/char_traits.h" 3
static bool eq_int_type(const int_type &__c1, const int_type &__c2) 
# 131
{ return __c1 == __c2; } 
# 134
static int_type eof() 
# 135
{ return static_cast< int_type>(-1); } 
# 138
static int_type not_eof(const int_type &__c) 
# 139
{ return (!(eq_int_type)(__c, (eof)())) ? __c : (to_int_type)(char_type()); } 
# 140
}; 
# 142
template< class _CharT> int 
# 145
char_traits< _CharT> ::compare(const char_type *__s1, const char_type *__s2, std::size_t __n) 
# 146
{ 
# 147
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 148
if ((lt)(__s1[__i], __s2[__i])) { 
# 149
return -1; } else { 
# 150
if ((lt)(__s2[__i], __s1[__i])) { 
# 151
return 1; }  }  }  
# 152
return 0; 
# 153
} 
# 155
template< class _CharT> std::size_t 
# 158
char_traits< _CharT> ::length(const char_type *__p) 
# 159
{ 
# 160
std::size_t __i = (0); 
# 161
while (!(eq)(__p[__i], char_type())) { 
# 162
++__i; }  
# 163
return __i; 
# 164
} 
# 166
template< class _CharT> const typename char_traits< _CharT> ::char_type *
# 169
char_traits< _CharT> ::find(const char_type *__s, std::size_t __n, const char_type &__a) 
# 170
{ 
# 171
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 172
if ((eq)(__s[__i], __a)) { 
# 173
return __s + __i; }  }  
# 174
return 0; 
# 175
} 
# 177
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 180
char_traits< _CharT> ::move(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 181
{ 
# 182
return static_cast< _CharT *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))); 
# 184
} 
# 186
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 189
char_traits< _CharT> ::copy(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 190
{ 
# 192
std::copy(__s2, __s2 + __n, __s1); 
# 193
return __s1; 
# 194
} 
# 196
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 199
char_traits< _CharT> ::assign(char_type *__s, std::size_t __n, char_type __a) 
# 200
{ 
# 202
std::fill_n(__s, __n, __a); 
# 203
return __s; 
# 204
} 
# 207
}
# 209
namespace std __attribute((__visibility__("default"))) { 
# 226 "/usr/include/c++/4.8.2/bits/char_traits.h" 3
template< class _CharT> 
# 227
struct char_traits : public __gnu_cxx::char_traits< _CharT>  { 
# 228
}; 
# 233
template<> struct char_traits< char>  { 
# 235
typedef char char_type; 
# 236
typedef int int_type; 
# 237
typedef streampos pos_type; 
# 238
typedef streamoff off_type; 
# 239
typedef mbstate_t state_type; 
# 242
static void assign(char_type &__c1, const char_type &__c2) 
# 243
{ __c1 = __c2; } 
# 246 "/usr/include/c++/4.8.2/bits/char_traits.h" 3
static bool eq(const char_type &__c1, const char_type &__c2) 
# 247
{ return __c1 == __c2; } 
# 250 "/usr/include/c++/4.8.2/bits/char_traits.h" 3
static bool lt(const char_type &__c1, const char_type &__c2) 
# 251
{ return __c1 < __c2; } 
# 254
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 255
{ return __builtin_memcmp(__s1, __s2, __n); } 
# 258
static size_t length(const char_type *__s) 
# 259
{ return __builtin_strlen(__s); } 
# 262
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 263
{ return static_cast< const char_type *>(__builtin_memchr(__s, __a, __n)); } 
# 266
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 267
{ return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n)); } 
# 270
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 271
{ return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n)); } 
# 274
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 275
{ return static_cast< char_type *>(__builtin_memset(__s, __a, __n)); } 
# 278
static char_type to_char_type(const int_type &__c) 
# 279
{ return static_cast< char_type>(__c); } 
# 284
static int_type to_int_type(const char_type &__c) 
# 285
{ return static_cast< int_type>(static_cast< unsigned char>(__c)); } 
# 288 "/usr/include/c++/4.8.2/bits/char_traits.h" 3
static bool eq_int_type(const int_type &__c1, const int_type &__c2) 
# 289
{ return __c1 == __c2; } 
# 292
static int_type eof() 
# 293
{ return static_cast< int_type>(-1); } 
# 296
static int_type not_eof(const int_type &__c) 
# 297
{ return (__c == eof()) ? 0 : __c; } 
# 298
}; 
# 304
template<> struct char_traits< wchar_t>  { 
# 306
typedef wchar_t char_type; 
# 307
typedef wint_t int_type; 
# 308
typedef streamoff off_type; 
# 309
typedef wstreampos pos_type; 
# 310
typedef mbstate_t state_type; 
# 313
static void assign(char_type &__c1, const char_type &__c2) 
# 314
{ __c1 = __c2; } 
# 317 "/usr/include/c++/4.8.2/bits/char_traits.h" 3
static bool eq(const char_type &__c1, const char_type &__c2) 
# 318
{ return __c1 == __c2; } 
# 321 "/usr/include/c++/4.8.2/bits/char_traits.h" 3
static bool lt(const char_type &__c1, const char_type &__c2) 
# 322
{ return __c1 < __c2; } 
# 325
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 326
{ return wmemcmp(__s1, __s2, __n); } 
# 329
static size_t length(const char_type *__s) 
# 330
{ return wcslen(__s); } 
# 333
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 334
{ return wmemchr(__s, __a, __n); } 
# 337
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 338
{ return wmemmove(__s1, __s2, __n); } 
# 341
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 342
{ return wmemcpy(__s1, __s2, __n); } 
# 345
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 346
{ return wmemset(__s, __a, __n); } 
# 349
static char_type to_char_type(const int_type &__c) 
# 350
{ return (char_type)__c; } 
# 353
static int_type to_int_type(const char_type &__c) 
# 354
{ return (int_type)__c; } 
# 357 "/usr/include/c++/4.8.2/bits/char_traits.h" 3
static bool eq_int_type(const int_type &__c1, const int_type &__c2) 
# 358
{ return __c1 == __c2; } 
# 361
static int_type eof() 
# 362
{ return static_cast< int_type>(4294967295U); } 
# 365
static int_type not_eof(const int_type &__c) 
# 366
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 367
}; 
# 371
}
# 32 "/usr/include/locale.h" 3
extern "C" {
# 54 "/usr/include/locale.h" 3
struct lconv { 
# 58
char *decimal_point; 
# 59
char *thousands_sep; 
# 65
char *grouping; 
# 71
char *int_curr_symbol; 
# 72
char *currency_symbol; 
# 73
char *mon_decimal_point; 
# 74
char *mon_thousands_sep; 
# 75
char *mon_grouping; 
# 76
char *positive_sign; 
# 77
char *negative_sign; 
# 78
char int_frac_digits; 
# 79
char frac_digits; 
# 81
char p_cs_precedes; 
# 83
char p_sep_by_space; 
# 85
char n_cs_precedes; 
# 87
char n_sep_by_space; 
# 94
char p_sign_posn; 
# 95
char n_sign_posn; 
# 98
char int_p_cs_precedes; 
# 100
char int_p_sep_by_space; 
# 102
char int_n_cs_precedes; 
# 104
char int_n_sep_by_space; 
# 111
char int_p_sign_posn; 
# 112
char int_n_sign_posn; 
# 121 "/usr/include/locale.h" 3
}; 
# 125
extern char *setlocale(int __category, const char * __locale) throw(); 
# 128
extern lconv *localeconv() throw(); 
# 152 "/usr/include/locale.h" 3
extern __locale_t newlocale(int __category_mask, const char * __locale, __locale_t __base) throw(); 
# 187 "/usr/include/locale.h" 3
extern __locale_t duplocale(__locale_t __dataset) throw(); 
# 191
extern void freelocale(__locale_t __dataset) throw(); 
# 198
extern __locale_t uselocale(__locale_t __dataset) throw(); 
# 206
}
# 51 "/usr/include/c++/4.8.2/clocale" 3
namespace std { 
# 53
using ::lconv;
# 54
using ::setlocale;
# 55
using ::localeconv;
# 56
}
# 48 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/c++locale.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 52
extern "C" __typeof__(uselocale) __uselocale; 
# 55
}
# 58
namespace std __attribute((__visibility__("default"))) { 
# 62
typedef __locale_t __c_locale; 
# 69
inline int __convert_from_v(const __c_locale &__cloc __attribute((__unused__)), char *
# 70
__out, const int 
# 71
__size __attribute((__unused__)), const char *
# 72
__fmt, ...) 
# 73
{ 
# 75
__c_locale __old = __gnu_cxx::__uselocale(__cloc); 
# 88 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/c++locale.h" 3
__builtin_va_list __args; 
# 89
__builtin_va_start(__args,__fmt); 
# 92
const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args); 
# 97
__builtin_va_end(__args); 
# 100
__gnu_cxx::__uselocale(__old); 
# 108
return __ret; 
# 109
} 
# 112
}
# 29 "/usr/include/ctype.h" 3
extern "C" {
# 48 "/usr/include/ctype.h" 3
enum { 
# 49
_ISupper = 256, 
# 50
_ISlower = 512, 
# 51
_ISalpha = 1024, 
# 52
_ISdigit = 2048, 
# 53
_ISxdigit = 4096, 
# 54
_ISspace = 8192, 
# 55
_ISprint = 16384, 
# 56
_ISgraph = 32768, 
# 57
_ISblank = 1, 
# 58
_IScntrl, 
# 59
_ISpunct = 4, 
# 60
_ISalnum = 8
# 61
}; 
# 80 "/usr/include/ctype.h" 3
extern const unsigned short **__ctype_b_loc() throw()
# 81
 __attribute((const)); 
# 82
extern const __int32_t **__ctype_tolower_loc() throw()
# 83
 __attribute((const)); 
# 84
extern const __int32_t **__ctype_toupper_loc() throw()
# 85
 __attribute((const)); 
# 111 "/usr/include/ctype.h" 3
extern int isalnum(int) throw(); 
# 112
extern int isalpha(int) throw(); 
# 113
extern int iscntrl(int) throw(); 
# 114
extern int isdigit(int) throw(); 
# 115
extern int islower(int) throw(); 
# 116
extern int isgraph(int) throw(); 
# 117
extern int isprint(int) throw(); 
# 118
extern int ispunct(int) throw(); 
# 119
extern int isspace(int) throw(); 
# 120
extern int isupper(int) throw(); 
# 121
extern int isxdigit(int) throw(); 
# 125
extern int tolower(int __c) throw(); 
# 128
extern int toupper(int __c) throw(); 
# 137
extern int isblank(int) throw(); 
# 144
extern int isctype(int __c, int __mask) throw(); 
# 151
extern int isascii(int __c) throw(); 
# 155
extern int toascii(int __c) throw(); 
# 159
extern int _toupper(int) throw(); 
# 160
extern int _tolower(int) throw(); 
# 272 "/usr/include/ctype.h" 3
extern int isalnum_l(int, __locale_t) throw(); 
# 273
extern int isalpha_l(int, __locale_t) throw(); 
# 274
extern int iscntrl_l(int, __locale_t) throw(); 
# 275
extern int isdigit_l(int, __locale_t) throw(); 
# 276
extern int islower_l(int, __locale_t) throw(); 
# 277
extern int isgraph_l(int, __locale_t) throw(); 
# 278
extern int isprint_l(int, __locale_t) throw(); 
# 279
extern int ispunct_l(int, __locale_t) throw(); 
# 280
extern int isspace_l(int, __locale_t) throw(); 
# 281
extern int isupper_l(int, __locale_t) throw(); 
# 282
extern int isxdigit_l(int, __locale_t) throw(); 
# 284
extern int isblank_l(int, __locale_t) throw(); 
# 288
extern int __tolower_l(int __c, __locale_t __l) throw(); 
# 289
extern int tolower_l(int __c, __locale_t __l) throw(); 
# 292
extern int __toupper_l(int __c, __locale_t __l) throw(); 
# 293
extern int toupper_l(int __c, __locale_t __l) throw(); 
# 348 "/usr/include/ctype.h" 3
}
# 62 "/usr/include/c++/4.8.2/cctype" 3
namespace std { 
# 64
using ::isalnum;
# 65
using ::isalpha;
# 66
using ::iscntrl;
# 67
using ::isdigit;
# 68
using ::isgraph;
# 69
using ::islower;
# 70
using ::isprint;
# 71
using ::ispunct;
# 72
using ::isspace;
# 73
using ::isupper;
# 74
using ::isxdigit;
# 75
using ::tolower;
# 76
using ::toupper;
# 77
}
# 44 "/usr/include/c++/4.8.2/bits/localefwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 55 "/usr/include/c++/4.8.2/bits/localefwd.h" 3
class locale; 
# 57
template< class _Facet> bool has_facet(const locale &) throw(); 
# 61 "/usr/include/c++/4.8.2/bits/localefwd.h" 3
template< class _Facet> const _Facet &use_facet(const locale &); 
# 66
template< class _CharT> inline bool isspace(_CharT, const locale &); 
# 70 "/usr/include/c++/4.8.2/bits/localefwd.h" 3
template< class _CharT> inline bool isprint(_CharT, const locale &); 
# 74 "/usr/include/c++/4.8.2/bits/localefwd.h" 3
template< class _CharT> inline bool iscntrl(_CharT, const locale &); 
# 78 "/usr/include/c++/4.8.2/bits/localefwd.h" 3
template< class _CharT> inline bool isupper(_CharT, const locale &); 
# 82 "/usr/include/c++/4.8.2/bits/localefwd.h" 3
template< class _CharT> inline bool islower(_CharT, const locale &); 
# 86 "/usr/include/c++/4.8.2/bits/localefwd.h" 3
template< class _CharT> inline bool isalpha(_CharT, const locale &); 
# 90 "/usr/include/c++/4.8.2/bits/localefwd.h" 3
template< class _CharT> inline bool isdigit(_CharT, const locale &); 
# 94 "/usr/include/c++/4.8.2/bits/localefwd.h" 3
template< class _CharT> inline bool ispunct(_CharT, const locale &); 
# 98 "/usr/include/c++/4.8.2/bits/localefwd.h" 3
template< class _CharT> inline bool isxdigit(_CharT, const locale &); 
# 102 "/usr/include/c++/4.8.2/bits/localefwd.h" 3
template< class _CharT> inline bool isalnum(_CharT, const locale &); 
# 106 "/usr/include/c++/4.8.2/bits/localefwd.h" 3
template< class _CharT> inline bool isgraph(_CharT, const locale &); 
# 110 "/usr/include/c++/4.8.2/bits/localefwd.h" 3
template< class _CharT> inline _CharT toupper(_CharT, const locale &); 
# 114
template< class _CharT> inline _CharT tolower(_CharT, const locale &); 
# 119
struct ctype_base; 
# 120
template< class _CharT> class ctype; 
# 122
template<> class ctype< char> ; 
# 124
template<> class ctype< wchar_t> ; 
# 126
template< class _CharT> class ctype_byname; 
# 130
class codecvt_base; 
# 131
template< class _InternT, class _ExternT, class _StateT> class codecvt; 
# 133
template<> class codecvt< char, char, __mbstate_t> ; 
# 135
template<> class codecvt< wchar_t, char, __mbstate_t> ; 
# 137
template< class _InternT, class _ExternT, class _StateT> class codecvt_byname; 
# 141
inline namespace __gnu_cxx_ldbl128 { 
# 142
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class num_get; 
# 144
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class num_put; 
# 146
}
# 147
template< class _CharT> class numpunct; 
# 148
template< class _CharT> class numpunct_byname; 
# 151
template< class _CharT> class collate; 
# 153
template< class _CharT> class collate_byname; 
# 157
class time_base; 
# 158
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get; 
# 160
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get_byname; 
# 162
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put; 
# 164
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put_byname; 
# 168
class money_base; 
# 169
inline namespace __gnu_cxx_ldbl128 { 
# 170
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class money_get; 
# 172
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class money_put; 
# 174
}
# 175
template< class _CharT, bool _Intl = false> class moneypunct; 
# 177
template< class _CharT, bool _Intl = false> class moneypunct_byname; 
# 181
class messages_base; 
# 182
template< class _CharT> class messages; 
# 184
template< class _CharT> class messages_byname; 
# 188
}
# 30 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/gthr.h" 3
#pragma GCC visibility push ( default )
# 73 "/usr/include/bits/sched.h" 3
struct sched_param { 
# 75
int __sched_priority; 
# 76
}; 
# 78
extern "C" {
# 82
extern int clone(int (* __fn)(void * __arg), void * __child_stack, int __flags, void * __arg, ...) throw(); 
# 86
extern int unshare(int __flags) throw(); 
# 89
extern int sched_getcpu() throw(); 
# 92
extern int setns(int __fd, int __nstype) throw(); 
# 96
}
# 104
struct __sched_param { 
# 106
int __sched_priority; 
# 107
}; 
# 119 "/usr/include/bits/sched.h" 3
typedef unsigned long __cpu_mask; 
# 129
typedef 
# 127
struct { 
# 128
__cpu_mask __bits[(1024) / ((8) * sizeof(__cpu_mask))]; 
# 129
} cpu_set_t; 
# 202 "/usr/include/bits/sched.h" 3
extern "C" {
# 204
extern int __sched_cpucount(size_t __setsize, const cpu_set_t * __setp) throw(); 
# 206
extern cpu_set_t *__sched_cpualloc(size_t __count) throw(); 
# 207
extern void __sched_cpufree(cpu_set_t * __set) throw(); 
# 209
}
# 47 "/usr/include/sched.h" 3
extern "C" {
# 50
extern int sched_setparam(__pid_t __pid, const sched_param * __param) throw(); 
# 54
extern int sched_getparam(__pid_t __pid, sched_param * __param) throw(); 
# 57
extern int sched_setscheduler(__pid_t __pid, int __policy, const sched_param * __param) throw(); 
# 61
extern int sched_getscheduler(__pid_t __pid) throw(); 
# 64
extern int sched_yield() throw(); 
# 67
extern int sched_get_priority_max(int __algorithm) throw(); 
# 70
extern int sched_get_priority_min(int __algorithm) throw(); 
# 73
extern int sched_rr_get_interval(__pid_t __pid, timespec * __t) throw(); 
# 117 "/usr/include/sched.h" 3
extern int sched_setaffinity(__pid_t __pid, size_t __cpusetsize, const cpu_set_t * __cpuset) throw(); 
# 121
extern int sched_getaffinity(__pid_t __pid, size_t __cpusetsize, cpu_set_t * __cpuset) throw(); 
# 125
}
# 43 "/usr/include/bits/setjmp.h" 3
typedef long __jmp_buf[64] __attribute((__aligned__(16))); 
# 33 "/usr/include/pthread.h" 3
enum { 
# 34
PTHREAD_CREATE_JOINABLE, 
# 36
PTHREAD_CREATE_DETACHED
# 38
}; 
# 43
enum { 
# 44
PTHREAD_MUTEX_TIMED_NP, 
# 45
PTHREAD_MUTEX_RECURSIVE_NP, 
# 46
PTHREAD_MUTEX_ERRORCHECK_NP, 
# 47
PTHREAD_MUTEX_ADAPTIVE_NP, 
# 50
PTHREAD_MUTEX_NORMAL = 0, 
# 51
PTHREAD_MUTEX_RECURSIVE, 
# 52
PTHREAD_MUTEX_ERRORCHECK, 
# 53
PTHREAD_MUTEX_DEFAULT = 0, 
# 57
PTHREAD_MUTEX_FAST_NP = 0
# 59
}; 
# 65
enum { 
# 66
PTHREAD_MUTEX_STALLED, 
# 67
PTHREAD_MUTEX_STALLED_NP = 0, 
# 68
PTHREAD_MUTEX_ROBUST, 
# 69
PTHREAD_MUTEX_ROBUST_NP = 1
# 70
}; 
# 77
enum { 
# 78
PTHREAD_PRIO_NONE, 
# 79
PTHREAD_PRIO_INHERIT, 
# 80
PTHREAD_PRIO_PROTECT
# 81
}; 
# 117 "/usr/include/pthread.h" 3
enum { 
# 118
PTHREAD_RWLOCK_PREFER_READER_NP, 
# 119
PTHREAD_RWLOCK_PREFER_WRITER_NP, 
# 120
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, 
# 121
PTHREAD_RWLOCK_DEFAULT_NP = 0
# 122
}; 
# 158 "/usr/include/pthread.h" 3
enum { 
# 159
PTHREAD_INHERIT_SCHED, 
# 161
PTHREAD_EXPLICIT_SCHED
# 163
}; 
# 168
enum { 
# 169
PTHREAD_SCOPE_SYSTEM, 
# 171
PTHREAD_SCOPE_PROCESS
# 173
}; 
# 178
enum { 
# 179
PTHREAD_PROCESS_PRIVATE, 
# 181
PTHREAD_PROCESS_SHARED
# 183
}; 
# 192 "/usr/include/pthread.h" 3
struct _pthread_cleanup_buffer { 
# 194
void (*__routine)(void *); 
# 195
void *__arg; 
# 196
int __canceltype; 
# 197
_pthread_cleanup_buffer *__prev; 
# 198
}; 
# 202
enum { 
# 203
PTHREAD_CANCEL_ENABLE, 
# 205
PTHREAD_CANCEL_DISABLE
# 207
}; 
# 209
enum { 
# 210
PTHREAD_CANCEL_DEFERRED, 
# 212
PTHREAD_CANCEL_ASYNCHRONOUS
# 214
}; 
# 230 "/usr/include/pthread.h" 3
extern "C" {
# 235
extern int pthread_create(pthread_t *__restrict__ __newthread, const pthread_attr_t *__restrict__ __attr, void *(* __start_routine)(void *), void *__restrict__ __arg) throw()
# 238
 __attribute((__nonnull__(1, 3))); 
# 244
extern void pthread_exit(void * __retval) __attribute((__noreturn__)); 
# 252
extern int pthread_join(pthread_t __th, void ** __thread_return); 
# 257
extern int pthread_tryjoin_np(pthread_t __th, void ** __thread_return) throw(); 
# 265
extern int pthread_timedjoin_np(pthread_t __th, void ** __thread_return, const timespec * __abstime); 
# 273
extern int pthread_detach(pthread_t __th) throw(); 
# 277
extern pthread_t pthread_self() throw() __attribute((const)); 
# 280
extern __attribute((gnu_inline)) inline int pthread_equal(pthread_t __thread1, pthread_t __thread2) throw()
# 281
 __attribute((const)); 
# 289
extern int pthread_attr_init(pthread_attr_t * __attr) throw() __attribute((__nonnull__(1))); 
# 292
extern int pthread_attr_destroy(pthread_attr_t * __attr) throw()
# 293
 __attribute((__nonnull__(1))); 
# 296
extern int pthread_attr_getdetachstate(const pthread_attr_t * __attr, int * __detachstate) throw()
# 298
 __attribute((__nonnull__(1, 2))); 
# 301
extern int pthread_attr_setdetachstate(pthread_attr_t * __attr, int __detachstate) throw()
# 303
 __attribute((__nonnull__(1))); 
# 307
extern int pthread_attr_getguardsize(const pthread_attr_t * __attr, size_t * __guardsize) throw()
# 309
 __attribute((__nonnull__(1, 2))); 
# 312
extern int pthread_attr_setguardsize(pthread_attr_t * __attr, size_t __guardsize) throw()
# 314
 __attribute((__nonnull__(1))); 
# 318
extern int pthread_attr_getschedparam(const pthread_attr_t *__restrict__ __attr, sched_param *__restrict__ __param) throw()
# 320
 __attribute((__nonnull__(1, 2))); 
# 323
extern int pthread_attr_setschedparam(pthread_attr_t *__restrict__ __attr, const sched_param *__restrict__ __param) throw()
# 325
 __attribute((__nonnull__(1, 2))); 
# 328
extern int pthread_attr_getschedpolicy(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __policy) throw()
# 330
 __attribute((__nonnull__(1, 2))); 
# 333
extern int pthread_attr_setschedpolicy(pthread_attr_t * __attr, int __policy) throw()
# 334
 __attribute((__nonnull__(1))); 
# 337
extern int pthread_attr_getinheritsched(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __inherit) throw()
# 339
 __attribute((__nonnull__(1, 2))); 
# 342
extern int pthread_attr_setinheritsched(pthread_attr_t * __attr, int __inherit) throw()
# 344
 __attribute((__nonnull__(1))); 
# 348
extern int pthread_attr_getscope(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __scope) throw()
# 350
 __attribute((__nonnull__(1, 2))); 
# 353
extern int pthread_attr_setscope(pthread_attr_t * __attr, int __scope) throw()
# 354
 __attribute((__nonnull__(1))); 
# 357
extern int pthread_attr_getstackaddr(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr) throw()
# 359
 __attribute((__nonnull__(1, 2))) __attribute((__deprecated__)); 
# 365
extern int pthread_attr_setstackaddr(pthread_attr_t * __attr, void * __stackaddr) throw()
# 367
 __attribute((__nonnull__(1))) __attribute((__deprecated__)); 
# 370
extern int pthread_attr_getstacksize(const pthread_attr_t *__restrict__ __attr, size_t *__restrict__ __stacksize) throw()
# 372
 __attribute((__nonnull__(1, 2))); 
# 377
extern int pthread_attr_setstacksize(pthread_attr_t * __attr, size_t __stacksize) throw()
# 379
 __attribute((__nonnull__(1))); 
# 383
extern int pthread_attr_getstack(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr, size_t *__restrict__ __stacksize) throw()
# 386
 __attribute((__nonnull__(1, 2, 3))); 
# 391
extern int pthread_attr_setstack(pthread_attr_t * __attr, void * __stackaddr, size_t __stacksize) throw()
# 392
 __attribute((__nonnull__(1))); 
# 398
extern int pthread_attr_setaffinity_np(pthread_attr_t * __attr, size_t __cpusetsize, const cpu_set_t * __cpuset) throw()
# 401
 __attribute((__nonnull__(1, 3))); 
# 405
extern int pthread_attr_getaffinity_np(const pthread_attr_t * __attr, size_t __cpusetsize, cpu_set_t * __cpuset) throw()
# 408
 __attribute((__nonnull__(1, 3))); 
# 414
extern int pthread_getattr_np(pthread_t __th, pthread_attr_t * __attr) throw()
# 415
 __attribute((__nonnull__(2))); 
# 423
extern int pthread_setschedparam(pthread_t __target_thread, int __policy, const sched_param * __param) throw()
# 425
 __attribute((__nonnull__(3))); 
# 428
extern int pthread_getschedparam(pthread_t __target_thread, int *__restrict__ __policy, sched_param *__restrict__ __param) throw()
# 431
 __attribute((__nonnull__(2, 3))); 
# 434
extern int pthread_setschedprio(pthread_t __target_thread, int __prio) throw(); 
# 440
extern int pthread_getname_np(pthread_t __target_thread, char * __buf, size_t __buflen) throw()
# 442
 __attribute((__nonnull__(2))); 
# 445
extern int pthread_setname_np(pthread_t __target_thread, const char * __name) throw()
# 446
 __attribute((__nonnull__(2))); 
# 452
extern int pthread_getconcurrency() throw(); 
# 455
extern int pthread_setconcurrency(int __level) throw(); 
# 463
extern int pthread_yield() throw(); 
# 468
extern int pthread_setaffinity_np(pthread_t __th, size_t __cpusetsize, const cpu_set_t * __cpuset) throw()
# 470
 __attribute((__nonnull__(3))); 
# 473
extern int pthread_getaffinity_np(pthread_t __th, size_t __cpusetsize, cpu_set_t * __cpuset) throw()
# 475
 __attribute((__nonnull__(3))); 
# 488 "/usr/include/pthread.h" 3
extern int pthread_once(pthread_once_t * __once_control, void (* __init_routine)(void))
# 489
 __attribute((__nonnull__(1, 2))); 
# 500 "/usr/include/pthread.h" 3
extern int pthread_setcancelstate(int __state, int * __oldstate); 
# 504
extern int pthread_setcanceltype(int __type, int * __oldtype); 
# 507
extern int pthread_cancel(pthread_t __th); 
# 512
extern void pthread_testcancel(); 
# 525
typedef 
# 518
struct { 
# 520
struct { 
# 521
__jmp_buf __cancel_jmp_buf; 
# 522
int __mask_was_saved; 
# 523
} __cancel_jmp_buf[1]; 
# 524
void *__pad[4]; 
# 525
} __pthread_unwind_buf_t __attribute((__aligned__)); 
# 534 "/usr/include/pthread.h" 3
struct __pthread_cleanup_frame { 
# 536
void (*__cancel_routine)(void *); 
# 537
void *__cancel_arg; 
# 538
int __do_it; 
# 539
int __cancel_type; 
# 540
}; 
# 545
class __pthread_cleanup_class { 
# 547
void (*__cancel_routine)(void *); 
# 548
void *__cancel_arg; 
# 549
int __do_it; 
# 550
int __cancel_type; 
# 553
public: __pthread_cleanup_class(void (*__fct)(void *), void *__arg) : __cancel_routine(__fct), __cancel_arg(__arg), __do_it(1) 
# 554
{ } 
# 555
~__pthread_cleanup_class() { if (__do_it) { (__cancel_routine)(__cancel_arg); }  } 
# 556
void __setdoit(int __newval) { (__do_it) = __newval; } 
# 557
void __defer() { pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &(__cancel_type)); 
# 558
} 
# 559
void __restore() const { pthread_setcanceltype(__cancel_type, 0); } 
# 560
}; 
# 736 "/usr/include/pthread.h" 3
struct __jmp_buf_tag; 
# 737
extern int __sigsetjmp(__jmp_buf_tag * __env, int __savemask) throw(); 
# 743
extern int pthread_mutex_init(pthread_mutex_t * __mutex, const pthread_mutexattr_t * __mutexattr) throw()
# 745
 __attribute((__nonnull__(1))); 
# 748
extern int pthread_mutex_destroy(pthread_mutex_t * __mutex) throw()
# 749
 __attribute((__nonnull__(1))); 
# 752
extern int pthread_mutex_trylock(pthread_mutex_t * __mutex) throw()
# 753
 __attribute((__nonnull__(1))); 
# 756
extern int pthread_mutex_lock(pthread_mutex_t * __mutex) throw()
# 757
 __attribute((__nonnull__(1))); 
# 761
extern int pthread_mutex_timedlock(pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime) throw()
# 763
 __attribute((__nonnull__(1, 2))); 
# 767
extern int pthread_mutex_unlock(pthread_mutex_t * __mutex) throw()
# 768
 __attribute((__nonnull__(1))); 
# 772
extern int pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict__ __mutex, int *__restrict__ __prioceiling) throw()
# 775
 __attribute((__nonnull__(1, 2))); 
# 779
extern int pthread_mutex_setprioceiling(pthread_mutex_t *__restrict__ __mutex, int __prioceiling, int *__restrict__ __old_ceiling) throw()
# 782
 __attribute((__nonnull__(1, 3))); 
# 787
extern int pthread_mutex_consistent(pthread_mutex_t * __mutex) throw()
# 788
 __attribute((__nonnull__(1))); 
# 790
extern int pthread_mutex_consistent_np(pthread_mutex_t * __mutex) throw()
# 791
 __attribute((__nonnull__(1))); 
# 800 "/usr/include/pthread.h" 3
extern int pthread_mutexattr_init(pthread_mutexattr_t * __attr) throw()
# 801
 __attribute((__nonnull__(1))); 
# 804
extern int pthread_mutexattr_destroy(pthread_mutexattr_t * __attr) throw()
# 805
 __attribute((__nonnull__(1))); 
# 808
extern int pthread_mutexattr_getpshared(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 811
 __attribute((__nonnull__(1, 2))); 
# 814
extern int pthread_mutexattr_setpshared(pthread_mutexattr_t * __attr, int __pshared) throw()
# 816
 __attribute((__nonnull__(1))); 
# 820
extern int pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __kind) throw()
# 822
 __attribute((__nonnull__(1, 2))); 
# 827
extern int pthread_mutexattr_settype(pthread_mutexattr_t * __attr, int __kind) throw()
# 828
 __attribute((__nonnull__(1))); 
# 832
extern int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __protocol) throw()
# 835
 __attribute((__nonnull__(1, 2))); 
# 839
extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t * __attr, int __protocol) throw()
# 841
 __attribute((__nonnull__(1))); 
# 844
extern int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __prioceiling) throw()
# 847
 __attribute((__nonnull__(1, 2))); 
# 850
extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t * __attr, int __prioceiling) throw()
# 852
 __attribute((__nonnull__(1))); 
# 856
extern int pthread_mutexattr_getrobust(const pthread_mutexattr_t * __attr, int * __robustness) throw()
# 858
 __attribute((__nonnull__(1, 2))); 
# 860
extern int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t * __attr, int * __robustness) throw()
# 862
 __attribute((__nonnull__(1, 2))); 
# 866
extern int pthread_mutexattr_setrobust(pthread_mutexattr_t * __attr, int __robustness) throw()
# 868
 __attribute((__nonnull__(1))); 
# 870
extern int pthread_mutexattr_setrobust_np(pthread_mutexattr_t * __attr, int __robustness) throw()
# 872
 __attribute((__nonnull__(1))); 
# 882 "/usr/include/pthread.h" 3
extern int pthread_rwlock_init(pthread_rwlock_t *__restrict__ __rwlock, const pthread_rwlockattr_t *__restrict__ __attr) throw()
# 884
 __attribute((__nonnull__(1))); 
# 887
extern int pthread_rwlock_destroy(pthread_rwlock_t * __rwlock) throw()
# 888
 __attribute((__nonnull__(1))); 
# 891
extern int pthread_rwlock_rdlock(pthread_rwlock_t * __rwlock) throw()
# 892
 __attribute((__nonnull__(1))); 
# 895
extern int pthread_rwlock_tryrdlock(pthread_rwlock_t * __rwlock) throw()
# 896
 __attribute((__nonnull__(1))); 
# 900
extern int pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) throw()
# 902
 __attribute((__nonnull__(1, 2))); 
# 906
extern int pthread_rwlock_wrlock(pthread_rwlock_t * __rwlock) throw()
# 907
 __attribute((__nonnull__(1))); 
# 910
extern int pthread_rwlock_trywrlock(pthread_rwlock_t * __rwlock) throw()
# 911
 __attribute((__nonnull__(1))); 
# 915
extern int pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) throw()
# 917
 __attribute((__nonnull__(1, 2))); 
# 921
extern int pthread_rwlock_unlock(pthread_rwlock_t * __rwlock) throw()
# 922
 __attribute((__nonnull__(1))); 
# 928
extern int pthread_rwlockattr_init(pthread_rwlockattr_t * __attr) throw()
# 929
 __attribute((__nonnull__(1))); 
# 932
extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t * __attr) throw()
# 933
 __attribute((__nonnull__(1))); 
# 936
extern int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 939
 __attribute((__nonnull__(1, 2))); 
# 942
extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t * __attr, int __pshared) throw()
# 944
 __attribute((__nonnull__(1))); 
# 947
extern int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pref) throw()
# 950
 __attribute((__nonnull__(1, 2))); 
# 953
extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * __attr, int __pref) throw()
# 954
 __attribute((__nonnull__(1))); 
# 962
extern int pthread_cond_init(pthread_cond_t *__restrict__ __cond, const pthread_condattr_t *__restrict__ __cond_attr) throw()
# 964
 __attribute((__nonnull__(1))); 
# 967
extern int pthread_cond_destroy(pthread_cond_t * __cond) throw()
# 968
 __attribute((__nonnull__(1))); 
# 971
extern int pthread_cond_signal(pthread_cond_t * __cond) throw()
# 972
 __attribute((__nonnull__(1))); 
# 975
extern int pthread_cond_broadcast(pthread_cond_t * __cond) throw()
# 976
 __attribute((__nonnull__(1))); 
# 983
extern int pthread_cond_wait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex)
# 985
 __attribute((__nonnull__(1, 2))); 
# 994 "/usr/include/pthread.h" 3
extern int pthread_cond_timedwait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime)
# 997
 __attribute((__nonnull__(1, 2, 3))); 
# 1002
extern int pthread_condattr_init(pthread_condattr_t * __attr) throw()
# 1003
 __attribute((__nonnull__(1))); 
# 1006
extern int pthread_condattr_destroy(pthread_condattr_t * __attr) throw()
# 1007
 __attribute((__nonnull__(1))); 
# 1010
extern int pthread_condattr_getpshared(const pthread_condattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 1013
 __attribute((__nonnull__(1, 2))); 
# 1016
extern int pthread_condattr_setpshared(pthread_condattr_t * __attr, int __pshared) throw()
# 1017
 __attribute((__nonnull__(1))); 
# 1021
extern int pthread_condattr_getclock(const pthread_condattr_t *__restrict__ __attr, __clockid_t *__restrict__ __clock_id) throw()
# 1024
 __attribute((__nonnull__(1, 2))); 
# 1027
extern int pthread_condattr_setclock(pthread_condattr_t * __attr, __clockid_t __clock_id) throw()
# 1029
 __attribute((__nonnull__(1))); 
# 1038 "/usr/include/pthread.h" 3
extern int pthread_spin_init(pthread_spinlock_t * __lock, int __pshared) throw()
# 1039
 __attribute((__nonnull__(1))); 
# 1042
extern int pthread_spin_destroy(pthread_spinlock_t * __lock) throw()
# 1043
 __attribute((__nonnull__(1))); 
# 1046
extern int pthread_spin_lock(pthread_spinlock_t * __lock) throw()
# 1047
 __attribute((__nonnull__(1))); 
# 1050
extern int pthread_spin_trylock(pthread_spinlock_t * __lock) throw()
# 1051
 __attribute((__nonnull__(1))); 
# 1054
extern int pthread_spin_unlock(pthread_spinlock_t * __lock) throw()
# 1055
 __attribute((__nonnull__(1))); 
# 1062
extern int pthread_barrier_init(pthread_barrier_t *__restrict__ __barrier, const pthread_barrierattr_t *__restrict__ __attr, unsigned __count) throw()
# 1065
 __attribute((__nonnull__(1))); 
# 1068
extern int pthread_barrier_destroy(pthread_barrier_t * __barrier) throw()
# 1069
 __attribute((__nonnull__(1))); 
# 1072
extern int pthread_barrier_wait(pthread_barrier_t * __barrier) throw()
# 1073
 __attribute((__nonnull__(1))); 
# 1077
extern int pthread_barrierattr_init(pthread_barrierattr_t * __attr) throw()
# 1078
 __attribute((__nonnull__(1))); 
# 1081
extern int pthread_barrierattr_destroy(pthread_barrierattr_t * __attr) throw()
# 1082
 __attribute((__nonnull__(1))); 
# 1085
extern int pthread_barrierattr_getpshared(const pthread_barrierattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 1088
 __attribute((__nonnull__(1, 2))); 
# 1091
extern int pthread_barrierattr_setpshared(pthread_barrierattr_t * __attr, int __pshared) throw()
# 1093
 __attribute((__nonnull__(1))); 
# 1105 "/usr/include/pthread.h" 3
extern int pthread_key_create(pthread_key_t * __key, void (* __destr_function)(void *)) throw()
# 1107
 __attribute((__nonnull__(1))); 
# 1110
extern int pthread_key_delete(pthread_key_t __key) throw(); 
# 1113
extern void *pthread_getspecific(pthread_key_t __key) throw(); 
# 1116
extern int pthread_setspecific(pthread_key_t __key, const void * __pointer) throw(); 
# 1122
extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t * __clock_id) throw()
# 1124
 __attribute((__nonnull__(2))); 
# 1139 "/usr/include/pthread.h" 3
extern int pthread_atfork(void (* __prepare)(void), void (* __parent)(void), void (* __child)(void)) throw(); 
# 1146
__attribute((__gnu_inline__)) extern inline int
# 1147
 __attribute((__leaf__)) pthread_equal(pthread_t __thread1, pthread_t __thread2) throw() 
# 1148
{ 
# 1149
return __thread1 == __thread2; 
# 1150
} 
# 1153
}
# 47 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/gthr-default.h" 3
typedef pthread_t __gthread_t; 
# 48
typedef pthread_key_t __gthread_key_t; 
# 49
typedef pthread_once_t __gthread_once_t; 
# 50
typedef pthread_mutex_t __gthread_mutex_t; 
# 51
typedef pthread_mutex_t __gthread_recursive_mutex_t; 
# 52
typedef pthread_cond_t __gthread_cond_t; 
# 53
typedef timespec __gthread_time_t; 
# 101 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/gthr-default.h" 3
static __typeof__(pthread_once) __gthrw_pthread_once __attribute((__weakref__("pthread_once"))); 
# 102
static __typeof__(pthread_getspecific) __gthrw_pthread_getspecific __attribute((__weakref__("pthread_getspecific"))); 
# 103
static __typeof__(pthread_setspecific) __gthrw_pthread_setspecific __attribute((__weakref__("pthread_setspecific"))); 
# 105
static __typeof__(pthread_create) __gthrw_pthread_create __attribute((__weakref__("pthread_create"))); 
# 106
static __typeof__(pthread_join) __gthrw_pthread_join __attribute((__weakref__("pthread_join"))); 
# 107
static __typeof__(pthread_equal) __gthrw_pthread_equal __attribute((__weakref__("pthread_equal"))); 
# 108
static __typeof__(pthread_self) __gthrw_pthread_self __attribute((__weakref__("pthread_self"))); 
# 109
static __typeof__(pthread_detach) __gthrw_pthread_detach __attribute((__weakref__("pthread_detach"))); 
# 111
static __typeof__(pthread_cancel) __gthrw_pthread_cancel __attribute((__weakref__("pthread_cancel"))); 
# 113
static __typeof__(sched_yield) __gthrw_sched_yield __attribute((__weakref__("sched_yield"))); 
# 115
static __typeof__(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute((__weakref__("pthread_mutex_lock"))); 
# 116
static __typeof__(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute((__weakref__("pthread_mutex_trylock"))); 
# 118
static __typeof__(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute((__weakref__("pthread_mutex_timedlock"))); 
# 120
static __typeof__(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute((__weakref__("pthread_mutex_unlock"))); 
# 121
static __typeof__(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute((__weakref__("pthread_mutex_init"))); 
# 122
static __typeof__(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute((__weakref__("pthread_mutex_destroy"))); 
# 124
static __typeof__(pthread_cond_init) __gthrw_pthread_cond_init __attribute((__weakref__("pthread_cond_init"))); 
# 125
static __typeof__(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute((__weakref__("pthread_cond_broadcast"))); 
# 126
static __typeof__(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute((__weakref__("pthread_cond_signal"))); 
# 127
static __typeof__(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute((__weakref__("pthread_cond_wait"))); 
# 128
static __typeof__(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute((__weakref__("pthread_cond_timedwait"))); 
# 129
static __typeof__(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute((__weakref__("pthread_cond_destroy"))); 
# 131
static __typeof__(pthread_key_create) __gthrw_pthread_key_create __attribute((__weakref__("pthread_key_create"))); 
# 132
static __typeof__(pthread_key_delete) __gthrw_pthread_key_delete __attribute((__weakref__("pthread_key_delete"))); 
# 133
static __typeof__(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute((__weakref__("pthread_mutexattr_init"))); 
# 134
static __typeof__(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute((__weakref__("pthread_mutexattr_settype"))); 
# 135
static __typeof__(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute((__weakref__("pthread_mutexattr_destroy"))); 
# 236 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/gthr-default.h" 3
static __typeof__(pthread_key_create) __gthrw___pthread_key_create __attribute((__weakref__("__pthread_key_create"))); 
# 247 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/gthr-default.h" 3
static inline int __gthread_active_p() 
# 248
{ 
# 249
static void *const __gthread_active_ptr = __extension__ ((void *)(&__gthrw___pthread_key_create)); 
# 251
return __gthread_active_ptr != (0); 
# 252
} 
# 659 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/gthr-default.h" 3
static inline int __gthread_create(__gthread_t *__threadid, void *(*__func)(void *), void *
# 660
__args) 
# 661
{ 
# 662
return __gthrw_pthread_create(__threadid, __null, __func, __args); 
# 663
} 
# 666
static inline int __gthread_join(__gthread_t __threadid, void **__value_ptr) 
# 667
{ 
# 668
return __gthrw_pthread_join(__threadid, __value_ptr); 
# 669
} 
# 672
static inline int __gthread_detach(__gthread_t __threadid) 
# 673
{ 
# 674
return __gthrw_pthread_detach(__threadid); 
# 675
} 
# 678
static inline int __gthread_equal(__gthread_t __t1, __gthread_t __t2) 
# 679
{ 
# 680
return __gthrw_pthread_equal(__t1, __t2); 
# 681
} 
# 684
static inline __gthread_t __gthread_self() 
# 685
{ 
# 686
return __gthrw_pthread_self(); 
# 687
} 
# 690
static inline int __gthread_yield() 
# 691
{ 
# 692
return __gthrw_sched_yield(); 
# 693
} 
# 696
static inline int __gthread_once(__gthread_once_t *__once, void (*__func)(void)) 
# 697
{ 
# 698
if (__gthread_active_p()) { 
# 699
return __gthrw_pthread_once(__once, __func); } else { 
# 701
return -1; }  
# 702
} 
# 705
static inline int __gthread_key_create(__gthread_key_t *__key, void (*__dtor)(void *)) 
# 706
{ 
# 707
return __gthrw_pthread_key_create(__key, __dtor); 
# 708
} 
# 711
static inline int __gthread_key_delete(__gthread_key_t __key) 
# 712
{ 
# 713
return __gthrw_pthread_key_delete(__key); 
# 714
} 
# 717
static inline void *__gthread_getspecific(__gthread_key_t __key) 
# 718
{ 
# 719
return __gthrw_pthread_getspecific(__key); 
# 720
} 
# 723
static inline int __gthread_setspecific(__gthread_key_t __key, const void *__ptr) 
# 724
{ 
# 725
return __gthrw_pthread_setspecific(__key, __ptr); 
# 726
} 
# 729
static inline void __gthread_mutex_init_function(__gthread_mutex_t *__mutex) 
# 730
{ 
# 731
if (__gthread_active_p()) { 
# 732
__gthrw_pthread_mutex_init(__mutex, __null); }  
# 733
} 
# 736
static inline int __gthread_mutex_destroy(__gthread_mutex_t *__mutex) 
# 737
{ 
# 738
if (__gthread_active_p()) { 
# 739
return __gthrw_pthread_mutex_destroy(__mutex); } else { 
# 741
return 0; }  
# 742
} 
# 745
static inline int __gthread_mutex_lock(__gthread_mutex_t *__mutex) 
# 746
{ 
# 747
if (__gthread_active_p()) { 
# 748
return __gthrw_pthread_mutex_lock(__mutex); } else { 
# 750
return 0; }  
# 751
} 
# 754
static inline int __gthread_mutex_trylock(__gthread_mutex_t *__mutex) 
# 755
{ 
# 756
if (__gthread_active_p()) { 
# 757
return __gthrw_pthread_mutex_trylock(__mutex); } else { 
# 759
return 0; }  
# 760
} 
# 764
static inline int __gthread_mutex_timedlock(__gthread_mutex_t *__mutex, const __gthread_time_t *
# 765
__abs_timeout) 
# 766
{ 
# 767
if (__gthread_active_p()) { 
# 768
return __gthrw_pthread_mutex_timedlock(__mutex, __abs_timeout); } else { 
# 770
return 0; }  
# 771
} 
# 775
static inline int __gthread_mutex_unlock(__gthread_mutex_t *__mutex) 
# 776
{ 
# 777
if (__gthread_active_p()) { 
# 778
return __gthrw_pthread_mutex_unlock(__mutex); } else { 
# 780
return 0; }  
# 781
} 
# 808 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/gthr-default.h" 3
static inline int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *__mutex) 
# 809
{ 
# 810
return __gthread_mutex_lock(__mutex); 
# 811
} 
# 814
static inline int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *__mutex) 
# 815
{ 
# 816
return __gthread_mutex_trylock(__mutex); 
# 817
} 
# 821
static inline int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *__mutex, const __gthread_time_t *
# 822
__abs_timeout) 
# 823
{ 
# 824
return __gthread_mutex_timedlock(__mutex, __abs_timeout); 
# 825
} 
# 829
static inline int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *__mutex) 
# 830
{ 
# 831
return __gthread_mutex_unlock(__mutex); 
# 832
} 
# 835
static inline int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t *__mutex) 
# 836
{ 
# 837
return __gthread_mutex_destroy(__mutex); 
# 838
} 
# 850 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/gthr-default.h" 3
static inline int __gthread_cond_broadcast(__gthread_cond_t *__cond) 
# 851
{ 
# 852
return __gthrw_pthread_cond_broadcast(__cond); 
# 853
} 
# 856
static inline int __gthread_cond_signal(__gthread_cond_t *__cond) 
# 857
{ 
# 858
return __gthrw_pthread_cond_signal(__cond); 
# 859
} 
# 862
static inline int __gthread_cond_wait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex) 
# 863
{ 
# 864
return __gthrw_pthread_cond_wait(__cond, __mutex); 
# 865
} 
# 868
static inline int __gthread_cond_timedwait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex, const __gthread_time_t *
# 869
__abs_timeout) 
# 870
{ 
# 871
return __gthrw_pthread_cond_timedwait(__cond, __mutex, __abs_timeout); 
# 872
} 
# 875
static inline int __gthread_cond_wait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 876
__mutex) 
# 877
{ 
# 878
return __gthread_cond_wait(__cond, __mutex); 
# 879
} 
# 882
static inline int __gthread_cond_destroy(__gthread_cond_t *__cond) 
# 883
{ 
# 884
return __gthrw_pthread_cond_destroy(__cond); 
# 885
} 
# 151 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/gthr.h" 3
#pragma GCC visibility pop
# 28 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/atomic_word.h" 3
typedef int _Atomic_word; 
# 38 "/usr/include/c++/4.8.2/ext/atomicity.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 48
static inline _Atomic_word __exchange_and_add(volatile _Atomic_word *__mem, int __val) 
# 49
{ return __atomic_fetch_add(__mem, __val, 4); } 
# 52
static inline void __atomic_add(volatile _Atomic_word *__mem, int __val) 
# 53
{ __atomic_fetch_add(__mem, __val, 4); } 
# 65 "/usr/include/c++/4.8.2/ext/atomicity.h" 3
static inline _Atomic_word __exchange_and_add_single(_Atomic_word *__mem, int __val) 
# 66
{ 
# 67
_Atomic_word __result = *__mem; 
# 68
(*__mem) += __val; 
# 69
return __result; 
# 70
} 
# 73
static inline void __atomic_add_single(_Atomic_word *__mem, int __val) 
# 74
{ (*__mem) += __val; } 
# 77
__attribute((__unused__)) static inline _Atomic_word 
# 78
__exchange_and_add_dispatch(_Atomic_word *__mem, int __val) 
# 79
{ 
# 81
if (__gthread_active_p()) { 
# 82
return __exchange_and_add(__mem, __val); } else { 
# 84
return __exchange_and_add_single(__mem, __val); }  
# 88
} 
# 91
__attribute((__unused__)) static inline void 
# 92
__atomic_add_dispatch(_Atomic_word *__mem, int __val) 
# 93
{ 
# 95
if (__gthread_active_p()) { 
# 96
__atomic_add(__mem, __val); } else { 
# 98
__atomic_add_single(__mem, __val); }  
# 102
} 
# 105
}
# 42 "/usr/include/c++/4.8.2/new" 3
#pragma GCC visibility push ( default )
# 44
extern "C++" {
# 46
namespace std { 
# 54
class bad_alloc : public exception { 
# 57
public: bad_alloc() throw() { } 
# 61
virtual ~bad_alloc() throw(); 
# 64
virtual const char *what() const throw(); 
# 65
}; 
# 67
struct nothrow_t { }; 
# 69
extern const nothrow_t nothrow; 
# 73
typedef void (*new_handler)(void); 
# 77
new_handler set_new_handler(new_handler) throw(); 
# 78
}
# 91 "/usr/include/c++/4.8.2/new" 3
void *operator new(std::size_t) throw(std::bad_alloc)
# 92
 __attribute((__externally_visible__)); 
# 93
void *operator new[](std::size_t) throw(std::bad_alloc)
# 94
 __attribute((__externally_visible__)); 
# 95
void operator delete(void *) throw()
# 96
 __attribute((__externally_visible__)); 
# 97
void operator delete[](void *) throw()
# 98
 __attribute((__externally_visible__)); 
# 99
void *operator new(std::size_t, const std::nothrow_t &) throw()
# 100
 __attribute((__externally_visible__)); 
# 101
void *operator new[](std::size_t, const std::nothrow_t &) throw()
# 102
 __attribute((__externally_visible__)); 
# 103
void operator delete(void *, const std::nothrow_t &) throw()
# 104
 __attribute((__externally_visible__)); 
# 105
void operator delete[](void *, const std::nothrow_t &) throw()
# 106
 __attribute((__externally_visible__)); 
# 109
inline void *operator new(std::size_t, void *__p) throw() 
# 110
{ return __p; } 
# 111
inline void *operator new[](std::size_t, void *__p) throw() 
# 112
{ return __p; } 
# 115
inline void operator delete(void *, void *) throw() { } 
# 116
inline void operator delete[](void *, void *) throw() { } 
# 118
}
# 120
#pragma GCC visibility pop
# 40 "/usr/include/c++/4.8.2/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 44
using std::size_t;
# 45
using std::ptrdiff_t;
# 57 "/usr/include/c++/4.8.2/ext/new_allocator.h" 3
template< class _Tp> 
# 58
class new_allocator { 
# 61
public: typedef std::size_t size_type; 
# 62
typedef std::ptrdiff_t difference_type; 
# 63
typedef _Tp *pointer; 
# 64
typedef const _Tp *const_pointer; 
# 65
typedef _Tp &reference; 
# 66
typedef const _Tp &const_reference; 
# 67
typedef _Tp value_type; 
# 69
template< class _Tp1> 
# 70
struct rebind { 
# 71
typedef __gnu_cxx::new_allocator< _Tp1>  other; }; 
# 79
new_allocator() throw() { } 
# 81
new_allocator(const new_allocator &) throw() { } 
# 83
template< class _Tp1> 
# 84
new_allocator(const __gnu_cxx::new_allocator< _Tp1>  &) throw() { } 
# 86
~new_allocator() throw() { } 
# 89
pointer address(reference __x) const 
# 90
{ return std::__addressof(__x); } 
# 93
const_pointer address(const_reference __x) const 
# 94
{ return std::__addressof(__x); } 
# 99
pointer allocate(size_type __n, const void * = 0) 
# 100
{ 
# 101
if (__n > this->max_size()) { 
# 102
std::__throw_bad_alloc(); }  
# 104
return static_cast< _Tp *>(::operator new(__n * sizeof(_Tp))); 
# 105
} 
# 109
void deallocate(pointer __p, size_type) 
# 110
{ ::operator delete(__p); } 
# 113
size_type max_size() const throw() 
# 114
{ return ((std::size_t)(-1)) / sizeof(_Tp); } 
# 129 "/usr/include/c++/4.8.2/ext/new_allocator.h" 3
void construct(pointer __p, const _Tp &__val) 
# 130
{ ::new ((void *)__p) (_Tp)(__val); } 
# 133
void destroy(pointer __p) { (__p->~_Tp()); } 
# 135
}; 
# 137
template< class _Tp> inline bool 
# 139 "/usr/include/c++/4.8.2/ext/new_allocator.h" 3
operator==(const new_allocator< _Tp>  &, const new_allocator< _Tp>  &) 
# 140
{ return true; } 
# 142
template< class _Tp> inline bool 
# 144 "/usr/include/c++/4.8.2/ext/new_allocator.h" 3
operator!=(const new_allocator< _Tp>  &, const new_allocator< _Tp>  &) 
# 145
{ return false; } 
# 148
}
# 52 "/usr/include/c++/4.8.2/bits/allocator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 63
template<> class allocator< void>  { 
# 66
public: typedef size_t size_type; 
# 67
typedef ptrdiff_t difference_type; 
# 68
typedef void *pointer; 
# 69
typedef const void *const_pointer; 
# 70
typedef void value_type; 
# 72
template< class _Tp1> 
# 73
struct rebind { 
# 74
typedef std::allocator< _Tp1>  other; }; 
# 81
}; 
# 91 "/usr/include/c++/4.8.2/bits/allocator.h" 3
template< class _Tp> 
# 92
class allocator : public __gnu_cxx::new_allocator< _Tp>  { 
# 95
public: typedef std::size_t size_type; 
# 96
typedef std::ptrdiff_t difference_type; 
# 97
typedef _Tp *pointer; 
# 98
typedef const _Tp *const_pointer; 
# 99
typedef _Tp &reference; 
# 100
typedef const _Tp &const_reference; 
# 101
typedef _Tp value_type; 
# 103
template< class _Tp1> 
# 104
struct rebind { 
# 105
typedef std::allocator< _Tp1>  other; }; 
# 113
allocator() throw() { } 
# 115
allocator(const allocator &__a) throw() : __gnu_cxx::new_allocator< _Tp> (__a) 
# 116
{ } 
# 118
template< class _Tp1> 
# 119
allocator(const std::allocator< _Tp1>  &) throw() { } 
# 121
~allocator() throw() { } 
# 124
}; 
# 126
template< class _T1, class _T2> inline bool 
# 128 "/usr/include/c++/4.8.2/bits/allocator.h" 3
operator==(const allocator< _T1>  &, const allocator< _T2>  &) 
# 129
{ return true; } 
# 131
template< class _Tp> inline bool 
# 133 "/usr/include/c++/4.8.2/bits/allocator.h" 3
operator==(const allocator< _Tp>  &, const allocator< _Tp>  &) 
# 134
{ return true; } 
# 136
template< class _T1, class _T2> inline bool 
# 138 "/usr/include/c++/4.8.2/bits/allocator.h" 3
operator!=(const allocator< _T1>  &, const allocator< _T2>  &) 
# 139
{ return false; } 
# 141
template< class _Tp> inline bool 
# 143 "/usr/include/c++/4.8.2/bits/allocator.h" 3
operator!=(const allocator< _Tp>  &, const allocator< _Tp>  &) 
# 144
{ return false; } 
# 151
extern template class allocator< char> ;
# 152
extern template class allocator< wchar_t> ;
# 159
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 160
struct __alloc_swap { 
# 161
static void _S_do_it(_Alloc &, _Alloc &) { } }; 
# 163
template< class _Alloc> 
# 164
struct __alloc_swap< _Alloc, false>  { 
# 167
static void _S_do_it(_Alloc &__one, _Alloc &__two) 
# 168
{ 
# 170
if (__one != __two) { 
# 171
swap(__one, __two); }  
# 172
} 
# 173
}; 
# 176
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 177
struct __alloc_neq { 
# 180 "/usr/include/c++/4.8.2/bits/allocator.h" 3
static bool _S_do_it(const _Alloc &, const _Alloc &) 
# 181
{ return false; } 
# 182
}; 
# 184
template< class _Alloc> 
# 185
struct __alloc_neq< _Alloc, false>  { 
# 188 "/usr/include/c++/4.8.2/bits/allocator.h" 3
static bool _S_do_it(const _Alloc &__one, const _Alloc &__two) 
# 189
{ return __one != __two; } 
# 190
}; 
# 219 "/usr/include/c++/4.8.2/bits/allocator.h" 3
}
# 36 "/usr/include/c++/4.8.2/bits/cxxabi_forced.h" 3
#pragma GCC visibility push ( default )
# 39
namespace __cxxabiv1 { 
# 48
class __forced_unwind { 
# 50
virtual ~__forced_unwind() throw(); 
# 53
virtual void __pure_dummy() = 0; 
# 54
}; 
# 55
}
# 58
#pragma GCC visibility pop
# 38 "/usr/include/c++/4.8.2/bits/ostream_insert.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 42
template< class _CharT, class _Traits> inline void 
# 44
__ostream_write(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 45
__s, streamsize __n) 
# 46
{ 
# 47
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 48
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 50
const streamsize __put = ((__out.rdbuf())->sputn(__s, __n)); 
# 51
if (__put != __n) { 
# 52
(__out.setstate(__ios_base::badbit)); }  
# 53
} 
# 55
template< class _CharT, class _Traits> inline void 
# 57
__ostream_fill(basic_ostream< _CharT, _Traits>  &__out, streamsize __n) 
# 58
{ 
# 59
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 60
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 62
const _CharT __c = (__out.fill()); 
# 63
for (; __n > (0); --__n) 
# 64
{ 
# 65
const typename _Traits::int_type __put = ((__out.rdbuf())->sputc(__c)); 
# 66
if (_Traits::eq_int_type(__put, _Traits::eof())) 
# 67
{ 
# 68
(__out.setstate(__ios_base::badbit)); 
# 69
break; 
# 70
}  
# 71
}  
# 72
} 
# 74
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 76
__ostream_insert(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 77
__s, streamsize __n) 
# 78
{ 
# 79
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 80
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 82
typename basic_ostream< _CharT, _Traits> ::sentry __cerb(__out); 
# 83
if (__cerb) 
# 84
{ 
# 85
try 
# 86
{ 
# 87
const streamsize __w = (__out.width()); 
# 88
if (__w > __n) 
# 89
{ 
# 90
const bool __left = ((__out.flags()) & __ios_base::adjustfield) == __ios_base::left; 
# 93
if (!__left) { 
# 94
__ostream_fill(__out, __w - __n); }  
# 95
if ((__out.good())) { 
# 96
__ostream_write(__out, __s, __n); }  
# 97
if (__left && (__out.good())) { 
# 98
__ostream_fill(__out, __w - __n); }  
# 99
} else { 
# 101
__ostream_write(__out, __s, __n); }  
# 102
(__out.width(0)); 
# 103
} 
# 104
catch (__cxxabiv1::__forced_unwind &) 
# 105
{ 
# 106
(__out._M_setstate(__ios_base::badbit)); 
# 107
throw; 
# 108
} 
# 109
catch (...) 
# 110
{ (__out._M_setstate(__ios_base::badbit)); }  
# 111
}  
# 112
return __out; 
# 113
} 
# 118
extern template basic_ostream< char>  &__ostream_insert(basic_ostream< char>  & __out, const char * __s, streamsize __n);
# 121
extern template basic_ostream< wchar_t>  &__ostream_insert(basic_ostream< wchar_t>  & __out, const wchar_t * __s, streamsize __n);
# 127
}
# 59 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 100 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 101
struct unary_function { 
# 104
typedef _Arg argument_type; 
# 107
typedef _Result result_type; 
# 108
}; 
# 113
template< class _Arg1, class _Arg2, class _Result> 
# 114
struct binary_function { 
# 117
typedef _Arg1 first_argument_type; 
# 120
typedef _Arg2 second_argument_type; 
# 123
typedef _Result result_type; 
# 124
}; 
# 139 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
template< class _Tp> 
# 140
struct plus : public binary_function< _Tp, _Tp, _Tp>  { 
# 143
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 144
{ return __x + __y; } 
# 145
}; 
# 148
template< class _Tp> 
# 149
struct minus : public binary_function< _Tp, _Tp, _Tp>  { 
# 152
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 153
{ return __x - __y; } 
# 154
}; 
# 157
template< class _Tp> 
# 158
struct multiplies : public binary_function< _Tp, _Tp, _Tp>  { 
# 161
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 162
{ return __x * __y; } 
# 163
}; 
# 166
template< class _Tp> 
# 167
struct divides : public binary_function< _Tp, _Tp, _Tp>  { 
# 170
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 171
{ return __x / __y; } 
# 172
}; 
# 175
template< class _Tp> 
# 176
struct modulus : public binary_function< _Tp, _Tp, _Tp>  { 
# 179
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 180
{ return __x % __y; } 
# 181
}; 
# 184
template< class _Tp> 
# 185
struct negate : public unary_function< _Tp, _Tp>  { 
# 188
_Tp operator()(const _Tp &__x) const 
# 189
{ return -__x; } 
# 190
}; 
# 203 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
template< class _Tp> 
# 204
struct equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 207 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 208
{ return __x == __y; } 
# 209
}; 
# 212
template< class _Tp> 
# 213
struct not_equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 216 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 217
{ return __x != __y; } 
# 218
}; 
# 221
template< class _Tp> 
# 222
struct greater : public binary_function< _Tp, _Tp, bool>  { 
# 225 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 226
{ return __x > __y; } 
# 227
}; 
# 230
template< class _Tp> 
# 231
struct less : public binary_function< _Tp, _Tp, bool>  { 
# 234 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 235
{ return __x < __y; } 
# 236
}; 
# 239
template< class _Tp> 
# 240
struct greater_equal : public binary_function< _Tp, _Tp, bool>  { 
# 243 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 244
{ return __x >= __y; } 
# 245
}; 
# 248
template< class _Tp> 
# 249
struct less_equal : public binary_function< _Tp, _Tp, bool>  { 
# 252 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 253
{ return __x <= __y; } 
# 254
}; 
# 267 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
template< class _Tp> 
# 268
struct logical_and : public binary_function< _Tp, _Tp, bool>  { 
# 271 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 272
{ return __x && __y; } 
# 273
}; 
# 276
template< class _Tp> 
# 277
struct logical_or : public binary_function< _Tp, _Tp, bool>  { 
# 280 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 281
{ return __x || __y; } 
# 282
}; 
# 285
template< class _Tp> 
# 286
struct logical_not : public unary_function< _Tp, bool>  { 
# 289 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
bool operator()(const _Tp &__x) const 
# 290
{ return !__x; } 
# 291
}; 
# 296
template< class _Tp> 
# 297
struct bit_and : public binary_function< _Tp, _Tp, _Tp>  { 
# 300
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 301
{ return __x & __y; } 
# 302
}; 
# 304
template< class _Tp> 
# 305
struct bit_or : public binary_function< _Tp, _Tp, _Tp>  { 
# 308
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 309
{ return __x | __y; } 
# 310
}; 
# 312
template< class _Tp> 
# 313
struct bit_xor : public binary_function< _Tp, _Tp, _Tp>  { 
# 316
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 317
{ return __x ^ __y; } 
# 318
}; 
# 350 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
template< class _Predicate> 
# 351
class unary_negate : public unary_function< typename _Predicate::argument_type, bool>  { 
# 355
protected: _Predicate _M_pred; 
# 359
public: explicit unary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 362 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
bool operator()(const typename _Predicate::argument_type &__x) const 
# 363
{ return !(_M_pred)(__x); } 
# 364
}; 
# 367
template< class _Predicate> inline unary_negate< _Predicate>  
# 369
not1(const _Predicate &__pred) 
# 370
{ return ((unary_negate< _Predicate> )(__pred)); } 
# 373
template< class _Predicate> 
# 374
class binary_negate : public binary_function< typename _Predicate::first_argument_type, typename _Predicate::second_argument_type, bool>  { 
# 379
protected: _Predicate _M_pred; 
# 383
public: explicit binary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 386 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
bool operator()(const typename _Predicate::first_argument_type &__x, const typename _Predicate::second_argument_type &
# 387
__y) const 
# 388
{ return !(_M_pred)(__x, __y); } 
# 389
}; 
# 392
template< class _Predicate> inline binary_negate< _Predicate>  
# 394
not2(const _Predicate &__pred) 
# 395
{ return ((binary_negate< _Predicate> )(__pred)); } 
# 421 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 422
class pointer_to_unary_function : public unary_function< _Arg, _Result>  { 
# 425
protected: _Result (*_M_ptr)(_Arg); 
# 428
public: pointer_to_unary_function() { } 
# 431
explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) 
# 432
{ } 
# 435
_Result operator()(_Arg __x) const 
# 436
{ return (_M_ptr)(__x); } 
# 437
}; 
# 440
template< class _Arg, class _Result> inline pointer_to_unary_function< _Arg, _Result>  
# 442
ptr_fun(_Result (*__x)(_Arg)) 
# 443
{ return ((pointer_to_unary_function< _Arg, _Result> )(__x)); } 
# 446
template< class _Arg1, class _Arg2, class _Result> 
# 447
class pointer_to_binary_function : public binary_function< _Arg1, _Arg2, _Result>  { 
# 451
protected: _Result (*_M_ptr)(_Arg1, _Arg2); 
# 454
public: pointer_to_binary_function() { } 
# 457
explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) : _M_ptr(__x) 
# 458
{ } 
# 461
_Result operator()(_Arg1 __x, _Arg2 __y) const 
# 462
{ return (_M_ptr)(__x, __y); } 
# 463
}; 
# 466
template< class _Arg1, class _Arg2, class _Result> inline pointer_to_binary_function< _Arg1, _Arg2, _Result>  
# 468
ptr_fun(_Result (*__x)(_Arg1, _Arg2)) 
# 469
{ return ((pointer_to_binary_function< _Arg1, _Arg2, _Result> )(__x)); } 
# 472
template< class _Tp> 
# 473
struct _Identity : public unary_function< _Tp, _Tp>  { 
# 477
_Tp &operator()(_Tp &__x) const 
# 478
{ return __x; } 
# 481
const _Tp &operator()(const _Tp &__x) const 
# 482
{ return __x; } 
# 483
}; 
# 485
template< class _Pair> 
# 486
struct _Select1st : public unary_function< _Pair, typename _Pair::first_type>  { 
# 490
typename _Pair::first_type &operator()(_Pair &__x) const 
# 491
{ return __x.first; } 
# 494
const typename _Pair::first_type &operator()(const _Pair &__x) const 
# 495
{ return __x.first; } 
# 508 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
}; 
# 510
template< class _Pair> 
# 511
struct _Select2nd : public unary_function< _Pair, typename _Pair::second_type>  { 
# 515
typename _Pair::second_type &operator()(_Pair &__x) const 
# 516
{ return __x.second; } 
# 519
const typename _Pair::second_type &operator()(const _Pair &__x) const 
# 520
{ return __x.second; } 
# 521
}; 
# 541 "/usr/include/c++/4.8.2/bits/stl_function.h" 3
template< class _Ret, class _Tp> 
# 542
class mem_fun_t : public unary_function< _Tp *, _Ret>  { 
# 546
public: explicit mem_fun_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 547
{ } 
# 550
_Ret operator()(_Tp *__p) const 
# 551
{ return (__p->*(_M_f))(); } 
# 554
private: _Ret (_Tp::*_M_f)(void); 
# 555
}; 
# 559
template< class _Ret, class _Tp> 
# 560
class const_mem_fun_t : public unary_function< const _Tp *, _Ret>  { 
# 564
public: explicit const_mem_fun_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 565
{ } 
# 568
_Ret operator()(const _Tp *__p) const 
# 569
{ return (__p->*(_M_f))(); } 
# 572
private: _Ret (_Tp::*_M_f)(void) const; 
# 573
}; 
# 577
template< class _Ret, class _Tp> 
# 578
class mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 582
public: explicit mem_fun_ref_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 583
{ } 
# 586
_Ret operator()(_Tp &__r) const 
# 587
{ return (__r.*(_M_f))(); } 
# 590
private: _Ret (_Tp::*_M_f)(void); 
# 591
}; 
# 595
template< class _Ret, class _Tp> 
# 596
class const_mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 600
public: explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 601
{ } 
# 604
_Ret operator()(const _Tp &__r) const 
# 605
{ return (__r.*(_M_f))(); } 
# 608
private: _Ret (_Tp::*_M_f)(void) const; 
# 609
}; 
# 613
template< class _Ret, class _Tp, class _Arg> 
# 614
class mem_fun1_t : public binary_function< _Tp *, _Arg, _Ret>  { 
# 618
public: explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 619
{ } 
# 622
_Ret operator()(_Tp *__p, _Arg __x) const 
# 623
{ return (__p->*(_M_f))(__x); } 
# 626
private: _Ret (_Tp::*_M_f)(_Arg); 
# 627
}; 
# 631
template< class _Ret, class _Tp, class _Arg> 
# 632
class const_mem_fun1_t : public binary_function< const _Tp *, _Arg, _Ret>  { 
# 636
public: explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 637
{ } 
# 640
_Ret operator()(const _Tp *__p, _Arg __x) const 
# 641
{ return (__p->*(_M_f))(__x); } 
# 644
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 645
}; 
# 649
template< class _Ret, class _Tp, class _Arg> 
# 650
class mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 654
public: explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 655
{ } 
# 658
_Ret operator()(_Tp &__r, _Arg __x) const 
# 659
{ return (__r.*(_M_f))(__x); } 
# 662
private: _Ret (_Tp::*_M_f)(_Arg); 
# 663
}; 
# 667
template< class _Ret, class _Tp, class _Arg> 
# 668
class const_mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 672
public: explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 673
{ } 
# 676
_Ret operator()(const _Tp &__r, _Arg __x) const 
# 677
{ return (__r.*(_M_f))(__x); } 
# 680
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 681
}; 
# 685
template< class _Ret, class _Tp> inline mem_fun_t< _Ret, _Tp>  
# 687
mem_fun(_Ret (_Tp::*__f)(void)) 
# 688
{ return ((mem_fun_t< _Ret, _Tp> )(__f)); } 
# 690
template< class _Ret, class _Tp> inline const_mem_fun_t< _Ret, _Tp>  
# 692
mem_fun(_Ret (_Tp::*__f)(void) const) 
# 693
{ return ((const_mem_fun_t< _Ret, _Tp> )(__f)); } 
# 695
template< class _Ret, class _Tp> inline mem_fun_ref_t< _Ret, _Tp>  
# 697
mem_fun_ref(_Ret (_Tp::*__f)(void)) 
# 698
{ return ((mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 700
template< class _Ret, class _Tp> inline const_mem_fun_ref_t< _Ret, _Tp>  
# 702
mem_fun_ref(_Ret (_Tp::*__f)(void) const) 
# 703
{ return ((const_mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 705
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_t< _Ret, _Tp, _Arg>  
# 707
mem_fun(_Ret (_Tp::*__f)(_Arg)) 
# 708
{ return ((mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 710
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_t< _Ret, _Tp, _Arg>  
# 712
mem_fun(_Ret (_Tp::*__f)(_Arg) const) 
# 713
{ return ((const_mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 715
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 717
mem_fun_ref(_Ret (_Tp::*__f)(_Arg)) 
# 718
{ return ((mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 720
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 722
mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const) 
# 723
{ return ((const_mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 728
}
# 59 "/usr/include/c++/4.8.2/backward/binders.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 103 "/usr/include/c++/4.8.2/backward/binders.h" 3
template< class _Operation> 
# 104
class binder1st : public unary_function< typename _Operation::second_argument_type, typename _Operation::result_type>  { 
# 109
protected: _Operation op; 
# 110
typename _Operation::first_argument_type value; 
# 113
public: binder1st(const _Operation &__x, const typename _Operation::first_argument_type &
# 114
__y) : op(__x), value(__y) 
# 115
{ } 
# 118
typename _Operation::result_type operator()(const typename _Operation::second_argument_type &__x) const 
# 119
{ return (op)(value, __x); } 
# 124
typename _Operation::result_type operator()(typename _Operation::second_argument_type &__x) const 
# 125
{ return (op)(value, __x); } 
# 126
}; 
# 129
template< class _Operation, class _Tp> inline binder1st< _Operation>  
# 131
bind1st(const _Operation &__fn, const _Tp &__x) 
# 132
{ 
# 133
typedef typename _Operation::first_argument_type _Arg1_type; 
# 134
return binder1st< _Operation> (__fn, (_Arg1_type)__x); 
# 135
} 
# 138
template< class _Operation> 
# 139
class binder2nd : public unary_function< typename _Operation::first_argument_type, typename _Operation::result_type>  { 
# 144
protected: _Operation op; 
# 145
typename _Operation::second_argument_type value; 
# 148
public: binder2nd(const _Operation &__x, const typename _Operation::second_argument_type &
# 149
__y) : op(__x), value(__y) 
# 150
{ } 
# 153
typename _Operation::result_type operator()(const typename _Operation::first_argument_type &__x) const 
# 154
{ return (op)(__x, value); } 
# 159
typename _Operation::result_type operator()(typename _Operation::first_argument_type &__x) const 
# 160
{ return (op)(__x, value); } 
# 161
}; 
# 164
template< class _Operation, class _Tp> inline binder2nd< _Operation>  
# 166
bind2nd(const _Operation &__fn, const _Tp &__x) 
# 167
{ 
# 168
typedef typename _Operation::second_argument_type _Arg2_type; 
# 169
return binder2nd< _Operation> (__fn, (_Arg2_type)__x); 
# 170
} 
# 174
}
# 45 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 111 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> 
# 112
class basic_string { 
# 114
typedef typename _Alloc::template rebind< _CharT> ::other _CharT_alloc_type; 
# 118
public: typedef _Traits traits_type; 
# 119
typedef typename _Traits::char_type value_type; 
# 120
typedef _Alloc allocator_type; 
# 121
typedef typename _Alloc::template rebind< _CharT> ::other::size_type size_type; 
# 122
typedef typename _Alloc::template rebind< _CharT> ::other::difference_type difference_type; 
# 123
typedef typename _Alloc::template rebind< _CharT> ::other::reference reference; 
# 124
typedef typename _Alloc::template rebind< _CharT> ::other::const_reference const_reference; 
# 125
typedef typename _Alloc::template rebind< _CharT> ::other::pointer pointer; 
# 126
typedef typename _Alloc::template rebind< _CharT> ::other::const_pointer const_pointer; 
# 127
typedef __gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::pointer, basic_string>  iterator; 
# 129
typedef __gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::const_pointer, basic_string>  const_iterator; 
# 130
typedef std::reverse_iterator< __gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::const_pointer, basic_string> >  const_reverse_iterator; 
# 131
typedef std::reverse_iterator< __gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::pointer, basic_string> >  reverse_iterator; 
# 148 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
private: struct _Rep_base { 
# 150
size_type _M_length; 
# 151
size_type _M_capacity; 
# 152
_Atomic_word _M_refcount; 
# 153
}; 
# 155
struct _Rep : public _Rep_base { 
# 158
typedef typename _Alloc::template rebind< char> ::other _Raw_bytes_alloc; 
# 173 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
static const typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type _S_max_size; 
# 174
static const _CharT _S_terminal; 
# 178
static typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type _S_empty_rep_storage[]; 
# 181
static _Rep &_S_empty_rep() 
# 182
{ 
# 186
void *__p = (reinterpret_cast< void *>(&_S_empty_rep_storage)); 
# 187
return *(reinterpret_cast< _Rep *>(__p)); 
# 188
} 
# 191 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
bool _M_is_leaked() const 
# 192
{ return (this->_M_refcount) < 0; } 
# 195 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
bool _M_is_shared() const 
# 196
{ return (this->_M_refcount) > 0; } 
# 199
void _M_set_leaked() 
# 200
{ (this->_M_refcount) = (-1); } 
# 203
void _M_set_sharable() 
# 204
{ (this->_M_refcount) = 0; } 
# 207
void _M_set_length_and_sharable(typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type __n) 
# 208
{ 
# 210
if (__builtin_expect(this != (&(_S_empty_rep)()), false)) 
# 212
{ 
# 213
this->_M_set_sharable(); 
# 214
(this->_M_length) = __n; 
# 215
traits_type::assign(this->_M_refdata()[__n], _S_terminal); 
# 218
}  
# 219
} 
# 222
_CharT *_M_refdata() throw() 
# 223
{ return reinterpret_cast< _CharT *>(this + 1); } 
# 226
_CharT *_M_grab(const _Alloc &__alloc1, const _Alloc &__alloc2) 
# 227
{ 
# 228
return ((!_M_is_leaked()) && (__alloc1 == __alloc2)) ? _M_refcopy() : _M_clone(__alloc1); 
# 230
} 
# 234
static _Rep *_S_create(typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type, typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type, const _Alloc &); 
# 237
void _M_dispose(const _Alloc &__a) 
# 238
{ 
# 240
if (__builtin_expect(this != (&(_S_empty_rep)()), false)) 
# 242
{ 
# 244
; 
# 245
if (__gnu_cxx::__exchange_and_add_dispatch(&(this->_M_refcount), -1) <= 0) 
# 247
{ 
# 248
; 
# 249
_M_destroy(__a); 
# 250
}  
# 251
}  
# 252
} 
# 255
void _M_destroy(const _Alloc &) throw(); 
# 258
_CharT *_M_refcopy() throw() 
# 259
{ 
# 261
if (__builtin_expect(this != (&(_S_empty_rep)()), false)) { 
# 263
__gnu_cxx::__atomic_add_dispatch(&(this->_M_refcount), 1); }  
# 264
return _M_refdata(); 
# 265
} 
# 268
_CharT *_M_clone(const _Alloc &, typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type __res = 0); 
# 269
}; 
# 272
struct _Alloc_hider : public _Alloc { 
# 274
_Alloc_hider(_CharT *__dat, const _Alloc &__a) : _Alloc(__a), _M_p(__dat) 
# 275
{ } 
# 277
_CharT *_M_p; 
# 278
}; 
# 285
public: static const size_type npos = (static_cast< size_type>(-1)); 
# 289
private: mutable _Alloc_hider _M_dataplus; 
# 292
_CharT *_M_data() const 
# 293
{ return (_M_dataplus)._M_p; } 
# 296
_CharT *_M_data(_CharT *__p) 
# 297
{ return ((_M_dataplus)._M_p) = __p; } 
# 300
_Rep *_M_rep() const 
# 301
{ return &((reinterpret_cast< _Rep *>(_M_data()))[-1]); } 
# 306
iterator _M_ibegin() const 
# 307
{ return ((__gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::pointer, basic_string> )(_M_data())); } 
# 310
iterator _M_iend() const 
# 311
{ return ((__gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::pointer, basic_string> )(_M_data() + this->size())); } 
# 314
void _M_leak() 
# 315
{ 
# 316
if (!(_M_rep()->_M_is_leaked())) { 
# 317
_M_leak_hard(); }  
# 318
} 
# 321
size_type _M_check(size_type __pos, const char *__s) const 
# 322
{ 
# 323
if (__pos > this->size()) { 
# 324
__throw_out_of_range(__s); }  
# 325
return __pos; 
# 326
} 
# 329
void _M_check_length(size_type __n1, size_type __n2, const char *__s) const 
# 330
{ 
# 331
if ((this->max_size() - (this->size() - __n1)) < __n2) { 
# 332
__throw_length_error(__s); }  
# 333
} 
# 337
size_type _M_limit(size_type __pos, size_type __off) const 
# 338
{ 
# 339
const bool __testoff = __off < (this->size() - __pos); 
# 340
return __testoff ? __off : (this->size() - __pos); 
# 341
} 
# 345 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
bool _M_disjunct(const _CharT *__s) const 
# 346
{ 
# 347
return less< const _CharT *> ()(__s, _M_data()) || less< const _CharT *> ()(_M_data() + this->size(), __s); 
# 349
} 
# 354
static void _M_copy(_CharT *__d, const _CharT *__s, size_type __n) 
# 355
{ 
# 356
if (__n == 1) { 
# 357
traits_type::assign(*__d, *__s); } else { 
# 359
traits_type::copy(__d, __s, __n); }  
# 360
} 
# 363
static void _M_move(_CharT *__d, const _CharT *__s, size_type __n) 
# 364
{ 
# 365
if (__n == 1) { 
# 366
traits_type::assign(*__d, *__s); } else { 
# 368
traits_type::move(__d, __s, __n); }  
# 369
} 
# 372
static void _M_assign(_CharT *__d, size_type __n, _CharT __c) 
# 373
{ 
# 374
if (__n == 1) { 
# 375
traits_type::assign(*__d, __c); } else { 
# 377
traits_type::assign(__d, __n, __c); }  
# 378
} 
# 382
template< class _Iterator> static void 
# 384
_S_copy_chars(_CharT *__p, _Iterator __k1, _Iterator __k2) 
# 385
{ 
# 386
for (; __k1 != __k2; (++__k1), (++__p)) { 
# 387
traits_type::assign(*__p, *__k1); }  
# 388
} 
# 391
static void _S_copy_chars(_CharT *__p, iterator __k1, iterator __k2) 
# 392
{ _S_copy_chars(__p, (__k1.base()), (__k2.base())); } 
# 395
static void _S_copy_chars(_CharT *__p, const_iterator __k1, const_iterator __k2) 
# 396
{ _S_copy_chars(__p, (__k1.base()), (__k2.base())); } 
# 399
static void _S_copy_chars(_CharT *__p, _CharT *__k1, _CharT *__k2) 
# 400
{ (_M_copy)(__p, __k1, __k2 - __k1); } 
# 403
static void _S_copy_chars(_CharT *__p, const _CharT *__k1, const _CharT *__k2) 
# 404
{ (_M_copy)(__p, __k1, __k2 - __k1); } 
# 407
static int _S_compare(size_type __n1, size_type __n2) 
# 408
{ 
# 409
const difference_type __d = (difference_type)(__n1 - __n2); 
# 411
if (__d > __gnu_cxx::__numeric_traits< int> ::__max) { 
# 412
return __gnu_cxx::__numeric_traits< int> ::__max; } else { 
# 413
if (__d < __gnu_cxx::__numeric_traits< int> ::__min) { 
# 414
return __gnu_cxx::__numeric_traits< int> ::__min; } else { 
# 416
return (int)__d; }  }  
# 417
} 
# 420
void _M_mutate(size_type __pos, size_type __len1, size_type __len2); 
# 423
void _M_leak_hard(); 
# 426
static _Rep &_S_empty_rep() 
# 427
{ return _Rep::_S_empty_rep(); } 
# 437
public: basic_string() : _M_dataplus(((_S_empty_rep)()._M_refdata()), _Alloc()) 
# 439
{ } 
# 448
explicit basic_string(const _Alloc & __a); 
# 455
basic_string(const basic_string & __str); 
# 462
basic_string(const basic_string & __str, size_type __pos, size_type __n = npos); 
# 471
basic_string(const basic_string & __str, size_type __pos, size_type __n, const _Alloc & __a); 
# 483 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string(const _CharT * __s, size_type __n, const _Alloc & __a = _Alloc()); 
# 490
basic_string(const _CharT * __s, const _Alloc & __a = _Alloc()); 
# 497
basic_string(size_type __n, _CharT __c, const _Alloc & __a = _Alloc()); 
# 531 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _InputIterator> basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc & __a = _Alloc()); 
# 538
~basic_string() 
# 539
{ (_M_rep()->_M_dispose(this->get_allocator())); } 
# 546
basic_string &operator=(const basic_string &__str) 
# 547
{ return (this->assign(__str)); } 
# 554
basic_string &operator=(const _CharT *__s) 
# 555
{ return (this->assign(__s)); } 
# 565 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &operator=(_CharT __c) 
# 566
{ 
# 567
(this->assign(1, __c)); 
# 568
return *this; 
# 569
} 
# 605 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
iterator begin() 
# 606
{ 
# 607
_M_leak(); 
# 608
return ((__gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::pointer, basic_string> )(_M_data())); 
# 609
} 
# 616
const_iterator begin() const 
# 617
{ return ((__gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::const_pointer, basic_string> )(_M_data())); } 
# 624
iterator end() 
# 625
{ 
# 626
_M_leak(); 
# 627
return ((__gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::pointer, basic_string> )(_M_data() + this->size())); 
# 628
} 
# 635
const_iterator end() const 
# 636
{ return ((__gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::const_pointer, basic_string> )(_M_data() + this->size())); } 
# 644
reverse_iterator rbegin() 
# 645
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::pointer, basic_string> > )(this->end())); } 
# 653
const_reverse_iterator rbegin() const 
# 654
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::const_pointer, basic_string> > )(this->end())); } 
# 662
reverse_iterator rend() 
# 663
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::pointer, basic_string> > )(this->begin())); } 
# 671
const_reverse_iterator rend() const 
# 672
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::const_pointer, basic_string> > )(this->begin())); } 
# 715 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type size() const 
# 716
{ return _M_rep()->_M_length; } 
# 721
size_type length() const 
# 722
{ return _M_rep()->_M_length; } 
# 726
size_type max_size() const 
# 727
{ return _Rep::_S_max_size; } 
# 740 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
void resize(size_type __n, _CharT __c); 
# 753 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
void resize(size_type __n) 
# 754
{ (this->resize(__n, _CharT())); } 
# 776 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type capacity() const 
# 777
{ return _M_rep()->_M_capacity; } 
# 797 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
void reserve(size_type __res_arg = 0); 
# 803
void clear() 
# 804
{ _M_mutate(0, this->size(), 0); } 
# 811 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
bool empty() const 
# 812
{ return this->size() == 0; } 
# 826 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
const_reference operator[](size_type __pos) const 
# 827
{ 
# 828
; 
# 829
return _M_data()[__pos]; 
# 830
} 
# 843 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
reference operator[](size_type __pos) 
# 844
{ 
# 846
; 
# 848
; 
# 849
_M_leak(); 
# 850
return _M_data()[__pos]; 
# 851
} 
# 864 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
const_reference at(size_type __n) const 
# 865
{ 
# 866
if (__n >= this->size()) { 
# 867
__throw_out_of_range("basic_string::at"); }  
# 868
return _M_data()[__n]; 
# 869
} 
# 883 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
reference at(size_type __n) 
# 884
{ 
# 885
if (__n >= size()) { 
# 886
__throw_out_of_range("basic_string::at"); }  
# 887
_M_leak(); 
# 888
return _M_data()[__n]; 
# 889
} 
# 932 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &operator+=(const basic_string &__str) 
# 933
{ return (this->append(__str)); } 
# 941
basic_string &operator+=(const _CharT *__s) 
# 942
{ return (this->append(__s)); } 
# 950
basic_string &operator+=(_CharT __c) 
# 951
{ 
# 952
this->push_back(__c); 
# 953
return *this; 
# 954
} 
# 973 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &append(const basic_string & __str); 
# 989 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &append(const basic_string & __str, size_type __pos, size_type __n); 
# 998
basic_string &append(const _CharT * __s, size_type __n); 
# 1006
basic_string &append(const _CharT *__s) 
# 1007
{ 
# 1008
; 
# 1009
return (this->append(__s, traits_type::length(__s))); 
# 1010
} 
# 1021 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &append(size_type __n, _CharT __c); 
# 1042 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _InputIterator> basic_string &
# 1044
append(_InputIterator __first, _InputIterator __last) 
# 1045
{ return (this->replace(_M_iend(), _M_iend(), __first, __last)); } 
# 1052
void push_back(_CharT __c) 
# 1053
{ 
# 1054
const size_type __len = 1 + this->size(); 
# 1055
if ((__len > this->capacity()) || (_M_rep()->_M_is_shared())) { 
# 1056
this->reserve(__len); }  
# 1057
traits_type::assign(_M_data()[this->size()], __c); 
# 1058
(_M_rep()->_M_set_length_and_sharable(__len)); 
# 1059
} 
# 1067
basic_string &assign(const basic_string & __str); 
# 1100 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &assign(const basic_string &__str, size_type __pos, size_type __n) 
# 1101
{ return (this->assign((__str._M_data()) + __str._M_check(__pos, "basic_string::assign"), __str._M_limit(__pos, __n))); 
# 1103
} 
# 1116 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &assign(const _CharT * __s, size_type __n); 
# 1128 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &assign(const _CharT *__s) 
# 1129
{ 
# 1130
; 
# 1131
return (this->assign(__s, traits_type::length(__s))); 
# 1132
} 
# 1144 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &assign(size_type __n, _CharT __c) 
# 1145
{ return _M_replace_aux((size_type)0, this->size(), __n, __c); } 
# 1155 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _InputIterator> basic_string &
# 1157
assign(_InputIterator __first, _InputIterator __last) 
# 1158
{ return (this->replace(_M_ibegin(), _M_iend(), __first, __last)); } 
# 1185 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
void insert(iterator __p, size_type __n, _CharT __c) 
# 1186
{ (this->replace(__p, __p, __n, __c)); } 
# 1200 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _InputIterator> void 
# 1202
insert(iterator __p, _InputIterator __beg, _InputIterator __end) 
# 1203
{ (this->replace(__p, __p, __beg, __end)); } 
# 1233 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &insert(size_type __pos1, const basic_string &__str) 
# 1234
{ return (this->insert(__pos1, __str, (size_type)0, __str.size())); } 
# 1255 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &insert(size_type __pos1, const basic_string &__str, size_type 
# 1256
__pos2, size_type __n) 
# 1257
{ return (this->insert(__pos1, (__str._M_data()) + __str._M_check(__pos2, "basic_string::insert"), __str._M_limit(__pos2, __n))); 
# 1259
} 
# 1278 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &insert(size_type __pos, const _CharT * __s, size_type __n); 
# 1296 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &insert(size_type __pos, const _CharT *__s) 
# 1297
{ 
# 1298
; 
# 1299
return (this->insert(__pos, __s, traits_type::length(__s))); 
# 1300
} 
# 1319 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &insert(size_type __pos, size_type __n, _CharT __c) 
# 1320
{ return _M_replace_aux(_M_check(__pos, "basic_string::insert"), (size_type)0, __n, __c); 
# 1321
} 
# 1337 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
iterator insert(iterator __p, _CharT __c) 
# 1338
{ 
# 1339
; 
# 1340
const size_type __pos = __p - _M_ibegin(); 
# 1341
_M_replace_aux(__pos, (size_type)0, (size_type)1, __c); 
# 1342
(_M_rep()->_M_set_leaked()); 
# 1343
return ((__gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::pointer, basic_string> )(_M_data() + __pos)); 
# 1344
} 
# 1362 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &erase(size_type __pos = 0, size_type __n = npos) 
# 1363
{ 
# 1364
_M_mutate(_M_check(__pos, "basic_string::erase"), _M_limit(__pos, __n), (size_type)0); 
# 1366
return *this; 
# 1367
} 
# 1378 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
iterator erase(iterator __position) 
# 1379
{ 
# 1381
; 
# 1382
const size_type __pos = __position - _M_ibegin(); 
# 1383
_M_mutate(__pos, (size_type)1, (size_type)0); 
# 1384
(_M_rep()->_M_set_leaked()); 
# 1385
return ((__gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::pointer, basic_string> )(_M_data() + __pos)); 
# 1386
} 
# 1398 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
iterator erase(iterator __first, iterator __last); 
# 1429 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n, const basic_string &__str) 
# 1430
{ return (this->replace(__pos, __n, (__str._M_data()), __str.size())); } 
# 1451 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &replace(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 1452
__pos2, size_type __n2) 
# 1453
{ return (this->replace(__pos1, __n1, (__str._M_data()) + __str._M_check(__pos2, "basic_string::replace"), __str._M_limit(__pos2, __n2))); 
# 1455
} 
# 1476 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, const _CharT * __s, size_type __n2); 
# 1496 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, const _CharT *__s) 
# 1497
{ 
# 1498
; 
# 1499
return (this->replace(__pos, __n1, __s, traits_type::length(__s))); 
# 1500
} 
# 1520 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c) 
# 1521
{ return _M_replace_aux(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __n2, __c); 
# 1522
} 
# 1538 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &replace(iterator __i1, iterator __i2, const basic_string &__str) 
# 1539
{ return (this->replace(__i1, __i2, (__str._M_data()), __str.size())); } 
# 1557 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &replace(iterator __i1, iterator __i2, const _CharT *__s, size_type __n) 
# 1558
{ 
# 1560
; 
# 1561
return (this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n)); 
# 1562
} 
# 1578 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &replace(iterator __i1, iterator __i2, const _CharT *__s) 
# 1579
{ 
# 1580
; 
# 1581
return (this->replace(__i1, __i2, __s, traits_type::length(__s))); 
# 1582
} 
# 1599 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string &replace(iterator __i1, iterator __i2, size_type __n, _CharT __c) 
# 1600
{ 
# 1602
; 
# 1603
return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c); 
# 1604
} 
# 1621 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _InputIterator> basic_string &
# 1623
replace(iterator __i1, iterator __i2, _InputIterator 
# 1624
__k1, _InputIterator __k2) 
# 1625
{ 
# 1627
; 
# 1628
; 
# 1629
typedef typename __is_integer< _InputIterator> ::__type _Integral; 
# 1630
return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral()); 
# 1631
} 
# 1636
basic_string &replace(iterator __i1, iterator __i2, _CharT *__k1, _CharT *__k2) 
# 1637
{ 
# 1639
; 
# 1640
; 
# 1641
return (this->replace(__i1 - _M_ibegin(), __i2 - __i1, __k1, __k2 - __k1)); 
# 1643
} 
# 1646
basic_string &replace(iterator __i1, iterator __i2, const _CharT *
# 1647
__k1, const _CharT *__k2) 
# 1648
{ 
# 1650
; 
# 1651
; 
# 1652
return (this->replace(__i1 - _M_ibegin(), __i2 - __i1, __k1, __k2 - __k1)); 
# 1654
} 
# 1657
basic_string &replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2) 
# 1658
{ 
# 1660
; 
# 1661
; 
# 1662
return (this->replace(__i1 - _M_ibegin(), __i2 - __i1, (__k1.base()), __k2 - __k1)); 
# 1664
} 
# 1667
basic_string &replace(iterator __i1, iterator __i2, const_iterator 
# 1668
__k1, const_iterator __k2) 
# 1669
{ 
# 1671
; 
# 1672
; 
# 1673
return (this->replace(__i1 - _M_ibegin(), __i2 - __i1, (__k1.base()), __k2 - __k1)); 
# 1675
} 
# 1700 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
private: 
# 1698
template< class _Integer> basic_string &
# 1700
_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n, _Integer 
# 1701
__val, __true_type) 
# 1702
{ return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); } 
# 1704
template< class _InputIterator> basic_string &_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2, __false_type); 
# 1710
basic_string &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c); 
# 1714
basic_string &_M_replace_safe(size_type __pos1, size_type __n1, const _CharT * __s, size_type __n2); 
# 1719
template< class _InIterator> static _CharT *
# 1721
_S_construct_aux(_InIterator __beg, _InIterator __end, const _Alloc &
# 1722
__a, __false_type) 
# 1723
{ 
# 1724
typedef typename iterator_traits< _InIterator> ::iterator_category _Tag; 
# 1725
return _S_construct(__beg, __end, __a, _Tag()); 
# 1726
} 
# 1730
template< class _Integer> static _CharT *
# 1732
_S_construct_aux(_Integer __beg, _Integer __end, const _Alloc &
# 1733
__a, __true_type) 
# 1734
{ return (_S_construct_aux_2)(static_cast< size_type>(__beg), __end, __a); 
# 1735
} 
# 1738
static _CharT *_S_construct_aux_2(size_type __req, _CharT __c, const _Alloc &__a) 
# 1739
{ return _S_construct(__req, __c, __a); } 
# 1741
template< class _InIterator> static _CharT *
# 1743
_S_construct(_InIterator __beg, _InIterator __end, const _Alloc &__a) 
# 1744
{ 
# 1745
typedef typename __is_integer< _InIterator> ::__type _Integral; 
# 1746
return _S_construct_aux(__beg, __end, __a, _Integral()); 
# 1747
} 
# 1750
template< class _InIterator> static _CharT *_S_construct(_InIterator __beg, _InIterator __end, const _Alloc & __a, input_iterator_tag); 
# 1757
template< class _FwdIterator> static _CharT *_S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc & __a, forward_iterator_tag); 
# 1763
static _CharT *_S_construct(size_type __req, _CharT __c, const _Alloc & __a); 
# 1780 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
public: size_type copy(_CharT * __s, size_type __n, size_type __pos = 0) const; 
# 1790 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
void swap(basic_string & __s); 
# 1800 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
const _CharT *c_str() const 
# 1801
{ return _M_data(); } 
# 1810
const _CharT *data() const 
# 1811
{ return _M_data(); } 
# 1817
allocator_type get_allocator() const 
# 1818
{ return _M_dataplus; } 
# 1833 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find(const _CharT * __s, size_type __pos, size_type __n) const; 
# 1846 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find(const basic_string &__str, size_type __pos = 0) const 
# 1848
{ return (this->find(__str.data(), __pos, __str.size())); } 
# 1861 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find(const _CharT *__s, size_type __pos = 0) const 
# 1862
{ 
# 1863
; 
# 1864
return (this->find(__s, __pos, traits_type::length(__s))); 
# 1865
} 
# 1878 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find(_CharT __c, size_type __pos = 0) const; 
# 1891 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type rfind(const basic_string &__str, size_type __pos = npos) const 
# 1893
{ return (this->rfind(__str.data(), __pos, __str.size())); } 
# 1908 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type rfind(const _CharT * __s, size_type __pos, size_type __n) const; 
# 1921 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type rfind(const _CharT *__s, size_type __pos = npos) const 
# 1922
{ 
# 1923
; 
# 1924
return (this->rfind(__s, __pos, traits_type::length(__s))); 
# 1925
} 
# 1938 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type rfind(_CharT __c, size_type __pos = npos) const; 
# 1952 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_first_of(const basic_string &__str, size_type __pos = 0) const 
# 1954
{ return (this->find_first_of(__str.data(), __pos, __str.size())); } 
# 1969 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_first_of(const _CharT * __s, size_type __pos, size_type __n) const; 
# 1982 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_first_of(const _CharT *__s, size_type __pos = 0) const 
# 1983
{ 
# 1984
; 
# 1985
return (this->find_first_of(__s, __pos, traits_type::length(__s))); 
# 1986
} 
# 2001 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_first_of(_CharT __c, size_type __pos = 0) const 
# 2002
{ return (this->find(__c, __pos)); } 
# 2016 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_last_of(const basic_string &__str, size_type __pos = npos) const 
# 2018
{ return (this->find_last_of(__str.data(), __pos, __str.size())); } 
# 2033 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_last_of(const _CharT * __s, size_type __pos, size_type __n) const; 
# 2046 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_last_of(const _CharT *__s, size_type __pos = npos) const 
# 2047
{ 
# 2048
; 
# 2049
return (this->find_last_of(__s, __pos, traits_type::length(__s))); 
# 2050
} 
# 2065 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_last_of(_CharT __c, size_type __pos = npos) const 
# 2066
{ return (this->rfind(__c, __pos)); } 
# 2079 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_first_not_of(const basic_string &__str, size_type __pos = 0) const 
# 2081
{ return (this->find_first_not_of(__str.data(), __pos, __str.size())); } 
# 2096 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT * __s, size_type __pos, size_type __n) const; 
# 2110 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT *__s, size_type __pos = 0) const 
# 2111
{ 
# 2112
; 
# 2113
return (this->find_first_not_of(__s, __pos, traits_type::length(__s))); 
# 2114
} 
# 2127 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_first_not_of(_CharT __c, size_type __pos = 0) const; 
# 2142 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_last_not_of(const basic_string &__str, size_type __pos = npos) const 
# 2144
{ return (this->find_last_not_of(__str.data(), __pos, __str.size())); } 
# 2159 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT * __s, size_type __pos, size_type __n) const; 
# 2173 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT *__s, size_type __pos = npos) const 
# 2174
{ 
# 2175
; 
# 2176
return (this->find_last_not_of(__s, __pos, traits_type::length(__s))); 
# 2177
} 
# 2190 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
size_type find_last_not_of(_CharT __c, size_type __pos = npos) const; 
# 2206 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
basic_string substr(size_type __pos = 0, size_type __n = npos) const 
# 2207
{ return basic_string(*this, _M_check(__pos, "basic_string::substr"), __n); 
# 2208
} 
# 2225 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
int compare(const basic_string &__str) const 
# 2226
{ 
# 2227
const size_type __size = this->size(); 
# 2228
const size_type __osize = __str.size(); 
# 2229
const size_type __len = std::min(__size, __osize); 
# 2231
int __r = traits_type::compare(_M_data(), __str.data(), __len); 
# 2232
if (!__r) { 
# 2233
__r = (_S_compare)(__size, __osize); }  
# 2234
return __r; 
# 2235
} 
# 2257 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n, const basic_string & __str) const; 
# 2283 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
int compare(size_type __pos1, size_type __n1, const basic_string & __str, size_type __pos2, size_type __n2) const; 
# 2301 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
int compare(const _CharT * __s) const; 
# 2325 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n1, const _CharT * __s) const; 
# 2352 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) const; 
# 2354
}; 
# 2363 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>  
# 2365
operator+(const basic_string< _CharT, _Traits, _Alloc>  &__lhs, const basic_string< _CharT, _Traits, _Alloc>  &
# 2366
__rhs) 
# 2367
{ 
# 2368
basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 2369
(__str.append(__rhs)); 
# 2370
return __str; 
# 2371
} 
# 2379
template< class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>  operator+(const _CharT * __lhs, const basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 2390
template< class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>  operator+(_CharT __lhs, const basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 2400
template< class _CharT, class _Traits, class _Alloc> inline basic_string< _CharT, _Traits, _Alloc>  
# 2402
operator+(const basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 2403
__rhs) 
# 2404
{ 
# 2405
basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 2406
(__str.append(__rhs)); 
# 2407
return __str; 
# 2408
} 
# 2416
template< class _CharT, class _Traits, class _Alloc> inline basic_string< _CharT, _Traits, _Alloc>  
# 2418
operator+(const basic_string< _CharT, _Traits, _Alloc>  &__lhs, _CharT __rhs) 
# 2419
{ 
# 2420
typedef basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 2421
typedef typename basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 2422
__string_type __str(__lhs); 
# 2423
(__str.append((__size_type)1, __rhs)); 
# 2424
return __str; 
# 2425
} 
# 2484 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2486 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator==(const basic_string< _CharT, _Traits, _Alloc>  &__lhs, const basic_string< _CharT, _Traits, _Alloc>  &
# 2487
__rhs) 
# 2488
{ return (__lhs.compare(__rhs)) == 0; } 
# 2490
template< class _CharT> inline typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, bool> ::__type 
# 2493
operator==(const basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  &__lhs, const basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  &
# 2494
__rhs) 
# 2495
{ return ((__lhs.size()) == (__rhs.size())) && (!std::char_traits< _CharT> ::compare((__lhs.data()), (__rhs.data()), (__lhs.size()))); 
# 2497
} 
# 2505
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2507 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator==(const _CharT *__lhs, const basic_string< _CharT, _Traits, _Alloc>  &
# 2508
__rhs) 
# 2509
{ return (__rhs.compare(__lhs)) == 0; } 
# 2517
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2519 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator==(const basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 2520
__rhs) 
# 2521
{ return (__lhs.compare(__rhs)) == 0; } 
# 2530 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2532 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator!=(const basic_string< _CharT, _Traits, _Alloc>  &__lhs, const basic_string< _CharT, _Traits, _Alloc>  &
# 2533
__rhs) 
# 2534
{ return !(__lhs == __rhs); } 
# 2542
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2544 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator!=(const _CharT *__lhs, const basic_string< _CharT, _Traits, _Alloc>  &
# 2545
__rhs) 
# 2546
{ return !(__lhs == __rhs); } 
# 2554
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2556 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator!=(const basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 2557
__rhs) 
# 2558
{ return !(__lhs == __rhs); } 
# 2567 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2569 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator<(const basic_string< _CharT, _Traits, _Alloc>  &__lhs, const basic_string< _CharT, _Traits, _Alloc>  &
# 2570
__rhs) 
# 2571
{ return (__lhs.compare(__rhs)) < 0; } 
# 2579
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2581 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator<(const basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 2582
__rhs) 
# 2583
{ return (__lhs.compare(__rhs)) < 0; } 
# 2591
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2593 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator<(const _CharT *__lhs, const basic_string< _CharT, _Traits, _Alloc>  &
# 2594
__rhs) 
# 2595
{ return (__rhs.compare(__lhs)) > 0; } 
# 2604 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2606 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator>(const basic_string< _CharT, _Traits, _Alloc>  &__lhs, const basic_string< _CharT, _Traits, _Alloc>  &
# 2607
__rhs) 
# 2608
{ return (__lhs.compare(__rhs)) > 0; } 
# 2616
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2618 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator>(const basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 2619
__rhs) 
# 2620
{ return (__lhs.compare(__rhs)) > 0; } 
# 2628
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2630 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator>(const _CharT *__lhs, const basic_string< _CharT, _Traits, _Alloc>  &
# 2631
__rhs) 
# 2632
{ return (__rhs.compare(__lhs)) < 0; } 
# 2641 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2643 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator<=(const basic_string< _CharT, _Traits, _Alloc>  &__lhs, const basic_string< _CharT, _Traits, _Alloc>  &
# 2644
__rhs) 
# 2645
{ return (__lhs.compare(__rhs)) <= 0; } 
# 2653
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2655 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator<=(const basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 2656
__rhs) 
# 2657
{ return (__lhs.compare(__rhs)) <= 0; } 
# 2665
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2667 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator<=(const _CharT *__lhs, const basic_string< _CharT, _Traits, _Alloc>  &
# 2668
__rhs) 
# 2669
{ return (__rhs.compare(__lhs)) >= 0; } 
# 2678 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2680 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator>=(const basic_string< _CharT, _Traits, _Alloc>  &__lhs, const basic_string< _CharT, _Traits, _Alloc>  &
# 2681
__rhs) 
# 2682
{ return (__lhs.compare(__rhs)) >= 0; } 
# 2690
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2692 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator>=(const basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 2693
__rhs) 
# 2694
{ return (__lhs.compare(__rhs)) >= 0; } 
# 2702
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 2704 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
operator>=(const _CharT *__lhs, const basic_string< _CharT, _Traits, _Alloc>  &
# 2705
__rhs) 
# 2706
{ return (__rhs.compare(__lhs)) <= 0; } 
# 2715 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline void 
# 2717
swap(basic_string< _CharT, _Traits, _Alloc>  &__lhs, basic_string< _CharT, _Traits, _Alloc>  &
# 2718
__rhs) 
# 2719
{ (__lhs.swap(__rhs)); } 
# 2733 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, basic_string< _CharT, _Traits, _Alloc>  & __str); 
# 2740
template<> basic_istream< char>  &operator>>(basic_istream< char>  & __is, basic_string< char, char_traits< char> , allocator< char> >  & __str); 
# 2751 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline basic_ostream< _CharT, _Traits>  &
# 2753
operator<<(basic_ostream< _CharT, _Traits>  &__os, const basic_string< _CharT, _Traits, _Alloc>  &
# 2754
__str) 
# 2755
{ 
# 2758
return __ostream_insert(__os, (__str.data()), (__str.size())); 
# 2759
} 
# 2774 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &getline(basic_istream< _CharT, _Traits>  & __is, basic_string< _CharT, _Traits, _Alloc>  & __str, _CharT __delim); 
# 2791 "/usr/include/c++/4.8.2/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 2793
getline(basic_istream< _CharT, _Traits>  &__is, basic_string< _CharT, _Traits, _Alloc>  &
# 2794
__str) 
# 2795
{ return getline(__is, __str, (__is.widen('\n'))); } 
# 2799
template<> basic_istream< char>  &getline(basic_istream< char>  & __in, basic_string< char, char_traits< char> , allocator< char> >  & __str, char __delim); 
# 2805
template<> basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __in, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & __str, wchar_t __delim); 
# 2810
}
# 44 "/usr/include/c++/4.8.2/bits/basic_string.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
template< class _CharT, class _Traits, class _Alloc> const typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 51
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_max_size = (((npos - sizeof(typename std::basic_string< _CharT, _Traits, _Alloc> ::_Rep_base)) / sizeof(_CharT)) - 1) / 4; 
# 53
template< class _CharT, class _Traits, class _Alloc> const _CharT 
# 56
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_terminal = (_CharT()); 
# 58
template< class _CharT, class _Traits, class _Alloc> const typename basic_string< _CharT, _Traits, _Alloc> ::size_type basic_string< _CharT, _Traits, _Alloc> ::npos; 
# 64
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 66
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_empty_rep_storage[(((sizeof(typename std::basic_string< _CharT, _Traits, _Alloc> ::_Rep_base) + sizeof(_CharT)) + sizeof(typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type)) - (1)) / sizeof(typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type)]; 
# 74
template< class _CharT, class _Traits, class _Alloc> 
# 75
template< class _InIterator> _CharT *
# 78
basic_string< _CharT, _Traits, _Alloc> ::_S_construct(_InIterator __beg, _InIterator __end, const _Alloc &__a, input_iterator_tag) 
# 80
{ 
# 82
if ((__beg == __end) && (__a == _Alloc())) { 
# 83
return ((_S_empty_rep)()._M_refdata()); }  
# 86
_CharT __buf[128]; 
# 87
size_type __len = (0); 
# 88
while ((__beg != __end) && (__len < (sizeof(__buf) / sizeof(_CharT)))) 
# 89
{ 
# 90
(__buf[__len++]) = (*__beg); 
# 91
++__beg; 
# 92
}  
# 93
_Rep *__r = _Rep::_S_create(__len, (size_type)0, __a); 
# 94
(_M_copy)((__r->_M_refdata()), __buf, __len); 
# 95
try 
# 96
{ 
# 97
while (__beg != __end) 
# 98
{ 
# 99
if (__len == (__r->_M_capacity)) 
# 100
{ 
# 102
_Rep *__another = _Rep::_S_create(__len + 1, __len, __a); 
# 103
(_M_copy)((__another->_M_refdata()), (__r->_M_refdata()), __len); 
# 104
(__r->_M_destroy(__a)); 
# 105
__r = __another; 
# 106
}  
# 107
((__r->_M_refdata())[__len++]) = (*__beg); 
# 108
++__beg; 
# 109
}  
# 110
} 
# 111
catch (...) 
# 112
{ 
# 113
(__r->_M_destroy(__a)); 
# 114
throw; 
# 115
}  
# 116
(__r->_M_set_length_and_sharable(__len)); 
# 117
return (__r->_M_refdata()); 
# 118
} 
# 120
template< class _CharT, class _Traits, class _Alloc> 
# 121
template< class _InIterator> _CharT *
# 124
basic_string< _CharT, _Traits, _Alloc> ::_S_construct(_InIterator __beg, _InIterator __end, const _Alloc &__a, forward_iterator_tag) 
# 126
{ 
# 128
if ((__beg == __end) && (__a == _Alloc())) { 
# 129
return ((_S_empty_rep)()._M_refdata()); }  
# 132
if (__gnu_cxx::__is_null_pointer(__beg) && (__beg != __end)) { 
# 133
__throw_logic_error("basic_string::_S_construct null not valid"); }  
# 135
const size_type __dnew = static_cast< size_type>(std::distance(__beg, __end)); 
# 138
_Rep *__r = _Rep::_S_create(__dnew, (size_type)0, __a); 
# 139
try 
# 140
{ _S_copy_chars((__r->_M_refdata()), __beg, __end); } 
# 141
catch (...) 
# 142
{ 
# 143
(__r->_M_destroy(__a)); 
# 144
throw; 
# 145
}  
# 146
(__r->_M_set_length_and_sharable(__dnew)); 
# 147
return (__r->_M_refdata()); 
# 148
} 
# 150
template< class _CharT, class _Traits, class _Alloc> _CharT *
# 153
basic_string< _CharT, _Traits, _Alloc> ::_S_construct(size_type __n, _CharT __c, const _Alloc &__a) 
# 154
{ 
# 156
if ((__n == 0) && (__a == _Alloc())) { 
# 157
return ((_S_empty_rep)()._M_refdata()); }  
# 160
_Rep *__r = _Rep::_S_create(__n, (size_type)0, __a); 
# 161
if (__n) { 
# 162
(_M_assign)((__r->_M_refdata()), __n, __c); }  
# 164
(__r->_M_set_length_and_sharable(__n)); 
# 165
return (__r->_M_refdata()); 
# 166
} 
# 168
template< class _CharT, class _Traits, class _Alloc> 
# 170
basic_string< _CharT, _Traits, _Alloc> ::basic_string(const basic_string &__str) : _M_dataplus((__str._M_rep()->_M_grab((_Alloc)__str.get_allocator(), __str.get_allocator())), __str.get_allocator()) 
# 174
{ } 
# 176
template< class _CharT, class _Traits, class _Alloc> 
# 178
basic_string< _CharT, _Traits, _Alloc> ::basic_string(const _Alloc &__a) : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a) 
# 180
{ } 
# 182
template< class _CharT, class _Traits, class _Alloc> 
# 184
basic_string< _CharT, _Traits, _Alloc> ::basic_string(const basic_string &__str, size_type __pos, size_type __n) : _M_dataplus(_S_construct((__str._M_data()) + __str._M_check(__pos, "basic_string::basic_string"), ((__str._M_data()) + __str._M_limit(__pos, __n)) + __pos, _Alloc()), _Alloc()) 
# 190
{ } 
# 192
template< class _CharT, class _Traits, class _Alloc> 
# 194
basic_string< _CharT, _Traits, _Alloc> ::basic_string(const basic_string &__str, size_type __pos, size_type 
# 195
__n, const _Alloc &__a) : _M_dataplus(_S_construct((__str._M_data()) + __str._M_check(__pos, "basic_string::basic_string"), ((__str._M_data()) + __str._M_limit(__pos, __n)) + __pos, __a), __a) 
# 201
{ } 
# 204
template< class _CharT, class _Traits, class _Alloc> 
# 206
basic_string< _CharT, _Traits, _Alloc> ::basic_string(const _CharT *__s, size_type __n, const _Alloc &__a) : _M_dataplus(_S_construct(__s, __s + __n, __a), __a) 
# 208
{ } 
# 211
template< class _CharT, class _Traits, class _Alloc> 
# 213
basic_string< _CharT, _Traits, _Alloc> ::basic_string(const _CharT *__s, const _Alloc &__a) : _M_dataplus(_S_construct(__s, (__s) ? __s + traits_type::length(__s) : (__s + npos), __a), __a) 
# 216
{ } 
# 218
template< class _CharT, class _Traits, class _Alloc> 
# 220
basic_string< _CharT, _Traits, _Alloc> ::basic_string(size_type __n, _CharT __c, const _Alloc &__a) : _M_dataplus(_S_construct(__n, __c, __a), __a) 
# 222
{ } 
# 225
template< class _CharT, class _Traits, class _Alloc> 
# 226
template< class _InputIterator> 
# 228
basic_string< _CharT, _Traits, _Alloc> ::basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc &__a) : _M_dataplus(_S_construct(__beg, __end, __a), __a) 
# 230
{ } 
# 240 "/usr/include/c++/4.8.2/bits/basic_string.tcc" 3
template< class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>  &
# 243
basic_string< _CharT, _Traits, _Alloc> ::assign(const basic_string &__str) 
# 244
{ 
# 245
if (_M_rep() != __str._M_rep()) 
# 246
{ 
# 248
const allocator_type __a = this->get_allocator(); 
# 249
_CharT *__tmp = (__str._M_rep()->_M_grab(__a, __str.get_allocator())); 
# 250
(_M_rep()->_M_dispose(__a)); 
# 251
_M_data(__tmp); 
# 252
}  
# 253
return *this; 
# 254
} 
# 256
template< class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>  &
# 259
basic_string< _CharT, _Traits, _Alloc> ::assign(const _CharT *__s, size_type __n) 
# 260
{ 
# 261
; 
# 262
_M_check_length(this->size(), __n, "basic_string::assign"); 
# 263
if (_M_disjunct(__s) || (_M_rep()->_M_is_shared())) { 
# 264
return _M_replace_safe((size_type)0, this->size(), __s, __n); } else 
# 266
{ 
# 268
const size_type __pos = __s - _M_data(); 
# 269
if (__pos >= __n) { 
# 270
(_M_copy)(_M_data(), __s, __n); } else { 
# 271
if (__pos) { 
# 272
(_M_move)(_M_data(), __s, __n); }  }  
# 273
(_M_rep()->_M_set_length_and_sharable(__n)); 
# 274
return *this; 
# 275
}  
# 276
} 
# 278
template< class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>  &
# 281
basic_string< _CharT, _Traits, _Alloc> ::append(size_type __n, _CharT __c) 
# 282
{ 
# 283
if (__n) 
# 284
{ 
# 285
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 286
const size_type __len = __n + this->size(); 
# 287
if ((__len > this->capacity()) || (_M_rep()->_M_is_shared())) { 
# 288
this->reserve(__len); }  
# 289
(_M_assign)(_M_data() + this->size(), __n, __c); 
# 290
(_M_rep()->_M_set_length_and_sharable(__len)); 
# 291
}  
# 292
return *this; 
# 293
} 
# 295
template< class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>  &
# 298
basic_string< _CharT, _Traits, _Alloc> ::append(const _CharT *__s, size_type __n) 
# 299
{ 
# 300
; 
# 301
if (__n) 
# 302
{ 
# 303
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 304
const size_type __len = __n + this->size(); 
# 305
if ((__len > this->capacity()) || (_M_rep()->_M_is_shared())) 
# 306
{ 
# 307
if (_M_disjunct(__s)) { 
# 308
this->reserve(__len); } else 
# 310
{ 
# 311
const size_type __off = __s - _M_data(); 
# 312
this->reserve(__len); 
# 313
__s = (_M_data() + __off); 
# 314
}  
# 315
}  
# 316
(_M_copy)(_M_data() + this->size(), __s, __n); 
# 317
(_M_rep()->_M_set_length_and_sharable(__len)); 
# 318
}  
# 319
return *this; 
# 320
} 
# 322
template< class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>  &
# 325
basic_string< _CharT, _Traits, _Alloc> ::append(const basic_string &__str) 
# 326
{ 
# 327
const size_type __size = __str.size(); 
# 328
if (__size) 
# 329
{ 
# 330
const size_type __len = __size + this->size(); 
# 331
if ((__len > this->capacity()) || (_M_rep()->_M_is_shared())) { 
# 332
this->reserve(__len); }  
# 333
(_M_copy)(_M_data() + this->size(), (__str._M_data()), __size); 
# 334
(_M_rep()->_M_set_length_and_sharable(__len)); 
# 335
}  
# 336
return *this; 
# 337
} 
# 339
template< class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>  &
# 342
basic_string< _CharT, _Traits, _Alloc> ::append(const basic_string &__str, size_type __pos, size_type __n) 
# 343
{ 
# 344
__str._M_check(__pos, "basic_string::append"); 
# 345
__n = __str._M_limit(__pos, __n); 
# 346
if (__n) 
# 347
{ 
# 348
const size_type __len = __n + this->size(); 
# 349
if ((__len > this->capacity()) || (_M_rep()->_M_is_shared())) { 
# 350
this->reserve(__len); }  
# 351
(_M_copy)(_M_data() + this->size(), (__str._M_data()) + __pos, __n); 
# 352
(_M_rep()->_M_set_length_and_sharable(__len)); 
# 353
}  
# 354
return *this; 
# 355
} 
# 357
template< class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>  &
# 360
basic_string< _CharT, _Traits, _Alloc> ::insert(size_type __pos, const _CharT *__s, size_type __n) 
# 361
{ 
# 362
; 
# 363
_M_check(__pos, "basic_string::insert"); 
# 364
_M_check_length((size_type)0, __n, "basic_string::insert"); 
# 365
if (_M_disjunct(__s) || (_M_rep()->_M_is_shared())) { 
# 366
return _M_replace_safe(__pos, (size_type)0, __s, __n); } else 
# 368
{ 
# 370
const size_type __off = __s - _M_data(); 
# 371
_M_mutate(__pos, 0, __n); 
# 372
__s = (_M_data() + __off); 
# 373
_CharT *__p = _M_data() + __pos; 
# 374
if ((__s + __n) <= __p) { 
# 375
(_M_copy)(__p, __s, __n); } else { 
# 376
if (__s >= __p) { 
# 377
(_M_copy)(__p, __s + __n, __n); } else 
# 379
{ 
# 380
const size_type __nleft = __p - __s; 
# 381
(_M_copy)(__p, __s, __nleft); 
# 382
(_M_copy)(__p + __nleft, __p + __n, __n - __nleft); 
# 383
}  }  
# 384
return *this; 
# 385
}  
# 386
} 
# 388
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::iterator 
# 391
basic_string< _CharT, _Traits, _Alloc> ::erase(iterator __first, iterator __last) 
# 392
{ 
# 394
; 
# 399
const size_type __size = __last - __first; 
# 400
if (__size) 
# 401
{ 
# 402
const size_type __pos = __first - _M_ibegin(); 
# 403
_M_mutate(__pos, __size, (size_type)0); 
# 404
(_M_rep()->_M_set_leaked()); 
# 405
return ((__gnu_cxx::__normal_iterator< typename _Alloc::template rebind< _CharT> ::other::pointer, basic_string> )(_M_data() + __pos)); 
# 406
} else { 
# 408
return __first; }  
# 409
} 
# 411
template< class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>  &
# 414
basic_string< _CharT, _Traits, _Alloc> ::replace(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 415
__n2) 
# 416
{ 
# 417
; 
# 418
_M_check(__pos, "basic_string::replace"); 
# 419
__n1 = _M_limit(__pos, __n1); 
# 420
_M_check_length(__n1, __n2, "basic_string::replace"); 
# 421
bool __left; 
# 422
if (_M_disjunct(__s) || (_M_rep()->_M_is_shared())) { 
# 423
return _M_replace_safe(__pos, __n1, __s, __n2); } else { 
# 424
if ((__left = ((__s + __n2) <= (_M_data() + __pos))) || (((_M_data() + __pos) + __n1) <= __s)) 
# 426
{ 
# 428
size_type __off = __s - _M_data(); 
# 429
__left ? __off : (__off += (__n2 - __n1)); 
# 430
_M_mutate(__pos, __n1, __n2); 
# 431
(_M_copy)(_M_data() + __pos, _M_data() + __off, __n2); 
# 432
return *this; 
# 433
} else 
# 435
{ 
# 437
const basic_string __tmp(__s, __n2); 
# 438
return _M_replace_safe(__pos, __n1, (__tmp._M_data()), __n2); 
# 439
}  }  
# 440
} 
# 442
template< class _CharT, class _Traits, class _Alloc> void 
# 445
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_M_destroy(const _Alloc &__a) throw() 
# 446
{ 
# 447
const typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type __size = sizeof(typename std::basic_string< _CharT, _Traits, _Alloc> ::_Rep_base) + (((this->_M_capacity) + 1) * sizeof(_CharT)); 
# 449
(((_Raw_bytes_alloc)__a).deallocate(reinterpret_cast< char *>(this), __size)); 
# 450
} 
# 452
template< class _CharT, class _Traits, class _Alloc> void 
# 455
basic_string< _CharT, _Traits, _Alloc> ::_M_leak_hard() 
# 456
{ 
# 458
if (_M_rep() == (&(_S_empty_rep)())) { 
# 459
return; }  
# 461
if ((_M_rep()->_M_is_shared())) { 
# 462
_M_mutate(0, 0, 0); }  
# 463
(_M_rep()->_M_set_leaked()); 
# 464
} 
# 466
template< class _CharT, class _Traits, class _Alloc> void 
# 469
basic_string< _CharT, _Traits, _Alloc> ::_M_mutate(size_type __pos, size_type __len1, size_type __len2) 
# 470
{ 
# 471
const size_type __old_size = this->size(); 
# 472
const size_type __new_size = (__old_size + __len2) - __len1; 
# 473
const size_type __how_much = (__old_size - __pos) - __len1; 
# 475
if ((__new_size > this->capacity()) || (_M_rep()->_M_is_shared())) 
# 476
{ 
# 478
const allocator_type __a = get_allocator(); 
# 479
_Rep *__r = _Rep::_S_create(__new_size, this->capacity(), __a); 
# 481
if (__pos) { 
# 482
(_M_copy)((__r->_M_refdata()), _M_data(), __pos); }  
# 483
if (__how_much) { 
# 484
(_M_copy)(((__r->_M_refdata()) + __pos) + __len2, (_M_data() + __pos) + __len1, __how_much); }  
# 487
(_M_rep()->_M_dispose(__a)); 
# 488
_M_data((__r->_M_refdata())); 
# 489
} else { 
# 490
if (__how_much && (__len1 != __len2)) 
# 491
{ 
# 493
(_M_move)((_M_data() + __pos) + __len2, (_M_data() + __pos) + __len1, __how_much); 
# 495
}  }  
# 496
(_M_rep()->_M_set_length_and_sharable(__new_size)); 
# 497
} 
# 499
template< class _CharT, class _Traits, class _Alloc> void 
# 502
basic_string< _CharT, _Traits, _Alloc> ::reserve(size_type __res) 
# 503
{ 
# 504
if ((__res != this->capacity()) || (_M_rep()->_M_is_shared())) 
# 505
{ 
# 507
if (__res < this->size()) { 
# 508
__res = this->size(); }  
# 509
const allocator_type __a = get_allocator(); 
# 510
_CharT *__tmp = (_M_rep()->_M_clone(__a, __res - this->size())); 
# 511
(_M_rep()->_M_dispose(__a)); 
# 512
_M_data(__tmp); 
# 513
}  
# 514
} 
# 516
template< class _CharT, class _Traits, class _Alloc> void 
# 519
basic_string< _CharT, _Traits, _Alloc> ::swap(basic_string &__s) 
# 520
{ 
# 521
if ((_M_rep()->_M_is_leaked())) { 
# 522
(_M_rep()->_M_set_sharable()); }  
# 523
if ((__s._M_rep()->_M_is_leaked())) { 
# 524
(__s._M_rep()->_M_set_sharable()); }  
# 525
if (this->get_allocator() == __s.get_allocator()) 
# 526
{ 
# 527
_CharT *__tmp = _M_data(); 
# 528
_M_data((__s._M_data())); 
# 529
(__s._M_data(__tmp)); 
# 530
} else 
# 533
{ 
# 534
const basic_string __tmp1(_M_ibegin(), _M_iend(), __s.get_allocator()); 
# 536
const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(), this->get_allocator()); 
# 538
(*this) = __tmp2; 
# 539
__s = __tmp1; 
# 540
}  
# 541
} 
# 543
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::_Rep *
# 546
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_create(typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type __capacity, typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type __old_capacity, const _Alloc &
# 547
__alloc) 
# 548
{ 
# 551
if (__capacity > _S_max_size) { 
# 552
__throw_length_error("basic_string::_S_create"); }  
# 577 "/usr/include/c++/4.8.2/bits/basic_string.tcc" 3
const typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type __pagesize = (4096); 
# 578
const typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type __malloc_header_size = ((4) * sizeof(void *)); 
# 586
if ((__capacity > __old_capacity) && (__capacity < (2 * __old_capacity))) { 
# 587
__capacity = (2 * __old_capacity); }  
# 592
typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type __size = ((__capacity + 1) * sizeof(_CharT)) + sizeof(_Rep); 
# 594
const typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type __adj_size = __size + __malloc_header_size; 
# 595
if ((__adj_size > __pagesize) && (__capacity > __old_capacity)) 
# 596
{ 
# 597
const typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type __extra = __pagesize - (__adj_size % __pagesize); 
# 598
__capacity += (__extra / sizeof(_CharT)); 
# 600
if (__capacity > _S_max_size) { 
# 601
__capacity = _S_max_size; }  
# 602
__size = (((__capacity + 1) * sizeof(_CharT)) + sizeof(_Rep)); 
# 603
}  
# 607
void *__place = (((_Raw_bytes_alloc)__alloc).allocate(__size)); 
# 608
_Rep *__p = new (__place) _Rep; 
# 609
(__p->_M_capacity) = __capacity; 
# 617
__p->_M_set_sharable(); 
# 618
return __p; 
# 619
} 
# 621
template< class _CharT, class _Traits, class _Alloc> _CharT *
# 624
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_M_clone(const _Alloc &__alloc, typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type __res) 
# 625
{ 
# 627
const typename std::basic_string< _CharT, _Traits, _Alloc> ::size_type __requested_cap = (this->_M_length) + __res; 
# 628
_Rep *__r = (_S_create)(__requested_cap, (this->_M_capacity), __alloc); 
# 630
if (this->_M_length) { 
# 631
(std::basic_string< _CharT, _Traits, _Alloc> ::_M_copy)(__r->_M_refdata(), _M_refdata(), (this->_M_length)); }  
# 633
__r->_M_set_length_and_sharable((this->_M_length)); 
# 634
return __r->_M_refdata(); 
# 635
} 
# 637
template< class _CharT, class _Traits, class _Alloc> void 
# 640
basic_string< _CharT, _Traits, _Alloc> ::resize(size_type __n, _CharT __c) 
# 641
{ 
# 642
const size_type __size = this->size(); 
# 643
_M_check_length(__size, __n, "basic_string::resize"); 
# 644
if (__size < __n) { 
# 645
(this->append(__n - __size, __c)); } else { 
# 646
if (__n < __size) { 
# 647
(this->erase(__n)); }  }  
# 649
} 
# 651
template< class _CharT, class _Traits, class _Alloc> 
# 652
template< class _InputIterator> basic_string< _CharT, _Traits, _Alloc>  &
# 655
basic_string< _CharT, _Traits, _Alloc> ::_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator 
# 656
__k2, __false_type) 
# 657
{ 
# 658
const basic_string __s(__k1, __k2); 
# 659
const size_type __n1 = __i2 - __i1; 
# 660
_M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch"); 
# 661
return _M_replace_safe(__i1 - _M_ibegin(), __n1, (__s._M_data()), __s.size()); 
# 663
} 
# 665
template< class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>  &
# 668
basic_string< _CharT, _Traits, _Alloc> ::_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT 
# 669
__c) 
# 670
{ 
# 671
_M_check_length(__n1, __n2, "basic_string::_M_replace_aux"); 
# 672
_M_mutate(__pos1, __n1, __n2); 
# 673
if (__n2) { 
# 674
(_M_assign)(_M_data() + __pos1, __n2, __c); }  
# 675
return *this; 
# 676
} 
# 678
template< class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>  &
# 681
basic_string< _CharT, _Traits, _Alloc> ::_M_replace_safe(size_type __pos1, size_type __n1, const _CharT *__s, size_type 
# 682
__n2) 
# 683
{ 
# 684
_M_mutate(__pos1, __n1, __n2); 
# 685
if (__n2) { 
# 686
(_M_copy)(_M_data() + __pos1, __s, __n2); }  
# 687
return *this; 
# 688
} 
# 690
template< class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>  
# 692
operator+(const _CharT *__lhs, const basic_string< _CharT, _Traits, _Alloc>  &
# 693
__rhs) 
# 694
{ 
# 695
; 
# 696
typedef basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 697
typedef typename basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 698
const __size_type __len = _Traits::length(__lhs); 
# 699
__string_type __str; 
# 700
(__str.reserve(__len + (__rhs.size()))); 
# 701
(__str.append(__lhs, __len)); 
# 702
(__str.append(__rhs)); 
# 703
return __str; 
# 704
} 
# 706
template< class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>  
# 708
operator+(_CharT __lhs, const basic_string< _CharT, _Traits, _Alloc>  &__rhs) 
# 709
{ 
# 710
typedef basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 711
typedef typename basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 712
__string_type __str; 
# 713
const __size_type __len = (__rhs.size()); 
# 714
(__str.reserve(__len + 1)); 
# 715
(__str.append((__size_type)1, __lhs)); 
# 716
(__str.append(__rhs)); 
# 717
return __str; 
# 718
} 
# 720
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 723
basic_string< _CharT, _Traits, _Alloc> ::copy(_CharT *__s, size_type __n, size_type __pos) const 
# 724
{ 
# 725
_M_check(__pos, "basic_string::copy"); 
# 726
__n = _M_limit(__pos, __n); 
# 727
; 
# 728
if (__n) { 
# 729
(_M_copy)(__s, _M_data() + __pos, __n); }  
# 731
return __n; 
# 732
} 
# 734
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 737
basic_string< _CharT, _Traits, _Alloc> ::find(const _CharT *__s, size_type __pos, size_type __n) const 
# 738
{ 
# 739
; 
# 740
const size_type __size = this->size(); 
# 741
const _CharT *__data = _M_data(); 
# 743
if (__n == 0) { 
# 744
return (__pos <= __size) ? __pos : npos; }  
# 746
if (__n <= __size) 
# 747
{ 
# 748
for (; __pos <= (__size - __n); ++__pos) { 
# 749
if (traits_type::eq(__data[__pos], __s[0]) && (traits_type::compare((__data + __pos) + 1, __s + 1, __n - 1) == 0)) { 
# 752
return __pos; }  }  
# 753
}  
# 754
return npos; 
# 755
} 
# 757
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 760
basic_string< _CharT, _Traits, _Alloc> ::find(_CharT __c, size_type __pos) const 
# 761
{ 
# 762
size_type __ret = npos; 
# 763
const size_type __size = this->size(); 
# 764
if (__pos < __size) 
# 765
{ 
# 766
const _CharT *__data = _M_data(); 
# 767
const size_type __n = __size - __pos; 
# 768
const _CharT *__p = traits_type::find(__data + __pos, __n, __c); 
# 769
if (__p) { 
# 770
__ret = (__p - __data); }  
# 771
}  
# 772
return __ret; 
# 773
} 
# 775
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 778
basic_string< _CharT, _Traits, _Alloc> ::rfind(const _CharT *__s, size_type __pos, size_type __n) const 
# 779
{ 
# 780
; 
# 781
const size_type __size = this->size(); 
# 782
if (__n <= __size) 
# 783
{ 
# 784
__pos = std::min((size_type)(__size - __n), __pos); 
# 785
const _CharT *__data = _M_data(); 
# 786
do 
# 787
{ 
# 788
if (traits_type::compare(__data + __pos, __s, __n) == 0) { 
# 789
return __pos; }  
# 790
} 
# 791
while ((__pos--) > 0); 
# 792
}  
# 793
return npos; 
# 794
} 
# 796
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 799
basic_string< _CharT, _Traits, _Alloc> ::rfind(_CharT __c, size_type __pos) const 
# 800
{ 
# 801
size_type __size = this->size(); 
# 802
if (__size) 
# 803
{ 
# 804
if ((--__size) > __pos) { 
# 805
__size = __pos; }  
# 806
for (++__size; (__size--) > 0;) { 
# 807
if (traits_type::eq(_M_data()[__size], __c)) { 
# 808
return __size; }  }  
# 809
}  
# 810
return npos; 
# 811
} 
# 813
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 816
basic_string< _CharT, _Traits, _Alloc> ::find_first_of(const _CharT *__s, size_type __pos, size_type __n) const 
# 817
{ 
# 818
; 
# 819
for (; __n && (__pos < this->size()); ++__pos) 
# 820
{ 
# 821
const _CharT *__p = traits_type::find(__s, __n, _M_data()[__pos]); 
# 822
if (__p) { 
# 823
return __pos; }  
# 824
}  
# 825
return npos; 
# 826
} 
# 828
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 831
basic_string< _CharT, _Traits, _Alloc> ::find_last_of(const _CharT *__s, size_type __pos, size_type __n) const 
# 832
{ 
# 833
; 
# 834
size_type __size = this->size(); 
# 835
if (__size && __n) 
# 836
{ 
# 837
if ((--__size) > __pos) { 
# 838
__size = __pos; }  
# 839
do 
# 840
{ 
# 841
if (traits_type::find(__s, __n, _M_data()[__size])) { 
# 842
return __size; }  
# 843
} 
# 844
while ((__size--) != 0); 
# 845
}  
# 846
return npos; 
# 847
} 
# 849
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 852
basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(const _CharT *__s, size_type __pos, size_type __n) const 
# 853
{ 
# 854
; 
# 855
for (; __pos < this->size(); ++__pos) { 
# 856
if (!traits_type::find(__s, __n, _M_data()[__pos])) { 
# 857
return __pos; }  }  
# 858
return npos; 
# 859
} 
# 861
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 864
basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(_CharT __c, size_type __pos) const 
# 865
{ 
# 866
for (; __pos < this->size(); ++__pos) { 
# 867
if (!traits_type::eq(_M_data()[__pos], __c)) { 
# 868
return __pos; }  }  
# 869
return npos; 
# 870
} 
# 872
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 875
basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(const _CharT *__s, size_type __pos, size_type __n) const 
# 876
{ 
# 877
; 
# 878
size_type __size = this->size(); 
# 879
if (__size) 
# 880
{ 
# 881
if ((--__size) > __pos) { 
# 882
__size = __pos; }  
# 883
do 
# 884
{ 
# 885
if (!traits_type::find(__s, __n, _M_data()[__size])) { 
# 886
return __size; }  
# 887
} 
# 888
while (__size--); 
# 889
}  
# 890
return npos; 
# 891
} 
# 893
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 896
basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(_CharT __c, size_type __pos) const 
# 897
{ 
# 898
size_type __size = this->size(); 
# 899
if (__size) 
# 900
{ 
# 901
if ((--__size) > __pos) { 
# 902
__size = __pos; }  
# 903
do 
# 904
{ 
# 905
if (!traits_type::eq(_M_data()[__size], __c)) { 
# 906
return __size; }  
# 907
} 
# 908
while (__size--); 
# 909
}  
# 910
return npos; 
# 911
} 
# 913
template< class _CharT, class _Traits, class _Alloc> int 
# 916
basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n, const basic_string &__str) const 
# 917
{ 
# 918
_M_check(__pos, "basic_string::compare"); 
# 919
__n = _M_limit(__pos, __n); 
# 920
const size_type __osize = __str.size(); 
# 921
const size_type __len = std::min(__n, __osize); 
# 922
int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len); 
# 923
if (!__r) { 
# 924
__r = (_S_compare)(__n, __osize); }  
# 925
return __r; 
# 926
} 
# 928
template< class _CharT, class _Traits, class _Alloc> int 
# 931
basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 932
__pos2, size_type __n2) const 
# 933
{ 
# 934
_M_check(__pos1, "basic_string::compare"); 
# 935
__str._M_check(__pos2, "basic_string::compare"); 
# 936
__n1 = _M_limit(__pos1, __n1); 
# 937
__n2 = __str._M_limit(__pos2, __n2); 
# 938
const size_type __len = std::min(__n1, __n2); 
# 939
int __r = traits_type::compare(_M_data() + __pos1, __str.data() + __pos2, __len); 
# 941
if (!__r) { 
# 942
__r = (_S_compare)(__n1, __n2); }  
# 943
return __r; 
# 944
} 
# 946
template< class _CharT, class _Traits, class _Alloc> int 
# 949
basic_string< _CharT, _Traits, _Alloc> ::compare(const _CharT *__s) const 
# 950
{ 
# 951
; 
# 952
const size_type __size = this->size(); 
# 953
const size_type __osize = traits_type::length(__s); 
# 954
const size_type __len = std::min(__size, __osize); 
# 955
int __r = traits_type::compare(_M_data(), __s, __len); 
# 956
if (!__r) { 
# 957
__r = (_S_compare)(__size, __osize); }  
# 958
return __r; 
# 959
} 
# 961
template< class _CharT, class _Traits, class _Alloc> int 
# 964
basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s) const 
# 965
{ 
# 966
; 
# 967
_M_check(__pos, "basic_string::compare"); 
# 968
__n1 = _M_limit(__pos, __n1); 
# 969
const size_type __osize = traits_type::length(__s); 
# 970
const size_type __len = std::min(__n1, __osize); 
# 971
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 972
if (!__r) { 
# 973
__r = (_S_compare)(__n1, __osize); }  
# 974
return __r; 
# 975
} 
# 977
template< class _CharT, class _Traits, class _Alloc> int 
# 980
basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 981
__n2) const 
# 982
{ 
# 983
; 
# 984
_M_check(__pos, "basic_string::compare"); 
# 985
__n1 = _M_limit(__pos, __n1); 
# 986
const size_type __len = std::min(__n1, __n2); 
# 987
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 988
if (!__r) { 
# 989
__r = (_S_compare)(__n1, __n2); }  
# 990
return __r; 
# 991
} 
# 994
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 996
operator>>(basic_istream< _CharT, _Traits>  &__in, basic_string< _CharT, _Traits, _Alloc>  &
# 997
__str) 
# 998
{ 
# 999
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1000
typedef basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1001
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1002
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1003
typedef typename basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1004
typedef ctype< _CharT>  __ctype_type; 
# 1005
typedef typename ctype< _CharT> ::ctype_base __ctype_base; 
# 1007
__size_type __extracted = (0); 
# 1008
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 1009
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 1010
if (__cerb) 
# 1011
{ 
# 1012
try 
# 1013
{ 
# 1015
(__str.erase()); 
# 1016
_CharT __buf[128]; 
# 1017
__size_type __len = (0); 
# 1018
const streamsize __w = (__in.width()); 
# 1019
const __size_type __n = (__w > (0)) ? static_cast< __size_type>(__w) : (__str.max_size()); 
# 1021
const __ctype_type &__ct = use_facet< ctype< _CharT> > ((__in.getloc())); 
# 1022
const __int_type __eof = _Traits::eof(); 
# 1023
__int_type __c = ((__in.rdbuf())->sgetc()); 
# 1025
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!(__ct.is(__ctype_base::space, _Traits::to_char_type(__c))))) 
# 1029
{ 
# 1030
if (__len == (sizeof(__buf) / sizeof(_CharT))) 
# 1031
{ 
# 1032
(__str.append(__buf, sizeof(__buf) / sizeof(_CharT))); 
# 1033
__len = 0; 
# 1034
}  
# 1035
(__buf[__len++]) = _Traits::to_char_type(__c); 
# 1036
++__extracted; 
# 1037
__c = ((__in.rdbuf())->snextc()); 
# 1038
}  
# 1039
(__str.append(__buf, __len)); 
# 1041
if (_Traits::eq_int_type(__c, __eof)) { 
# 1042
__err |= __ios_base::eofbit; }  
# 1043
(__in.width(0)); 
# 1044
} 
# 1045
catch (__cxxabiv1::__forced_unwind &) 
# 1046
{ 
# 1047
(__in._M_setstate(__ios_base::badbit)); 
# 1048
throw; 
# 1049
} 
# 1050
catch (...) 
# 1051
{ 
# 1055
(__in._M_setstate(__ios_base::badbit)); 
# 1056
}  
# 1057
}  
# 1059
if (!__extracted) { 
# 1060
__err |= __ios_base::failbit; }  
# 1061
if (__err) { 
# 1062
(__in.setstate(__err)); }  
# 1063
return __in; 
# 1064
} 
# 1066
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 1068
getline(basic_istream< _CharT, _Traits>  &__in, basic_string< _CharT, _Traits, _Alloc>  &
# 1069
__str, _CharT __delim) 
# 1070
{ 
# 1071
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1072
typedef basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1073
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1074
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1075
typedef typename basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1077
__size_type __extracted = (0); 
# 1078
const __size_type __n = (__str.max_size()); 
# 1079
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 1080
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, true); 
# 1081
if (__cerb) 
# 1082
{ 
# 1083
try 
# 1084
{ 
# 1085
(__str.erase()); 
# 1086
const __int_type __idelim = _Traits::to_int_type(__delim); 
# 1087
const __int_type __eof = _Traits::eof(); 
# 1088
__int_type __c = ((__in.rdbuf())->sgetc()); 
# 1090
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!_Traits::eq_int_type(__c, __idelim))) 
# 1093
{ 
# 1094
__str += _Traits::to_char_type(__c); 
# 1095
++__extracted; 
# 1096
__c = ((__in.rdbuf())->snextc()); 
# 1097
}  
# 1099
if (_Traits::eq_int_type(__c, __eof)) { 
# 1100
__err |= __ios_base::eofbit; } else { 
# 1101
if (_Traits::eq_int_type(__c, __idelim)) 
# 1102
{ 
# 1103
++__extracted; 
# 1104
((__in.rdbuf())->sbumpc()); 
# 1105
} else { 
# 1107
__err |= __ios_base::failbit; }  }  
# 1108
} 
# 1109
catch (__cxxabiv1::__forced_unwind &) 
# 1110
{ 
# 1111
(__in._M_setstate(__ios_base::badbit)); 
# 1112
throw; 
# 1113
} 
# 1114
catch (...) 
# 1115
{ 
# 1119
(__in._M_setstate(__ios_base::badbit)); 
# 1120
}  
# 1121
}  
# 1122
if (!__extracted) { 
# 1123
__err |= __ios_base::failbit; }  
# 1124
if (__err) { 
# 1125
(__in.setstate(__err)); }  
# 1126
return __in; 
# 1127
} 
# 1132
extern template class basic_string< char, char_traits< char> , allocator< char> > ;
# 1133
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __is, basic_string< char, char_traits< char> , allocator< char> >  & __str);
# 1136
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __os, const basic_string< char, char_traits< char> , allocator< char> >  & __str);
# 1139
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, basic_string< char, char_traits< char> , allocator< char> >  & __str, char __delim);
# 1142
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, basic_string< char, char_traits< char> , allocator< char> >  & __str);
# 1147
extern template class basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 1148
extern template basic_istream< wchar_t>  &operator>>(basic_istream< wchar_t>  & __is, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & __str);
# 1151
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __os, const basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & __str);
# 1154
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & __str, wchar_t __delim);
# 1157
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & __str);
# 1164
}
# 43 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 62 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
class locale { 
# 67
public: typedef int category; 
# 70
class facet; 
# 71
class id; 
# 72
class _Impl; 
# 74
friend class facet; 
# 75
friend class _Impl; 
# 77
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 81 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 85
template< class _Cache> friend struct __use_cache; 
# 98 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
static const category none = 0; 
# 99
static const category ctype = (1L << 0); 
# 100
static const category numeric = (1L << 1); 
# 101
static const category collate = (1L << 2); 
# 102
static const category time = (1L << 3); 
# 103
static const category monetary = (1L << 4); 
# 104
static const category messages = (1L << 5); 
# 105
static const category all = (((((ctype | numeric) | collate) | time) | monetary) | messages); 
# 117 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
locale() throw(); 
# 126 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
locale(const locale & __other) throw(); 
# 137 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
explicit locale(const char * __s); 
# 151 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
locale(const locale & __base, const char * __s, category __cat); 
# 164 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
locale(const locale & __base, const locale & __add, category __cat); 
# 177 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
template< class _Facet> locale(const locale & __other, _Facet * __f); 
# 181
~locale() throw(); 
# 192 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
const locale &operator=(const locale & __other) throw(); 
# 206 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
template< class _Facet> locale combine(const locale & __other) const; 
# 216
string name() const; 
# 226 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
bool operator==(const locale & __other) const throw(); 
# 235 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
bool operator!=(const locale &__other) const throw() 
# 236
{ return !this->operator==(__other); } 
# 253 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
template< class _Char, class _Traits, class _Alloc> bool operator()(const basic_string< _Char, _Traits, _Alloc>  & __s1, const basic_string< _Char, _Traits, _Alloc>  & __s2) const; 
# 270 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
static locale global(const locale & __loc); 
# 276
static const locale &classic(); 
# 280
private: _Impl *_M_impl; 
# 283
static _Impl *_S_classic; 
# 286
static _Impl *_S_global; 
# 292
static const char *const *const _S_categories; 
# 304 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
enum { _S_categories_size = 12}; 
# 307
static __gthread_once_t _S_once; 
# 311
explicit locale(_Impl *) throw(); 
# 314
static void _S_initialize(); 
# 317
static void _S_initialize_once() throw(); 
# 320
static category _S_normalize_category(category); 
# 323
void _M_coalesce(const locale & __base, const locale & __add, category __cat); 
# 324
}; 
# 338 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
class locale::facet { 
# 341
friend class locale; 
# 342
friend class _Impl; 
# 344
mutable _Atomic_word _M_refcount; 
# 347
static __c_locale _S_c_locale; 
# 350
static const char _S_c_name[2]; 
# 353
static __gthread_once_t _S_once; 
# 357
static void _S_initialize_once(); 
# 370 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
protected: explicit facet(size_t __refs = 0) throw() : _M_refcount((__refs) ? 1 : 0) 
# 371
{ } 
# 375
virtual ~facet(); 
# 378
static void _S_create_c_locale(__c_locale & __cloc, const char * __s, __c_locale __old = 0); 
# 382
static __c_locale _S_clone_c_locale(__c_locale & __cloc) throw(); 
# 385
static void _S_destroy_c_locale(__c_locale & __cloc); 
# 388
static __c_locale _S_lc_ctype_c_locale(__c_locale __cloc, const char * __s); 
# 393
static __c_locale _S_get_c_locale(); 
# 395
__attribute((const)) static const char *
# 396
_S_get_c_name() throw(); 
# 400
private: void _M_add_reference() const throw() 
# 401
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 404
void _M_remove_reference() const throw() 
# 405
{ 
# 407
; 
# 408
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 409
{ 
# 410
; 
# 411
try 
# 412
{ delete this; } 
# 413
catch (...) 
# 414
{ }  
# 415
}  
# 416
} 
# 418
facet(const facet &); 
# 421
facet &operator=(const facet &); 
# 422
}; 
# 436 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
class locale::id { 
# 439
friend class locale; 
# 440
friend class _Impl; 
# 442
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 446
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 453 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
mutable size_t _M_index; 
# 456
static _Atomic_word _S_refcount; 
# 459
void operator=(const id &); 
# 461
id(const id &); 
# 467
public: id() { } 
# 470
size_t _M_id() const throw(); 
# 471
}; 
# 475
class locale::_Impl { 
# 479
friend class locale; 
# 480
friend class facet; 
# 482
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 486 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 490
template< class _Cache> friend struct __use_cache; 
# 495
_Atomic_word _M_refcount; 
# 496
const facet **_M_facets; 
# 497
size_t _M_facets_size; 
# 498
const facet **_M_caches; 
# 499
char **_M_names; 
# 500
static const id *const _S_id_ctype[]; 
# 501
static const id *const _S_id_numeric[]; 
# 502
static const id *const _S_id_collate[]; 
# 503
static const id *const _S_id_time[]; 
# 504
static const id *const _S_id_monetary[]; 
# 505
static const id *const _S_id_messages[]; 
# 506
static const id *const *const _S_facet_categories[]; 
# 509
void _M_add_reference() throw() 
# 510
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 513
void _M_remove_reference() throw() 
# 514
{ 
# 516
; 
# 517
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 518
{ 
# 519
; 
# 520
try 
# 521
{ delete this; } 
# 522
catch (...) 
# 523
{ }  
# 524
}  
# 525
} 
# 527
_Impl(const _Impl &, size_t); 
# 528
_Impl(const char *, size_t); 
# 529
_Impl(size_t) throw(); 
# 531
~_Impl() throw(); 
# 533
_Impl(const _Impl &); 
# 536
void operator=(const _Impl &); 
# 539 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
bool _M_check_same_name() 
# 540
{ 
# 541
bool __ret = true; 
# 542
if ((_M_names)[1]) { 
# 544
for (size_t __i = (0); __ret && (__i < ((_S_categories_size) - 1)); ++__i) { 
# 545
__ret = (__builtin_strcmp((_M_names)[__i], (_M_names)[__i + (1)]) == 0); }  }  
# 546
return __ret; 
# 547
} 
# 550
void _M_replace_categories(const _Impl *, category); 
# 553
void _M_replace_category(const _Impl *, const id *const *); 
# 556
void _M_replace_facet(const _Impl *, const id *); 
# 559
void _M_install_facet(const id *, const facet *); 
# 561
template< class _Facet> void 
# 563
_M_init_facet(_Facet *__facet) 
# 564
{ this->_M_install_facet(&_Facet::id, __facet); } 
# 567
void _M_install_cache(const facet *, size_t); 
# 568
}; 
# 583 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
template< class _CharT> 
# 584
class collate : public locale::facet { 
# 590
public: typedef _CharT char_type; 
# 591
typedef basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  string_type; 
# 597
protected: __c_locale _M_c_locale_collate; 
# 601
public: static locale::id id; 
# 611 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
explicit collate(size_t __refs = 0) : locale::facet(__refs), _M_c_locale_collate(_S_get_c_locale()) 
# 613
{ } 
# 625 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
explicit collate(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc)) 
# 627
{ } 
# 642 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
int compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 643
__lo2, const _CharT *__hi2) const 
# 644
{ return this->do_compare(__lo1, __hi1, __lo2, __hi2); } 
# 661 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
string_type transform(const _CharT *__lo, const _CharT *__hi) const 
# 662
{ return this->do_transform(__lo, __hi); } 
# 675 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
long hash(const _CharT *__lo, const _CharT *__hi) const 
# 676
{ return this->do_hash(__lo, __hi); } 
# 680
int _M_compare(const _CharT *, const _CharT *) const throw(); 
# 683
size_t _M_transform(_CharT *, const _CharT *, size_t) const throw(); 
# 688
protected: virtual ~collate() 
# 689
{ _S_destroy_c_locale(_M_c_locale_collate); } 
# 704 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
virtual int do_compare(const _CharT * __lo1, const _CharT * __hi1, const _CharT * __lo2, const _CharT * __hi2) const; 
# 718 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
virtual string_type do_transform(const _CharT * __lo, const _CharT * __hi) const; 
# 731 "/usr/include/c++/4.8.2/bits/locale_classes.h" 3
virtual long do_hash(const _CharT * __lo, const _CharT * __hi) const; 
# 732
}; 
# 734
template< class _CharT> locale::id 
# 735
collate< _CharT> ::id; 
# 740
template<> int collate< char> ::_M_compare(const char *, const char *) const throw(); 
# 744
template<> size_t collate< char> ::_M_transform(char *, const char *, size_t) const throw(); 
# 749
template<> int collate< wchar_t> ::_M_compare(const wchar_t *, const wchar_t *) const throw(); 
# 753
template<> size_t collate< wchar_t> ::_M_transform(wchar_t *, const wchar_t *, size_t) const throw(); 
# 757
template< class _CharT> 
# 758
class collate_byname : public collate< _CharT>  { 
# 763
public: typedef _CharT char_type; 
# 764
typedef basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  string_type; 
# 768
explicit collate_byname(const char *__s, std::size_t __refs = 0) : std::collate< _CharT> (__refs) 
# 770
{ 
# 771
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 773
{ 
# 774
(this->_S_destroy_c_locale((this->_M_c_locale_collate))); 
# 775
(this->_S_create_c_locale((this->_M_c_locale_collate), __s)); 
# 776
}  
# 777
} 
# 781
protected: virtual ~collate_byname() { } 
# 782
}; 
# 785
}
# 39 "/usr/include/c++/4.8.2/bits/locale_classes.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _Facet> 
# 45
locale::locale(const locale &__other, _Facet *__f) 
# 46
{ 
# 47
(_M_impl) = (new _Impl(*(__other._M_impl), 1)); 
# 49
try 
# 50
{ (_M_impl)->_M_install_facet(&_Facet::id, __f); } 
# 51
catch (...) 
# 52
{ 
# 53
(_M_impl)->_M_remove_reference(); 
# 54
throw; 
# 55
}  
# 56
delete [] (((_M_impl)->_M_names)[0]); 
# 57
(((_M_impl)->_M_names)[0]) = (0); 
# 58
} 
# 60
template< class _Facet> locale 
# 63
locale::combine(const locale &__other) const 
# 64
{ 
# 65
_Impl *__tmp = new _Impl(*(_M_impl), 1); 
# 66
try 
# 67
{ 
# 68
__tmp->_M_replace_facet(__other._M_impl, &_Facet::id); 
# 69
} 
# 70
catch (...) 
# 71
{ 
# 72
__tmp->_M_remove_reference(); 
# 73
throw; 
# 74
}  
# 75
return ((locale)(__tmp)); 
# 76
} 
# 78
template< class _CharT, class _Traits, class _Alloc> bool 
# 81 "/usr/include/c++/4.8.2/bits/locale_classes.tcc" 3
locale::operator()(const basic_string< _CharT, _Traits, _Alloc>  &__s1, const basic_string< _CharT, _Traits, _Alloc>  &
# 82
__s2) const 
# 83
{ 
# 84
typedef std::collate< _CharT>  __collate_type; 
# 85
const __collate_type &__collate = use_facet< std::collate< _CharT> > (*this); 
# 86
return (__collate.compare((__s1.data()), (__s1.data()) + (__s1.length()), (__s2.data()), (__s2.data()) + (__s2.length()))) < 0; 
# 88
} 
# 102 "/usr/include/c++/4.8.2/bits/locale_classes.tcc" 3
template< class _Facet> bool 
# 104 "/usr/include/c++/4.8.2/bits/locale_classes.tcc" 3
has_facet(const locale &__loc) throw() 
# 105
{ 
# 106
const size_t __i = (_Facet::id._M_id)(); 
# 107
const locale::facet **__facets = (__loc._M_impl)->_M_facets; 
# 108
return (__i < ((__loc._M_impl)->_M_facets_size)) && (dynamic_cast< const _Facet *>(__facets[__i])); 
# 114
} 
# 130 "/usr/include/c++/4.8.2/bits/locale_classes.tcc" 3
template< class _Facet> const _Facet &
# 132
use_facet(const locale &__loc) 
# 133
{ 
# 134
const size_t __i = (_Facet::id._M_id)(); 
# 135
const locale::facet **__facets = (__loc._M_impl)->_M_facets; 
# 136
if ((__i >= ((__loc._M_impl)->_M_facets_size)) || (!(__facets[__i]))) { 
# 137
__throw_bad_cast(); }  
# 139
return dynamic_cast< const _Facet &>(*(__facets[__i])); 
# 143
} 
# 147
template< class _CharT> int 
# 149
collate< _CharT> ::_M_compare(const _CharT *, const _CharT *) const throw() 
# 150
{ return 0; } 
# 153
template< class _CharT> size_t 
# 155
collate< _CharT> ::_M_transform(_CharT *, const _CharT *, size_t) const throw() 
# 156
{ return 0; } 
# 158
template< class _CharT> int 
# 161
collate< _CharT> ::do_compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 162
__lo2, const _CharT *__hi2) const 
# 163
{ 
# 166
const string_type __one(__lo1, __hi1); 
# 167
const string_type __two(__lo2, __hi2); 
# 169
const _CharT *__p = (__one.c_str()); 
# 170
const _CharT *__pend = (__one.data()) + (__one.length()); 
# 171
const _CharT *__q = (__two.c_str()); 
# 172
const _CharT *__qend = (__two.data()) + (__two.length()); 
# 177
for (; ;) 
# 178
{ 
# 179
const int __res = _M_compare(__p, __q); 
# 180
if (__res) { 
# 181
return __res; }  
# 183
__p += char_traits< _CharT> ::length(__p); 
# 184
__q += char_traits< _CharT> ::length(__q); 
# 185
if ((__p == __pend) && (__q == __qend)) { 
# 186
return 0; } else { 
# 187
if (__p == __pend) { 
# 188
return -1; } else { 
# 189
if (__q == __qend) { 
# 190
return 1; }  }  }  
# 192
__p++; 
# 193
__q++; 
# 194
}  
# 195
} 
# 197
template< class _CharT> typename collate< _CharT> ::string_type 
# 200
collate< _CharT> ::do_transform(const _CharT *__lo, const _CharT *__hi) const 
# 201
{ 
# 202
string_type __ret; 
# 205
const string_type __str(__lo, __hi); 
# 207
const _CharT *__p = (__str.c_str()); 
# 208
const _CharT *__pend = (__str.data()) + (__str.length()); 
# 210
size_t __len = (__hi - __lo) * 2; 
# 212
_CharT *__c = new _CharT [__len]; 
# 214
try 
# 215
{ 
# 219
for (; ;) 
# 220
{ 
# 222
size_t __res = _M_transform(__c, __p, __len); 
# 225
if (__res >= __len) 
# 226
{ 
# 227
__len = (__res + (1)); 
# 228
(delete [] __c), (__c = 0); 
# 229
__c = (new _CharT [__len]); 
# 230
__res = _M_transform(__c, __p, __len); 
# 231
}  
# 233
(__ret.append(__c, __res)); 
# 234
__p += char_traits< _CharT> ::length(__p); 
# 235
if (__p == __pend) { 
# 236
break; }  
# 238
__p++; 
# 239
(__ret.push_back(_CharT())); 
# 240
}  
# 241
} 
# 242
catch (...) 
# 243
{ 
# 244
delete [] __c; 
# 245
throw; 
# 246
}  
# 248
delete [] __c; 
# 250
return __ret; 
# 251
} 
# 253
template< class _CharT> long 
# 256
collate< _CharT> ::do_hash(const _CharT *__lo, const _CharT *__hi) const 
# 257
{ 
# 258
unsigned long __val = (0); 
# 259
for (; __lo < __hi; ++__lo) { 
# 260
__val = ((*__lo) + ((__val << 7) | (__val >> (__gnu_cxx::__numeric_traits_integer< unsigned long> ::__digits - 7)))); }  
# 264
return static_cast< long>(__val); 
# 265
} 
# 270
extern template class collate< char> ;
# 271
extern template class collate_byname< char> ;
# 273
extern template const collate< char>  &use_facet< collate< char> > (const locale &);
# 277
extern template bool has_facet< collate< char> > (const locale &) throw();
# 282 "/usr/include/c++/4.8.2/bits/locale_classes.tcc" 3
extern template class collate< wchar_t> ;
# 283
extern template class collate_byname< wchar_t> ;
# 285
extern template const collate< wchar_t>  &use_facet< collate< wchar_t> > (const locale &);
# 289
extern template bool has_facet< collate< wchar_t> > (const locale &) throw();
# 296 "/usr/include/c++/4.8.2/bits/locale_classes.tcc" 3
}
# 43 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 51
enum _Ios_Fmtflags { 
# 53
_S_boolalpha = 1, 
# 54
_S_dec, 
# 55
_S_fixed = 4, 
# 56
_S_hex = 8, 
# 57
_S_internal = 16, 
# 58
_S_left = 32, 
# 59
_S_oct = 64, 
# 60
_S_right = 128, 
# 61
_S_scientific = 256, 
# 62
_S_showbase = 512, 
# 63
_S_showpoint = 1024, 
# 64
_S_showpos = 2048, 
# 65
_S_skipws = 4096, 
# 66
_S_unitbuf = 8192, 
# 67
_S_uppercase = 16384, 
# 68
_S_adjustfield = 176, 
# 69
_S_basefield = 74, 
# 70
_S_floatfield = 260, 
# 71
_S_ios_fmtflags_end = 65536
# 72
}; 
# 75
inline _Ios_Fmtflags operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 76
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 79
inline _Ios_Fmtflags operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 80
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 83
inline _Ios_Fmtflags operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 84
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 87
inline _Ios_Fmtflags operator~(_Ios_Fmtflags __a) 
# 88
{ return (_Ios_Fmtflags)(~(static_cast< int>(__a))); } 
# 91
inline const _Ios_Fmtflags &operator|=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 92
{ return __a = ((__a | __b)); } 
# 95
inline const _Ios_Fmtflags &operator&=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 96
{ return __a = ((__a & __b)); } 
# 99
inline const _Ios_Fmtflags &operator^=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 100
{ return __a = ((__a ^ __b)); } 
# 103
enum _Ios_Openmode { 
# 105
_S_app = 1, 
# 106
_S_ate, 
# 107
_S_bin = 4, 
# 108
_S_in = 8, 
# 109
_S_out = 16, 
# 110
_S_trunc = 32, 
# 111
_S_ios_openmode_end = 65536
# 112
}; 
# 115
inline _Ios_Openmode operator&(_Ios_Openmode __a, _Ios_Openmode __b) 
# 116
{ return (_Ios_Openmode)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 119
inline _Ios_Openmode operator|(_Ios_Openmode __a, _Ios_Openmode __b) 
# 120
{ return (_Ios_Openmode)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 123
inline _Ios_Openmode operator^(_Ios_Openmode __a, _Ios_Openmode __b) 
# 124
{ return (_Ios_Openmode)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 127
inline _Ios_Openmode operator~(_Ios_Openmode __a) 
# 128
{ return (_Ios_Openmode)(~(static_cast< int>(__a))); } 
# 131
inline const _Ios_Openmode &operator|=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 132
{ return __a = ((__a | __b)); } 
# 135
inline const _Ios_Openmode &operator&=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 136
{ return __a = ((__a & __b)); } 
# 139
inline const _Ios_Openmode &operator^=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 140
{ return __a = ((__a ^ __b)); } 
# 143
enum _Ios_Iostate { 
# 145
_S_goodbit, 
# 146
_S_badbit, 
# 147
_S_eofbit, 
# 148
_S_failbit = 4, 
# 149
_S_ios_iostate_end = 65536
# 150
}; 
# 153
inline _Ios_Iostate operator&(_Ios_Iostate __a, _Ios_Iostate __b) 
# 154
{ return (_Ios_Iostate)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 157
inline _Ios_Iostate operator|(_Ios_Iostate __a, _Ios_Iostate __b) 
# 158
{ return (_Ios_Iostate)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 161
inline _Ios_Iostate operator^(_Ios_Iostate __a, _Ios_Iostate __b) 
# 162
{ return (_Ios_Iostate)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 165
inline _Ios_Iostate operator~(_Ios_Iostate __a) 
# 166
{ return (_Ios_Iostate)(~(static_cast< int>(__a))); } 
# 169
inline const _Ios_Iostate &operator|=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 170
{ return __a = ((__a | __b)); } 
# 173
inline const _Ios_Iostate &operator&=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 174
{ return __a = ((__a & __b)); } 
# 177
inline const _Ios_Iostate &operator^=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 178
{ return __a = ((__a ^ __b)); } 
# 181
enum _Ios_Seekdir { 
# 183
_S_beg, 
# 184
_S_cur, 
# 185
_S_end, 
# 186
_S_ios_seekdir_end = 65536
# 187
}; 
# 199 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
class ios_base { 
# 209
public: class failure : public exception { 
# 215
public: explicit failure(const string & __str) throw(); 
# 220
virtual ~failure() throw(); 
# 223
virtual const char *what() const throw(); 
# 226
private: string _M_msg; 
# 227
}; 
# 255 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
typedef _Ios_Fmtflags fmtflags; 
# 258
static const fmtflags boolalpha = _S_boolalpha; 
# 261
static const fmtflags dec = _S_dec; 
# 264
static const fmtflags fixed = _S_fixed; 
# 267
static const fmtflags hex = _S_hex; 
# 272
static const fmtflags internal = _S_internal; 
# 276
static const fmtflags left = _S_left; 
# 279
static const fmtflags oct = _S_oct; 
# 283
static const fmtflags right = _S_right; 
# 286
static const fmtflags scientific = _S_scientific; 
# 290
static const fmtflags showbase = _S_showbase; 
# 294
static const fmtflags showpoint = _S_showpoint; 
# 297
static const fmtflags showpos = _S_showpos; 
# 300
static const fmtflags skipws = _S_skipws; 
# 303
static const fmtflags unitbuf = _S_unitbuf; 
# 307
static const fmtflags uppercase = _S_uppercase; 
# 310
static const fmtflags adjustfield = _S_adjustfield; 
# 313
static const fmtflags basefield = _S_basefield; 
# 316
static const fmtflags floatfield = _S_floatfield; 
# 330 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
typedef _Ios_Iostate iostate; 
# 334
static const iostate badbit = _S_badbit; 
# 337
static const iostate eofbit = _S_eofbit; 
# 342
static const iostate failbit = _S_failbit; 
# 345
static const iostate goodbit = _S_goodbit; 
# 361 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
typedef _Ios_Openmode openmode; 
# 364
static const openmode app = _S_app; 
# 367
static const openmode ate = _S_ate; 
# 372
static const openmode binary = _S_bin; 
# 375
static const openmode in = _S_in; 
# 378
static const openmode out = _S_out; 
# 381
static const openmode trunc = _S_trunc; 
# 393 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
typedef _Ios_Seekdir seekdir; 
# 396
static const seekdir beg = _S_beg; 
# 399
static const seekdir cur = _S_cur; 
# 402
static const seekdir end = _S_end; 
# 405
typedef int io_state; 
# 406
typedef int open_mode; 
# 407
typedef int seek_dir; 
# 409
typedef std::streampos streampos; 
# 410
typedef std::streamoff streamoff; 
# 419 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
enum event { 
# 421
erase_event, 
# 422
imbue_event, 
# 423
copyfmt_event
# 424
}; 
# 436 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
typedef void (*event_callback)(event __e, ios_base & __b, int __i); 
# 449 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
void register_callback(event_callback __fn, int __index); 
# 452
protected: streamsize _M_precision; 
# 453
streamsize _M_width; 
# 454
fmtflags _M_flags; 
# 455
iostate _M_exception; 
# 456
iostate _M_streambuf_state; 
# 460
struct _Callback_list { 
# 463
_Callback_list *_M_next; 
# 464
event_callback _M_fn; 
# 465
int _M_index; 
# 466
_Atomic_word _M_refcount; 
# 468
_Callback_list(event_callback __fn, int __index, _Callback_list *
# 469
__cb) : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) 
# 470
{ } 
# 473
void _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 477
int _M_remove_reference() 
# 478
{ 
# 480
; 
# 481
int __res = __gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1); 
# 482
if (__res == 0) 
# 483
{ 
# 484
; 
# 485
}  
# 486
return __res; 
# 487
} 
# 488
}; 
# 490
_Callback_list *_M_callbacks; 
# 493
void _M_call_callbacks(event __ev) throw(); 
# 496
void _M_dispose_callbacks() throw(); 
# 499
struct _Words { 
# 501
void *_M_pword; 
# 502
long _M_iword; 
# 503
_Words() : _M_pword((0)), _M_iword((0)) { } 
# 504
}; 
# 507
_Words _M_word_zero; 
# 511
enum { _S_local_word_size = 8}; 
# 512
_Words _M_local_word[_S_local_word_size]; 
# 515
int _M_word_size; 
# 516
_Words *_M_word; 
# 519
_Words &_M_grow_words(int __index, bool __iword); 
# 522
locale _M_ios_locale; 
# 525
void _M_init() throw(); 
# 533
public: class Init { 
# 535
friend class ios_base; 
# 537
public: Init(); 
# 538
~Init(); 
# 541
private: static _Atomic_word _S_refcount; 
# 542
static bool _S_synced_with_stdio; 
# 543
}; 
# 551
fmtflags flags() const 
# 552
{ return _M_flags; } 
# 562 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
fmtflags flags(fmtflags __fmtfl) 
# 563
{ 
# 564
fmtflags __old = _M_flags; 
# 565
(_M_flags) = __fmtfl; 
# 566
return __old; 
# 567
} 
# 578 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl) 
# 579
{ 
# 580
fmtflags __old = _M_flags; 
# 581
((_M_flags) |= __fmtfl); 
# 582
return __old; 
# 583
} 
# 595 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl, fmtflags __mask) 
# 596
{ 
# 597
fmtflags __old = _M_flags; 
# 598
((_M_flags) &= ((~__mask))); 
# 599
((_M_flags) |= ((__fmtfl & __mask))); 
# 600
return __old; 
# 601
} 
# 610
void unsetf(fmtflags __mask) 
# 611
{ ((_M_flags) &= ((~__mask))); } 
# 621 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
streamsize precision() const 
# 622
{ return _M_precision; } 
# 630
streamsize precision(streamsize __prec) 
# 631
{ 
# 632
streamsize __old = _M_precision; 
# 633
(_M_precision) = __prec; 
# 634
return __old; 
# 635
} 
# 644
streamsize width() const 
# 645
{ return _M_width; } 
# 653
streamsize width(streamsize __wide) 
# 654
{ 
# 655
streamsize __old = _M_width; 
# 656
(_M_width) = __wide; 
# 657
return __old; 
# 658
} 
# 672 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
static bool sync_with_stdio(bool __sync = true); 
# 684 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
locale imbue(const locale & __loc) throw(); 
# 695 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
locale getloc() const 
# 696
{ return _M_ios_locale; } 
# 706 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
const locale &_M_getloc() const 
# 707
{ return _M_ios_locale; } 
# 725 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
static int xalloc() throw(); 
# 741 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
long &iword(int __ix) 
# 742
{ 
# 743
_Words &__word = (__ix < (_M_word_size)) ? (_M_word)[__ix] : this->_M_grow_words(__ix, true); 
# 745
return __word._M_iword; 
# 746
} 
# 762 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
void *&pword(int __ix) 
# 763
{ 
# 764
_Words &__word = (__ix < (_M_word_size)) ? (_M_word)[__ix] : this->_M_grow_words(__ix, false); 
# 766
return __word._M_pword; 
# 767
} 
# 778 "/usr/include/c++/4.8.2/bits/ios_base.h" 3
virtual ~ios_base(); 
# 781
protected: ios_base() throw(); 
# 786
private: ios_base(const ios_base &); 
# 789
ios_base &operator=(const ios_base &); 
# 790
}; 
# 795
inline ios_base &boolalpha(ios_base &__base) 
# 796
{ 
# 797
__base.setf(ios_base::boolalpha); 
# 798
return __base; 
# 799
} 
# 803
inline ios_base &noboolalpha(ios_base &__base) 
# 804
{ 
# 805
__base.unsetf(ios_base::boolalpha); 
# 806
return __base; 
# 807
} 
# 811
inline ios_base &showbase(ios_base &__base) 
# 812
{ 
# 813
__base.setf(ios_base::showbase); 
# 814
return __base; 
# 815
} 
# 819
inline ios_base &noshowbase(ios_base &__base) 
# 820
{ 
# 821
__base.unsetf(ios_base::showbase); 
# 822
return __base; 
# 823
} 
# 827
inline ios_base &showpoint(ios_base &__base) 
# 828
{ 
# 829
__base.setf(ios_base::showpoint); 
# 830
return __base; 
# 831
} 
# 835
inline ios_base &noshowpoint(ios_base &__base) 
# 836
{ 
# 837
__base.unsetf(ios_base::showpoint); 
# 838
return __base; 
# 839
} 
# 843
inline ios_base &showpos(ios_base &__base) 
# 844
{ 
# 845
__base.setf(ios_base::showpos); 
# 846
return __base; 
# 847
} 
# 851
inline ios_base &noshowpos(ios_base &__base) 
# 852
{ 
# 853
__base.unsetf(ios_base::showpos); 
# 854
return __base; 
# 855
} 
# 859
inline ios_base &skipws(ios_base &__base) 
# 860
{ 
# 861
__base.setf(ios_base::skipws); 
# 862
return __base; 
# 863
} 
# 867
inline ios_base &noskipws(ios_base &__base) 
# 868
{ 
# 869
__base.unsetf(ios_base::skipws); 
# 870
return __base; 
# 871
} 
# 875
inline ios_base &uppercase(ios_base &__base) 
# 876
{ 
# 877
__base.setf(ios_base::uppercase); 
# 878
return __base; 
# 879
} 
# 883
inline ios_base &nouppercase(ios_base &__base) 
# 884
{ 
# 885
__base.unsetf(ios_base::uppercase); 
# 886
return __base; 
# 887
} 
# 891
inline ios_base &unitbuf(ios_base &__base) 
# 892
{ 
# 893
__base.setf(ios_base::unitbuf); 
# 894
return __base; 
# 895
} 
# 899
inline ios_base &nounitbuf(ios_base &__base) 
# 900
{ 
# 901
__base.unsetf(ios_base::unitbuf); 
# 902
return __base; 
# 903
} 
# 908
inline ios_base &internal(ios_base &__base) 
# 909
{ 
# 910
__base.setf(ios_base::internal, ios_base::adjustfield); 
# 911
return __base; 
# 912
} 
# 916
inline ios_base &left(ios_base &__base) 
# 917
{ 
# 918
__base.setf(ios_base::left, ios_base::adjustfield); 
# 919
return __base; 
# 920
} 
# 924
inline ios_base &right(ios_base &__base) 
# 925
{ 
# 926
__base.setf(ios_base::right, ios_base::adjustfield); 
# 927
return __base; 
# 928
} 
# 933
inline ios_base &dec(ios_base &__base) 
# 934
{ 
# 935
__base.setf(ios_base::dec, ios_base::basefield); 
# 936
return __base; 
# 937
} 
# 941
inline ios_base &hex(ios_base &__base) 
# 942
{ 
# 943
__base.setf(ios_base::hex, ios_base::basefield); 
# 944
return __base; 
# 945
} 
# 949
inline ios_base &oct(ios_base &__base) 
# 950
{ 
# 951
__base.setf(ios_base::oct, ios_base::basefield); 
# 952
return __base; 
# 953
} 
# 958
inline ios_base &fixed(ios_base &__base) 
# 959
{ 
# 960
__base.setf(ios_base::fixed, ios_base::floatfield); 
# 961
return __base; 
# 962
} 
# 966
inline ios_base &scientific(ios_base &__base) 
# 967
{ 
# 968
__base.setf(ios_base::scientific, ios_base::floatfield); 
# 969
return __base; 
# 970
} 
# 973
}
# 45 "/usr/include/c++/4.8.2/streambuf" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
template< class _CharT, class _Traits> streamsize __copy_streambufs_eof(basic_streambuf< _CharT, _Traits>  *, basic_streambuf< _CharT, _Traits>  *, bool &); 
# 119 "/usr/include/c++/4.8.2/streambuf" 3
template< class _CharT, class _Traits> 
# 120
class basic_streambuf { 
# 129
public: typedef _CharT char_type; 
# 130
typedef _Traits traits_type; 
# 131
typedef typename _Traits::int_type int_type; 
# 132
typedef typename _Traits::pos_type pos_type; 
# 133
typedef typename _Traits::off_type off_type; 
# 138
typedef basic_streambuf __streambuf_type; 
# 141
friend class basic_ios< _CharT, _Traits> ; 
# 142
friend class basic_istream< _CharT, _Traits> ; 
# 143
friend class basic_ostream< _CharT, _Traits> ; 
# 144
friend class istreambuf_iterator< _CharT, _Traits> ; 
# 145
friend class ostreambuf_iterator< _CharT, _Traits> ; 
# 148
friend streamsize __copy_streambufs_eof<> (basic_streambuf *, basic_streambuf *, bool &); 
# 150
template< bool _IsMove, class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_move_a2(istreambuf_iterator< _CharT2, char_traits< _CharT2> > , istreambuf_iterator< _CharT2, char_traits< _CharT2> > , _CharT2 *); 
# 156
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, istreambuf_iterator< _CharT2, char_traits< _CharT2> > > ::__type find(istreambuf_iterator< _CharT2, char_traits< _CharT2> > , istreambuf_iterator< _CharT2, char_traits< _CharT2> > , const _CharT2 &); 
# 162
template< class _CharT2, class _Traits2> friend basic_istream< _CharT2, _Traits2>  &operator>>(basic_istream< _CharT2, _Traits2>  &, _CharT2 *); 
# 166
template< class _CharT2, class _Traits2, class _Alloc> friend basic_istream< _CharT2, _Traits2>  &operator>>(basic_istream< _CharT2, _Traits2>  &, basic_string< _CharT2, _Traits2, _Alloc>  &); 
# 171
template< class _CharT2, class _Traits2, class _Alloc> friend basic_istream< _CharT2, _Traits2>  &getline(basic_istream< _CharT2, _Traits2>  &, basic_string< _CharT2, _Traits2, _Alloc>  &, _CharT2); 
# 184
protected: char_type *_M_in_beg; 
# 185
char_type *_M_in_cur; 
# 186
char_type *_M_in_end; 
# 187
char_type *_M_out_beg; 
# 188
char_type *_M_out_cur; 
# 189
char_type *_M_out_end; 
# 192
locale _M_buf_locale; 
# 197
public: virtual ~basic_streambuf() 
# 198
{ } 
# 209 "/usr/include/c++/4.8.2/streambuf" 3
locale pubimbue(const locale &__loc) 
# 210
{ 
# 211
locale __tmp(this->getloc()); 
# 212
this->imbue(__loc); 
# 213
((_M_buf_locale) = __loc); 
# 214
return __tmp; 
# 215
} 
# 226 "/usr/include/c++/4.8.2/streambuf" 3
locale getloc() const 
# 227
{ return _M_buf_locale; } 
# 239 "/usr/include/c++/4.8.2/streambuf" 3
basic_streambuf *pubsetbuf(char_type *__s, streamsize __n) 
# 240
{ return this->setbuf(__s, __n); } 
# 251 "/usr/include/c++/4.8.2/streambuf" 3
pos_type pubseekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode 
# 252
__mode = (ios_base::in | ios_base::out)) 
# 253
{ return this->seekoff(__off, __way, __mode); } 
# 263 "/usr/include/c++/4.8.2/streambuf" 3
pos_type pubseekpos(pos_type __sp, ios_base::openmode 
# 264
__mode = (ios_base::in | ios_base::out)) 
# 265
{ return this->seekpos(__sp, __mode); } 
# 271
int pubsync() { return this->sync(); } 
# 284 "/usr/include/c++/4.8.2/streambuf" 3
streamsize in_avail() 
# 285
{ 
# 286
const streamsize __ret = this->egptr() - this->gptr(); 
# 287
return (__ret) ? __ret : this->showmanyc(); 
# 288
} 
# 298 "/usr/include/c++/4.8.2/streambuf" 3
int_type snextc() 
# 299
{ 
# 300
int_type __ret = traits_type::eof(); 
# 301
if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(), __ret), true)) { 
# 303
__ret = this->sgetc(); }  
# 304
return __ret; 
# 305
} 
# 316 "/usr/include/c++/4.8.2/streambuf" 3
int_type sbumpc() 
# 317
{ 
# 318
int_type __ret; 
# 319
if (__builtin_expect(this->gptr() < this->egptr(), true)) 
# 320
{ 
# 321
__ret = traits_type::to_int_type(*this->gptr()); 
# 322
this->gbump(1); 
# 323
} else { 
# 325
__ret = this->uflow(); }  
# 326
return __ret; 
# 327
} 
# 338 "/usr/include/c++/4.8.2/streambuf" 3
int_type sgetc() 
# 339
{ 
# 340
int_type __ret; 
# 341
if (__builtin_expect(this->gptr() < this->egptr(), true)) { 
# 342
__ret = traits_type::to_int_type(*this->gptr()); } else { 
# 344
__ret = this->underflow(); }  
# 345
return __ret; 
# 346
} 
# 357 "/usr/include/c++/4.8.2/streambuf" 3
streamsize sgetn(char_type *__s, streamsize __n) 
# 358
{ return this->xsgetn(__s, __n); } 
# 372 "/usr/include/c++/4.8.2/streambuf" 3
int_type sputbackc(char_type __c) 
# 373
{ 
# 374
int_type __ret; 
# 375
const bool __testpos = this->eback() < this->gptr(); 
# 376
if (__builtin_expect((!__testpos) || (!traits_type::eq(__c, this->gptr()[-1])), false)) { 
# 378
__ret = this->pbackfail(traits_type::to_int_type(__c)); } else 
# 380
{ 
# 381
this->gbump(-1); 
# 382
__ret = traits_type::to_int_type(*this->gptr()); 
# 383
}  
# 384
return __ret; 
# 385
} 
# 397 "/usr/include/c++/4.8.2/streambuf" 3
int_type sungetc() 
# 398
{ 
# 399
int_type __ret; 
# 400
if (__builtin_expect(this->eback() < this->gptr(), true)) 
# 401
{ 
# 402
this->gbump(-1); 
# 403
__ret = traits_type::to_int_type(*this->gptr()); 
# 404
} else { 
# 406
__ret = this->pbackfail(); }  
# 407
return __ret; 
# 408
} 
# 424 "/usr/include/c++/4.8.2/streambuf" 3
int_type sputc(char_type __c) 
# 425
{ 
# 426
int_type __ret; 
# 427
if (__builtin_expect(this->pptr() < this->epptr(), true)) 
# 428
{ 
# 429
(*this->pptr()) = __c; 
# 430
this->pbump(1); 
# 431
__ret = traits_type::to_int_type(__c); 
# 432
} else { 
# 434
__ret = this->overflow(traits_type::to_int_type(__c)); }  
# 435
return __ret; 
# 436
} 
# 450 "/usr/include/c++/4.8.2/streambuf" 3
streamsize sputn(const char_type *__s, streamsize __n) 
# 451
{ return this->xsputn(__s, __n); } 
# 463 "/usr/include/c++/4.8.2/streambuf" 3
protected: basic_streambuf() : _M_in_beg((0)), _M_in_cur((0)), _M_in_end((0)), _M_out_beg((0)), _M_out_cur((0)), _M_out_end((0)), _M_buf_locale(locale()) 
# 467
{ } 
# 482 "/usr/include/c++/4.8.2/streambuf" 3
char_type *eback() const { return _M_in_beg; } 
# 485
char_type *gptr() const { return _M_in_cur; } 
# 488
char_type *egptr() const { return _M_in_end; } 
# 498 "/usr/include/c++/4.8.2/streambuf" 3
void gbump(int __n) { (_M_in_cur) += __n; } 
# 509 "/usr/include/c++/4.8.2/streambuf" 3
void setg(char_type *__gbeg, char_type *__gnext, char_type *__gend) 
# 510
{ 
# 511
(_M_in_beg) = __gbeg; 
# 512
(_M_in_cur) = __gnext; 
# 513
(_M_in_end) = __gend; 
# 514
} 
# 529 "/usr/include/c++/4.8.2/streambuf" 3
char_type *pbase() const { return _M_out_beg; } 
# 532
char_type *pptr() const { return _M_out_cur; } 
# 535
char_type *epptr() const { return _M_out_end; } 
# 545 "/usr/include/c++/4.8.2/streambuf" 3
void pbump(int __n) { (_M_out_cur) += __n; } 
# 555 "/usr/include/c++/4.8.2/streambuf" 3
void setp(char_type *__pbeg, char_type *__pend) 
# 556
{ 
# 557
(_M_out_beg) = ((_M_out_cur) = __pbeg); 
# 558
(_M_out_end) = __pend; 
# 559
} 
# 576 "/usr/include/c++/4.8.2/streambuf" 3
virtual void imbue(const locale &__loc) 
# 577
{ } 
# 591 "/usr/include/c++/4.8.2/streambuf" 3
virtual basic_streambuf *setbuf(char_type *, streamsize) 
# 592
{ return this; } 
# 602 "/usr/include/c++/4.8.2/streambuf" 3
virtual pos_type seekoff(off_type, ios_base::seekdir, ios_base::openmode = (ios_base::in | ios_base::out)) 
# 604
{ return (pos_type)((off_type)(-1)); } 
# 614 "/usr/include/c++/4.8.2/streambuf" 3
virtual pos_type seekpos(pos_type, ios_base::openmode = (ios_base::in | ios_base::out)) 
# 616
{ return (pos_type)((off_type)(-1)); } 
# 627 "/usr/include/c++/4.8.2/streambuf" 3
virtual int sync() { return 0; } 
# 649 "/usr/include/c++/4.8.2/streambuf" 3
virtual streamsize showmanyc() { return 0; } 
# 665 "/usr/include/c++/4.8.2/streambuf" 3
virtual streamsize xsgetn(char_type * __s, streamsize __n); 
# 687 "/usr/include/c++/4.8.2/streambuf" 3
virtual int_type underflow() 
# 688
{ return traits_type::eof(); } 
# 700 "/usr/include/c++/4.8.2/streambuf" 3
virtual int_type uflow() 
# 701
{ 
# 702
int_type __ret = traits_type::eof(); 
# 703
const bool __testeof = traits_type::eq_int_type(this->underflow(), __ret); 
# 705
if (!__testeof) 
# 706
{ 
# 707
__ret = traits_type::to_int_type(*this->gptr()); 
# 708
this->gbump(1); 
# 709
}  
# 710
return __ret; 
# 711
} 
# 724 "/usr/include/c++/4.8.2/streambuf" 3
virtual int_type pbackfail(int_type __c = traits_type::eof()) 
# 725
{ return traits_type::eof(); } 
# 742 "/usr/include/c++/4.8.2/streambuf" 3
virtual streamsize xsputn(const char_type * __s, streamsize __n); 
# 768 "/usr/include/c++/4.8.2/streambuf" 3
virtual int_type overflow(int_type __c = traits_type::eof()) 
# 769
{ return traits_type::eof(); } 
# 783 "/usr/include/c++/4.8.2/streambuf" 3
public: void stossc() 
# 784
{ 
# 785
if (this->gptr() < this->egptr()) { 
# 786
this->gbump(1); } else { 
# 788
this->uflow(); }  
# 789
} 
# 794
void __safe_gbump(streamsize __n) { (_M_in_cur) += __n; } 
# 797
void __safe_pbump(streamsize __n) { (_M_out_cur) += __n; } 
# 802
private: basic_streambuf(const basic_streambuf &__sb) : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur), _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg), _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_end), _M_buf_locale(__sb._M_buf_locale) 
# 807
{ } 
# 810
basic_streambuf &operator=(const basic_streambuf &__sb) 
# 811
{ 
# 812
(_M_in_beg) = (__sb._M_in_beg); 
# 813
(_M_in_cur) = (__sb._M_in_cur); 
# 814
(_M_in_end) = (__sb._M_in_end); 
# 815
(_M_out_beg) = (__sb._M_out_beg); 
# 816
(_M_out_cur) = (__sb._M_out_cur); 
# 817
(_M_out_end) = (__sb._M_out_end); 
# 818
(_M_buf_locale) = (__sb._M_buf_locale); 
# 819
return *this; 
# 820
} 
# 821
}; 
# 826
template<> streamsize __copy_streambufs_eof(basic_streambuf< char, char_traits< char> >  * __sbin, basic_streambuf< char, char_traits< char> >  * __sbout, bool & __ineof); 
# 831
template<> streamsize __copy_streambufs_eof(basic_streambuf< wchar_t, char_traits< wchar_t> >  * __sbin, basic_streambuf< wchar_t, char_traits< wchar_t> >  * __sbout, bool & __ineof); 
# 836
}
# 39 "/usr/include/c++/4.8.2/bits/streambuf.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _CharT, class _Traits> streamsize 
# 46
basic_streambuf< _CharT, _Traits> ::xsgetn(char_type *__s, streamsize __n) 
# 47
{ 
# 48
streamsize __ret = (0); 
# 49
while (__ret < __n) 
# 50
{ 
# 51
const streamsize __buf_len = this->egptr() - this->gptr(); 
# 52
if (__buf_len) 
# 53
{ 
# 54
const streamsize __remaining = __n - __ret; 
# 55
const streamsize __len = std::min(__buf_len, __remaining); 
# 56
traits_type::copy(__s, this->gptr(), __len); 
# 57
__ret += __len; 
# 58
__s += __len; 
# 59
this->__safe_gbump(__len); 
# 60
}  
# 62
if (__ret < __n) 
# 63
{ 
# 64
const int_type __c = this->uflow(); 
# 65
if (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 66
{ 
# 67
traits_type::assign(*(__s++), traits_type::to_char_type(__c)); 
# 68
++__ret; 
# 69
} else { 
# 71
break; }  
# 72
}  
# 73
}  
# 74
return __ret; 
# 75
} 
# 77
template< class _CharT, class _Traits> streamsize 
# 80
basic_streambuf< _CharT, _Traits> ::xsputn(const char_type *__s, streamsize __n) 
# 81
{ 
# 82
streamsize __ret = (0); 
# 83
while (__ret < __n) 
# 84
{ 
# 85
const streamsize __buf_len = this->epptr() - this->pptr(); 
# 86
if (__buf_len) 
# 87
{ 
# 88
const streamsize __remaining = __n - __ret; 
# 89
const streamsize __len = std::min(__buf_len, __remaining); 
# 90
traits_type::copy(this->pptr(), __s, __len); 
# 91
__ret += __len; 
# 92
__s += __len; 
# 93
this->__safe_pbump(__len); 
# 94
}  
# 96
if (__ret < __n) 
# 97
{ 
# 98
int_type __c = this->overflow(traits_type::to_int_type(*__s)); 
# 99
if (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 100
{ 
# 101
++__ret; 
# 102
++__s; 
# 103
} else { 
# 105
break; }  
# 106
}  
# 107
}  
# 108
return __ret; 
# 109
} 
# 114
template< class _CharT, class _Traits> streamsize 
# 116
__copy_streambufs_eof(basic_streambuf< _CharT, _Traits>  *__sbin, basic_streambuf< _CharT, _Traits>  *
# 117
__sbout, bool &
# 118
__ineof) 
# 119
{ 
# 120
streamsize __ret = (0); 
# 121
__ineof = true; 
# 122
typename _Traits::int_type __c = (__sbin->sgetc()); 
# 123
while (!_Traits::eq_int_type(__c, _Traits::eof())) 
# 124
{ 
# 125
__c = (__sbout->sputc(_Traits::to_char_type(__c))); 
# 126
if (_Traits::eq_int_type(__c, _Traits::eof())) 
# 127
{ 
# 128
__ineof = false; 
# 129
break; 
# 130
}  
# 131
++__ret; 
# 132
__c = (__sbin->snextc()); 
# 133
}  
# 134
return __ret; 
# 135
} 
# 137
template< class _CharT, class _Traits> inline streamsize 
# 139
__copy_streambufs(basic_streambuf< _CharT, _Traits>  *__sbin, basic_streambuf< _CharT, _Traits>  *
# 140
__sbout) 
# 141
{ 
# 142
bool __ineof; 
# 143
return __copy_streambufs_eof(__sbin, __sbout, __ineof); 
# 144
} 
# 149
extern template class basic_streambuf< char, char_traits< char> > ;
# 150
extern template streamsize __copy_streambufs(basic_streambuf< char, char_traits< char> >  * __sbin, basic_streambuf< char, char_traits< char> >  * __sbout);
# 154
extern template streamsize __copy_streambufs_eof< char, char_traits< char> > (basic_streambuf< char, char_traits< char> >  *, basic_streambuf< char, char_traits< char> >  *, bool &);
# 160
extern template class basic_streambuf< wchar_t, char_traits< wchar_t> > ;
# 161
extern template streamsize __copy_streambufs(basic_streambuf< wchar_t, char_traits< wchar_t> >  * __sbin, basic_streambuf< wchar_t, char_traits< wchar_t> >  * __sbout);
# 165
extern template streamsize __copy_streambufs_eof< wchar_t, char_traits< wchar_t> > (basic_streambuf< wchar_t, char_traits< wchar_t> >  *, basic_streambuf< wchar_t, char_traits< wchar_t> >  *, bool &);
# 173
}
# 52 "/usr/include/wctype.h" 3
typedef unsigned long wctype_t; 
# 72 "/usr/include/wctype.h" 3
enum { 
# 73
__ISwupper, 
# 74
__ISwlower, 
# 75
__ISwalpha, 
# 76
__ISwdigit, 
# 77
__ISwxdigit, 
# 78
__ISwspace, 
# 79
__ISwprint, 
# 80
__ISwgraph, 
# 81
__ISwblank, 
# 82
__ISwcntrl, 
# 83
__ISwpunct, 
# 84
__ISwalnum, 
# 86
_ISwupper = 16777216, 
# 87
_ISwlower = 33554432, 
# 88
_ISwalpha = 67108864, 
# 89
_ISwdigit = 134217728, 
# 90
_ISwxdigit = 268435456, 
# 91
_ISwspace = 536870912, 
# 92
_ISwprint = 1073741824, 
# 93
_ISwgraph = (-2147483647-1), 
# 94
_ISwblank = 65536, 
# 95
_ISwcntrl = 131072, 
# 96
_ISwpunct = 262144, 
# 97
_ISwalnum = 524288
# 98
}; 
# 102
extern "C" {
# 111
extern int iswalnum(wint_t __wc) throw(); 
# 117
extern int iswalpha(wint_t __wc) throw(); 
# 120
extern int iswcntrl(wint_t __wc) throw(); 
# 124
extern int iswdigit(wint_t __wc) throw(); 
# 128
extern int iswgraph(wint_t __wc) throw(); 
# 133
extern int iswlower(wint_t __wc) throw(); 
# 136
extern int iswprint(wint_t __wc) throw(); 
# 141
extern int iswpunct(wint_t __wc) throw(); 
# 146
extern int iswspace(wint_t __wc) throw(); 
# 151
extern int iswupper(wint_t __wc) throw(); 
# 156
extern int iswxdigit(wint_t __wc) throw(); 
# 162
extern int iswblank(wint_t __wc) throw(); 
# 171 "/usr/include/wctype.h" 3
extern wctype_t wctype(const char * __property) throw(); 
# 175
extern int iswctype(wint_t __wc, wctype_t __desc) throw(); 
# 186
typedef const __int32_t *wctrans_t; 
# 194
extern wint_t towlower(wint_t __wc) throw(); 
# 197
extern wint_t towupper(wint_t __wc) throw(); 
# 200
}
# 213 "/usr/include/wctype.h" 3
extern "C" {
# 218
extern wctrans_t wctrans(const char * __property) throw(); 
# 221
extern wint_t towctrans(wint_t __wc, wctrans_t __desc) throw(); 
# 230
extern int iswalnum_l(wint_t __wc, __locale_t __locale) throw(); 
# 236
extern int iswalpha_l(wint_t __wc, __locale_t __locale) throw(); 
# 239
extern int iswcntrl_l(wint_t __wc, __locale_t __locale) throw(); 
# 243
extern int iswdigit_l(wint_t __wc, __locale_t __locale) throw(); 
# 247
extern int iswgraph_l(wint_t __wc, __locale_t __locale) throw(); 
# 252
extern int iswlower_l(wint_t __wc, __locale_t __locale) throw(); 
# 255
extern int iswprint_l(wint_t __wc, __locale_t __locale) throw(); 
# 260
extern int iswpunct_l(wint_t __wc, __locale_t __locale) throw(); 
# 265
extern int iswspace_l(wint_t __wc, __locale_t __locale) throw(); 
# 270
extern int iswupper_l(wint_t __wc, __locale_t __locale) throw(); 
# 275
extern int iswxdigit_l(wint_t __wc, __locale_t __locale) throw(); 
# 280
extern int iswblank_l(wint_t __wc, __locale_t __locale) throw(); 
# 284
extern wctype_t wctype_l(const char * __property, __locale_t __locale) throw(); 
# 289
extern int iswctype_l(wint_t __wc, wctype_t __desc, __locale_t __locale) throw(); 
# 298
extern wint_t towlower_l(wint_t __wc, __locale_t __locale) throw(); 
# 301
extern wint_t towupper_l(wint_t __wc, __locale_t __locale) throw(); 
# 305
extern wctrans_t wctrans_l(const char * __property, __locale_t __locale) throw(); 
# 309
extern wint_t towctrans_l(wint_t __wc, wctrans_t __desc, __locale_t __locale) throw(); 
# 314
}
# 80 "/usr/include/c++/4.8.2/cwctype" 3
namespace std { 
# 82
using ::wctrans_t;
# 83
using ::wctype_t;
# 86
using ::iswalnum;
# 87
using ::iswalpha;
# 89
using ::iswblank;
# 91
using ::iswcntrl;
# 92
using ::iswctype;
# 93
using ::iswdigit;
# 94
using ::iswgraph;
# 95
using ::iswlower;
# 96
using ::iswprint;
# 97
using ::iswpunct;
# 98
using ::iswspace;
# 99
using ::iswupper;
# 100
using ::iswxdigit;
# 101
using ::towctrans;
# 102
using ::towlower;
# 103
using ::towupper;
# 104
using ::wctrans;
# 105
using ::wctype;
# 106
}
# 36 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/ctype_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
struct ctype_base { 
# 44
typedef const int *__to_type; 
# 48
typedef unsigned short mask; 
# 49
static const mask upper = (_ISupper); 
# 50
static const mask lower = (_ISlower); 
# 51
static const mask alpha = (_ISalpha); 
# 52
static const mask digit = (_ISdigit); 
# 53
static const mask xdigit = (_ISxdigit); 
# 54
static const mask space = (_ISspace); 
# 55
static const mask print = (_ISprint); 
# 56
static const mask graph = (((_ISalpha) | (_ISdigit)) | (_ISpunct)); 
# 57
static const mask cntrl = (_IScntrl); 
# 58
static const mask punct = (_ISpunct); 
# 59
static const mask alnum = ((_ISalpha) | (_ISdigit)); 
# 60
}; 
# 63
}
# 38 "/usr/include/c++/4.8.2/bits/streambuf_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49 "/usr/include/c++/4.8.2/bits/streambuf_iterator.h" 3
template< class _CharT, class _Traits> 
# 50
class istreambuf_iterator : public iterator< input_iterator_tag, _CharT, typename _Traits::off_type, _CharT *, _CharT &>  { 
# 64
public: typedef _CharT char_type; 
# 65
typedef _Traits traits_type; 
# 66
typedef typename _Traits::int_type int_type; 
# 67
typedef basic_streambuf< _CharT, _Traits>  streambuf_type; 
# 68
typedef basic_istream< _CharT, _Traits>  istream_type; 
# 71
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, ostreambuf_iterator< _CharT2, char_traits< _CharT2> > > ::__type copy(std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , ostreambuf_iterator< _CharT2, char_traits< _CharT2> > ); 
# 77
template< bool _IsMove, class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_move_a2(std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , _CharT2 *); 
# 83
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > > ::__type find(std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , const _CharT2 &); 
# 97
private: mutable streambuf_type *_M_sbuf; 
# 98
mutable int_type _M_c; 
# 102
public: istreambuf_iterator() throw() : _M_sbuf((0)), _M_c(traits_type::eof()) 
# 103
{ } 
# 112 "/usr/include/c++/4.8.2/bits/streambuf_iterator.h" 3
istreambuf_iterator(istream_type &__s) throw() : _M_sbuf((__s.rdbuf())), _M_c(traits_type::eof()) 
# 113
{ } 
# 116
istreambuf_iterator(streambuf_type *__s) throw() : _M_sbuf(__s), _M_c(traits_type::eof()) 
# 117
{ } 
# 123
char_type operator*() const 
# 124
{ 
# 132
return traits_type::to_char_type(_M_get()); 
# 133
} 
# 137
istreambuf_iterator &operator++() 
# 138
{ 
# 141
; 
# 142
if (_M_sbuf) 
# 143
{ 
# 144
((_M_sbuf)->sbumpc()); 
# 145
(_M_c) = traits_type::eof(); 
# 146
}  
# 147
return *this; 
# 148
} 
# 152
istreambuf_iterator operator++(int) 
# 153
{ 
# 156
; 
# 158
istreambuf_iterator __old = *this; 
# 159
if (_M_sbuf) 
# 160
{ 
# 161
(__old._M_c) = ((_M_sbuf)->sbumpc()); 
# 162
(_M_c) = traits_type::eof(); 
# 163
}  
# 164
return __old; 
# 165
} 
# 172 "/usr/include/c++/4.8.2/bits/streambuf_iterator.h" 3
bool equal(const istreambuf_iterator &__b) const 
# 173
{ return _M_at_eof() == __b._M_at_eof(); } 
# 177
private: int_type _M_get() const 
# 178
{ 
# 179
const int_type __eof = traits_type::eof(); 
# 180
int_type __ret = __eof; 
# 181
if (_M_sbuf) 
# 182
{ 
# 183
if (!traits_type::eq_int_type(_M_c, __eof)) { 
# 184
__ret = (_M_c); } else { 
# 185
if (!traits_type::eq_int_type(__ret = ((_M_sbuf)->sgetc()), __eof)) { 
# 187
(_M_c) = __ret; } else { 
# 189
(_M_sbuf) = 0; }  }  
# 190
}  
# 191
return __ret; 
# 192
} 
# 195 "/usr/include/c++/4.8.2/bits/streambuf_iterator.h" 3
bool _M_at_eof() const 
# 196
{ 
# 197
const int_type __eof = traits_type::eof(); 
# 198
return traits_type::eq_int_type(_M_get(), __eof); 
# 199
} 
# 200
}; 
# 202
template< class _CharT, class _Traits> inline bool 
# 204 "/usr/include/c++/4.8.2/bits/streambuf_iterator.h" 3
operator==(const istreambuf_iterator< _CharT, _Traits>  &__a, const istreambuf_iterator< _CharT, _Traits>  &
# 205
__b) 
# 206
{ return (__a.equal(__b)); } 
# 208
template< class _CharT, class _Traits> inline bool 
# 210 "/usr/include/c++/4.8.2/bits/streambuf_iterator.h" 3
operator!=(const istreambuf_iterator< _CharT, _Traits>  &__a, const istreambuf_iterator< _CharT, _Traits>  &
# 211
__b) 
# 212
{ return !(__a.equal(__b)); } 
# 215
template< class _CharT, class _Traits> 
# 216
class ostreambuf_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 223
public: typedef _CharT char_type; 
# 224
typedef _Traits traits_type; 
# 225
typedef basic_streambuf< _CharT, _Traits>  streambuf_type; 
# 226
typedef basic_ostream< _CharT, _Traits>  ostream_type; 
# 229
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, std::ostreambuf_iterator< _CharT2, char_traits< _CharT2> > > ::__type copy(istreambuf_iterator< _CharT2, char_traits< _CharT2> > , istreambuf_iterator< _CharT2, char_traits< _CharT2> > , std::ostreambuf_iterator< _CharT2, char_traits< _CharT2> > ); 
# 236
private: streambuf_type *_M_sbuf; 
# 237
bool _M_failed; 
# 241
public: ostreambuf_iterator(ostream_type &__s) throw() : _M_sbuf((__s.rdbuf())), _M_failed((!(_M_sbuf))) 
# 242
{ } 
# 245
ostreambuf_iterator(streambuf_type *__s) throw() : _M_sbuf(__s), _M_failed((!(_M_sbuf))) 
# 246
{ } 
# 250
ostreambuf_iterator &operator=(_CharT __c) 
# 251
{ 
# 252
if ((!(_M_failed)) && _Traits::eq_int_type(((_M_sbuf)->sputc(__c)), _Traits::eof())) { 
# 254
(_M_failed) = true; }  
# 255
return *this; 
# 256
} 
# 260
ostreambuf_iterator &operator*() 
# 261
{ return *this; } 
# 265
ostreambuf_iterator &operator++(int) 
# 266
{ return *this; } 
# 270
ostreambuf_iterator &operator++() 
# 271
{ return *this; } 
# 275 "/usr/include/c++/4.8.2/bits/streambuf_iterator.h" 3
bool failed() const throw() 
# 276
{ return _M_failed; } 
# 279
ostreambuf_iterator &_M_put(const _CharT *__ws, streamsize __len) 
# 280
{ 
# 281
if ((__builtin_expect(!(_M_failed), true)) && (__builtin_expect(((this->_M_sbuf)->sputn(__ws, __len)) != __len, false))) { 
# 284
(_M_failed) = true; }  
# 285
return *this; 
# 286
} 
# 287
}; 
# 290
template< class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type 
# 293
copy(istreambuf_iterator< _CharT, char_traits< _CharT> >  __first, istreambuf_iterator< _CharT, char_traits< _CharT> >  
# 294
__last, ostreambuf_iterator< _CharT, char_traits< _CharT> >  
# 295
__result) 
# 296
{ 
# 297
if ((__first._M_sbuf) && (!(__last._M_sbuf)) && (!(__result._M_failed))) 
# 298
{ 
# 299
bool __ineof; 
# 300
__copy_streambufs_eof((__first._M_sbuf), (__result._M_sbuf), __ineof); 
# 301
if (!__ineof) { 
# 302
(__result._M_failed) = true; }  
# 303
}  
# 304
return __result; 
# 305
} 
# 307
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type 
# 310
__copy_move_a2(_CharT *__first, _CharT *__last, ostreambuf_iterator< _CharT, char_traits< _CharT> >  
# 311
__result) 
# 312
{ 
# 313
const streamsize __num = __last - __first; 
# 314
if (__num > (0)) { 
# 315
(__result._M_put(__first, __num)); }  
# 316
return __result; 
# 317
} 
# 319
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type 
# 322
__copy_move_a2(const _CharT *__first, const _CharT *__last, ostreambuf_iterator< _CharT, char_traits< _CharT> >  
# 323
__result) 
# 324
{ 
# 325
const streamsize __num = __last - __first; 
# 326
if (__num > (0)) { 
# 327
(__result._M_put(__first, __num)); }  
# 328
return __result; 
# 329
} 
# 331
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type 
# 334
__copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> >  __first, istreambuf_iterator< _CharT, char_traits< _CharT> >  
# 335
__last, _CharT *__result) 
# 336
{ 
# 337
typedef istreambuf_iterator< _CharT, char_traits< _CharT> >  __is_iterator_type; 
# 338
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::traits_type traits_type; 
# 339
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::streambuf_type streambuf_type; 
# 340
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::traits_type::int_type int_type; 
# 342
if ((__first._M_sbuf) && (!(__last._M_sbuf))) 
# 343
{ 
# 344
streambuf_type *__sb = ((__first._M_sbuf)); 
# 345
int_type __c = (__sb->sgetc()); 
# 346
while (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 347
{ 
# 348
const streamsize __n = (__sb->egptr()) - (__sb->gptr()); 
# 349
if (__n > (1)) 
# 350
{ 
# 351
traits_type::copy(__result, (__sb->gptr()), __n); 
# 352
(__sb->__safe_gbump(__n)); 
# 353
__result += __n; 
# 354
__c = (__sb->underflow()); 
# 355
} else 
# 357
{ 
# 358
(*(__result++)) = traits_type::to_char_type(__c); 
# 359
__c = (__sb->snextc()); 
# 360
}  
# 361
}  
# 362
}  
# 363
return __result; 
# 364
} 
# 366
template< class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, istreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type 
# 369
find(istreambuf_iterator< _CharT, char_traits< _CharT> >  __first, istreambuf_iterator< _CharT, char_traits< _CharT> >  
# 370
__last, const _CharT &__val) 
# 371
{ 
# 372
typedef istreambuf_iterator< _CharT, char_traits< _CharT> >  __is_iterator_type; 
# 373
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::traits_type traits_type; 
# 374
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::streambuf_type streambuf_type; 
# 375
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::traits_type::int_type int_type; 
# 377
if ((__first._M_sbuf) && (!(__last._M_sbuf))) 
# 378
{ 
# 379
const int_type __ival = traits_type::to_int_type(__val); 
# 380
streambuf_type *__sb = ((__first._M_sbuf)); 
# 381
int_type __c = (__sb->sgetc()); 
# 382
while ((!traits_type::eq_int_type(__c, traits_type::eof())) && (!traits_type::eq_int_type(__c, __ival))) 
# 384
{ 
# 385
streamsize __n = (__sb->egptr()) - (__sb->gptr()); 
# 386
if (__n > (1)) 
# 387
{ 
# 388
const _CharT *__p = traits_type::find((__sb->gptr()), __n, __val); 
# 390
if (__p) { 
# 391
__n = (__p - (__sb->gptr())); }  
# 392
(__sb->__safe_gbump(__n)); 
# 393
__c = (__sb->sgetc()); 
# 394
} else { 
# 396
__c = (__sb->snextc()); }  
# 397
}  
# 399
if (!traits_type::eq_int_type(__c, traits_type::eof())) { 
# 400
(__first._M_c) = __c; } else { 
# 402
(__first._M_sbuf) = 0; }  
# 403
}  
# 404
return __first; 
# 405
} 
# 410
}
# 50 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 64 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
template< class _Tp> void __convert_to_v(const char *, _Tp &, ios_base::iostate &, const __c_locale &) throw(); 
# 72
template<> void __convert_to_v(const char *, float &, ios_base::iostate &, const __c_locale &) throw(); 
# 77
template<> void __convert_to_v(const char *, double &, ios_base::iostate &, const __c_locale &) throw(); 
# 82
template<> void __convert_to_v(const char *, long double &, ios_base::iostate &, const __c_locale &) throw(); 
# 87
template< class _CharT, class _Traits> 
# 88
struct __pad { 
# 91
static void _S_pad(ios_base & __io, _CharT __fill, _CharT * __news, const _CharT * __olds, streamsize __newlen, streamsize __oldlen); 
# 93
}; 
# 100
template< class _CharT> _CharT *__add_grouping(_CharT * __s, _CharT __sep, const char * __gbeg, size_t __gsize, const _CharT * __first, const _CharT * __last); 
# 109
template< class _CharT> inline ostreambuf_iterator< _CharT, char_traits< _CharT> >  
# 112
__write(ostreambuf_iterator< _CharT, char_traits< _CharT> >  __s, const _CharT *__ws, int __len) 
# 113
{ 
# 114
(__s._M_put(__ws, __len)); 
# 115
return __s; 
# 116
} 
# 119
template< class _CharT, class _OutIter> inline _OutIter 
# 122
__write(_OutIter __s, const _CharT *__ws, int __len) 
# 123
{ 
# 124
for (int __j = 0; __j < __len; (__j++), (++__s)) { 
# 125
(*__s) = (__ws[__j]); }  
# 126
return __s; 
# 127
} 
# 142 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
template< class _CharT> 
# 143
class __ctype_abstract_base : public locale::facet, public ctype_base { 
# 148
public: typedef _CharT char_type; 
# 162 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
bool is(mask __m, char_type __c) const 
# 163
{ return (this->do_is(__m, __c)); } 
# 179 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
const char_type *is(const char_type *__lo, const char_type *__hi, mask *__vec) const 
# 180
{ return (this->do_is(__lo, __hi, __vec)); } 
# 195 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
const char_type *scan_is(mask __m, const char_type *__lo, const char_type *__hi) const 
# 196
{ return this->do_scan_is(__m, __lo, __hi); } 
# 211 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
const char_type *scan_not(mask __m, const char_type *__lo, const char_type *__hi) const 
# 212
{ return this->do_scan_not(__m, __lo, __hi); } 
# 225 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
char_type toupper(char_type __c) const 
# 226
{ return (this->do_toupper(__c)); } 
# 240 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 241
{ return (this->do_toupper(__lo, __hi)); } 
# 254 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
char_type tolower(char_type __c) const 
# 255
{ return (this->do_tolower(__c)); } 
# 269 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 270
{ return (this->do_tolower(__lo, __hi)); } 
# 286 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
char_type widen(char __c) const 
# 287
{ return (this->do_widen(__c)); } 
# 305 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 306
{ return (this->do_widen(__lo, __hi, __to)); } 
# 324 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const 
# 325
{ return (this->do_narrow(__c, __dfault)); } 
# 346 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 347
__dfault, char *__to) const 
# 348
{ return (this->do_narrow(__lo, __hi, __dfault, __to)); } 
# 352
protected: explicit __ctype_abstract_base(size_t __refs = 0) : locale::facet(__refs) { } 
# 355
virtual ~__ctype_abstract_base() { } 
# 371 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual bool do_is(mask __m, char_type __c) const = 0; 
# 390 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const = 0; 
# 409 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const = 0; 
# 428 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const = 0; 
# 446 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const = 0; 
# 463 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const = 0; 
# 479 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const = 0; 
# 496 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const = 0; 
# 515 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const = 0; 
# 536 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __to) const = 0; 
# 557 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault) const = 0; 
# 582 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const = 0; 
# 584
}; 
# 604 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
template< class _CharT> 
# 605
class ctype : public __ctype_abstract_base< _CharT>  { 
# 609
public: typedef _CharT char_type; 
# 610
typedef typename std::__ctype_abstract_base< _CharT> ::mask mask; 
# 613
static std::locale::id id; 
# 616
explicit ctype(std::size_t __refs = 0) : std::__ctype_abstract_base< _CharT> (__refs) { } 
# 620
protected: virtual ~ctype(); 
# 623 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual bool do_is(mask __m, char_type __c) const; 
# 626
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const; 
# 629
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 632
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 636
virtual char_type do_toupper(char_type __c) const; 
# 639
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 642
virtual char_type do_tolower(char_type __c) const; 
# 645
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 648
virtual char_type do_widen(char __c) const; 
# 651
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __dest) const; 
# 654
virtual char do_narrow(char_type, char __dfault) const; 
# 657
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const; 
# 659
}; 
# 661
template< class _CharT> locale::id 
# 662
ctype< _CharT> ::id; 
# 674 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
template<> class ctype< char>  : public locale::facet, public ctype_base { 
# 679
public: typedef char char_type; 
# 683
protected: __c_locale _M_c_locale_ctype; 
# 684
bool _M_del; 
# 685
__to_type _M_toupper; 
# 686
__to_type _M_tolower; 
# 687
const mask *_M_table; 
# 688
mutable char _M_widen_ok; 
# 689
mutable char _M_widen[1 + (static_cast< unsigned char>(-1))]; 
# 690
mutable char _M_narrow[1 + (static_cast< unsigned char>(-1))]; 
# 691
mutable char _M_narrow_ok; 
# 696
public: static locale::id id; 
# 698
static const size_t table_size = (1 + (static_cast< unsigned char>(-1))); 
# 711 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
explicit ctype(const mask * __table = 0, bool __del = false, size_t __refs = 0); 
# 724 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
explicit ctype(__c_locale __cloc, const mask * __table = 0, bool __del = false, size_t __refs = 0); 
# 737 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
inline bool is(mask __m, char __c) const; 
# 752 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
inline const char *is(const char * __lo, const char * __hi, mask * __vec) const; 
# 766 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
inline const char *scan_is(mask __m, const char * __lo, const char * __hi) const; 
# 780 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
inline const char *scan_not(mask __m, const char * __lo, const char * __hi) const; 
# 795 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
char_type toupper(char_type __c) const 
# 796
{ return this->do_toupper(__c); } 
# 812 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 813
{ return this->do_toupper(__lo, __hi); } 
# 828 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
char_type tolower(char_type __c) const 
# 829
{ return this->do_tolower(__c); } 
# 845 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 846
{ return this->do_tolower(__lo, __hi); } 
# 865 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
char_type widen(char __c) const 
# 866
{ 
# 867
if (_M_widen_ok) { 
# 868
return (_M_widen)[static_cast< unsigned char>(__c)]; }  
# 869
this->_M_widen_init(); 
# 870
return this->do_widen(__c); 
# 871
} 
# 892 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 893
{ 
# 894
if ((_M_widen_ok) == 1) 
# 895
{ 
# 896
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 897
return __hi; 
# 898
}  
# 899
if (!(_M_widen_ok)) { 
# 900
this->_M_widen_init(); }  
# 901
return this->do_widen(__lo, __hi, __to); 
# 902
} 
# 923 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const 
# 924
{ 
# 925
if ((_M_narrow)[static_cast< unsigned char>(__c)]) { 
# 926
return (_M_narrow)[static_cast< unsigned char>(__c)]; }  
# 927
const char __t = this->do_narrow(__c, __dfault); 
# 928
if (__t != __dfault) { 
# 929
((_M_narrow)[static_cast< unsigned char>(__c)]) = __t; }  
# 930
return __t; 
# 931
} 
# 956 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 957
__dfault, char *__to) const 
# 958
{ 
# 959
if (__builtin_expect((_M_narrow_ok) == 1, true)) 
# 960
{ 
# 961
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 962
return __hi; 
# 963
}  
# 964
if (!(_M_narrow_ok)) { 
# 965
this->_M_narrow_init(); }  
# 966
return this->do_narrow(__lo, __hi, __dfault, __to); 
# 967
} 
# 974
const mask *table() const throw() 
# 975
{ return _M_table; } 
# 979
static const mask *classic_table() throw(); 
# 989
protected: virtual ~ctype(); 
# 1005 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const; 
# 1022 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 1038 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const; 
# 1055 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 1075 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const 
# 1076
{ return __c; } 
# 1098 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char *do_widen(const char *__lo, const char *__hi, char_type *__to) const 
# 1099
{ 
# 1100
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 1101
return __hi; 
# 1102
} 
# 1124 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault) const 
# 1125
{ return __c; } 
# 1150 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *__lo, const char_type *__hi, char 
# 1151
__dfault, char *__to) const 
# 1152
{ 
# 1153
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 1154
return __hi; 
# 1155
} 
# 1158
private: void _M_narrow_init() const; 
# 1159
void _M_widen_init() const; 
# 1160
}; 
# 1175 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
template<> class ctype< wchar_t>  : public __ctype_abstract_base< wchar_t>  { 
# 1180
public: typedef wchar_t char_type; 
# 1181
typedef wctype_t __wmask_type; 
# 1184
protected: __c_locale _M_c_locale_ctype; 
# 1187
bool _M_narrow_ok; 
# 1188
char _M_narrow[128]; 
# 1189
wint_t _M_widen[1 + (static_cast< unsigned char>(-1))]; 
# 1192
mask _M_bit[16]; 
# 1193
__wmask_type _M_wmask[16]; 
# 1198
public: static locale::id id; 
# 1208 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
explicit ctype(size_t __refs = 0); 
# 1219 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
explicit ctype(__c_locale __cloc, size_t __refs = 0); 
# 1223
protected: __wmask_type _M_convert_to_wmask(const mask __m) const throw(); 
# 1227
virtual ~ctype(); 
# 1243 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual bool do_is(mask __m, char_type __c) const; 
# 1262 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const; 
# 1280 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 1298 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 1315 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const; 
# 1332 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 1348 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const; 
# 1365 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 1385 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const; 
# 1407 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __to) const; 
# 1430 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault) const; 
# 1456 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const; 
# 1461
void _M_initialize_ctype() throw(); 
# 1462
}; 
# 1466
template< class _CharT> 
# 1467
class ctype_byname : public ctype< _CharT>  { 
# 1470
public: typedef typename std::ctype< _CharT> ::mask mask; 
# 1473
explicit ctype_byname(const char * __s, std::size_t __refs = 0); 
# 1477
protected: virtual ~ctype_byname() { } 
# 1478
}; 
# 1482
template<> class ctype_byname< char>  : public ctype< char>  { 
# 1486
public: explicit ctype_byname(const char * __s, size_t __refs = 0); 
# 1490
protected: virtual ~ctype_byname(); 
# 1491
}; 
# 1495
template<> class ctype_byname< wchar_t>  : public ctype< wchar_t>  { 
# 1499
public: explicit ctype_byname(const char * __s, size_t __refs = 0); 
# 1503
protected: virtual ~ctype_byname(); 
# 1504
}; 
# 1508
}
# 37 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/ctype_inline.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 43 "/usr/include/c++/4.8.2/ppc64le-redhat-linux/bits/ctype_inline.h" 3
inline bool ctype< char> ::is(mask __m, char __c) const 
# 44
{ return ((_M_table)[static_cast< unsigned char>(__c)]) & __m; } 
# 48
inline const char *ctype< char> ::is(const char *__low, const char *__high, mask *__vec) const 
# 49
{ 
# 50
while (__low < __high) { 
# 51
(*(__vec++)) = ((_M_table)[static_cast< unsigned char>(*(__low++))]); }  
# 52
return __high; 
# 53
} 
# 57
inline const char *ctype< char> ::scan_is(mask __m, const char *__low, const char *__high) const 
# 58
{ 
# 59
while ((__low < __high) && (!(((_M_table)[static_cast< unsigned char>(*__low)]) & __m))) { 
# 61
++__low; }  
# 62
return __low; 
# 63
} 
# 67
inline const char *ctype< char> ::scan_not(mask __m, const char *__low, const char *__high) const 
# 68
{ 
# 69
while ((__low < __high) && ((((_M_table)[static_cast< unsigned char>(*__low)]) & __m) != 0)) { 
# 71
++__low; }  
# 72
return __low; 
# 73
} 
# 76
}
# 1513 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 1518
class __num_base { 
# 1524
public: enum { 
# 1525
_S_ominus, 
# 1526
_S_oplus, 
# 1527
_S_ox, 
# 1528
_S_oX, 
# 1529
_S_odigits, 
# 1530
_S_odigits_end = 20, 
# 1531
_S_oudigits = 20, 
# 1532
_S_oudigits_end = 36, 
# 1533
_S_oe = 18, 
# 1534
_S_oE = 34, 
# 1535
_S_oend = 36
# 1536
}; 
# 1543
static const char *_S_atoms_out; 
# 1547
static const char *_S_atoms_in; 
# 1550
enum { 
# 1551
_S_iminus, 
# 1552
_S_iplus, 
# 1553
_S_ix, 
# 1554
_S_iX, 
# 1555
_S_izero, 
# 1556
_S_ie = 18, 
# 1557
_S_iE = 24, 
# 1558
_S_iend = 26
# 1559
}; 
# 1564
static void _S_format_float(const ios_base & __io, char * __fptr, char __mod) throw(); 
# 1565
}; 
# 1567
template< class _CharT> 
# 1568
struct __numpunct_cache : public locale::facet { 
# 1570
const char *_M_grouping; 
# 1571
size_t _M_grouping_size; 
# 1572
bool _M_use_grouping; 
# 1573
const _CharT *_M_truename; 
# 1574
size_t _M_truename_size; 
# 1575
const _CharT *_M_falsename; 
# 1576
size_t _M_falsename_size; 
# 1577
_CharT _M_decimal_point; 
# 1578
_CharT _M_thousands_sep; 
# 1584
_CharT _M_atoms_out[__num_base::_S_oend]; 
# 1590
_CharT _M_atoms_in[__num_base::_S_iend]; 
# 1592
bool _M_allocated; 
# 1594
__numpunct_cache(size_t __refs = 0) : locale::facet(__refs), _M_grouping((0)), _M_grouping_size((0)), _M_use_grouping(false), _M_truename((0)), _M_truename_size((0)), _M_falsename((0)), _M_falsename_size((0)), _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()), _M_allocated(false) 
# 1600
{ } 
# 1602
virtual ~__numpunct_cache(); 
# 1605
void _M_cache(const locale & __loc); 
# 1609
private: __numpunct_cache &operator=(const __numpunct_cache &); 
# 1612
explicit __numpunct_cache(const __numpunct_cache &); 
# 1613
}; 
# 1615
template< class _CharT> 
# 1616
__numpunct_cache< _CharT> ::~__numpunct_cache() 
# 1617
{ 
# 1618
if (_M_allocated) 
# 1619
{ 
# 1620
delete [] (_M_grouping); 
# 1621
delete [] (_M_truename); 
# 1622
delete [] (_M_falsename); 
# 1623
}  
# 1624
} 
# 1640 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
template< class _CharT> 
# 1641
class numpunct : public locale::facet { 
# 1647
public: typedef _CharT char_type; 
# 1648
typedef basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  string_type; 
# 1650
typedef __numpunct_cache< _CharT>  __cache_type; 
# 1653
protected: __cache_type *_M_data; 
# 1657
public: static locale::id id; 
# 1665
explicit numpunct(size_t __refs = 0) : locale::facet(__refs), _M_data((0)) 
# 1667
{ _M_initialize_numpunct(); } 
# 1679 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
explicit numpunct(__cache_type *__cache, size_t __refs = 0) : locale::facet(__refs), _M_data(__cache) 
# 1681
{ _M_initialize_numpunct(); } 
# 1693 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
explicit numpunct(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs), _M_data((0)) 
# 1695
{ _M_initialize_numpunct(__cloc); } 
# 1707 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
char_type decimal_point() const 
# 1708
{ return this->do_decimal_point(); } 
# 1720 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
char_type thousands_sep() const 
# 1721
{ return this->do_thousands_sep(); } 
# 1751 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
string grouping() const 
# 1752
{ return this->do_grouping(); } 
# 1764 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
string_type truename() const 
# 1765
{ return this->do_truename(); } 
# 1777 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
string_type falsename() const 
# 1778
{ return this->do_falsename(); } 
# 1783
protected: virtual ~numpunct(); 
# 1794 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual char_type do_decimal_point() const 
# 1795
{ return (_M_data)->_M_decimal_point; } 
# 1806 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual char_type do_thousands_sep() const 
# 1807
{ return (_M_data)->_M_thousands_sep; } 
# 1819 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual string do_grouping() const 
# 1820
{ return (_M_data)->_M_grouping; } 
# 1832 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual string_type do_truename() const 
# 1833
{ return (_M_data)->_M_truename; } 
# 1845 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual string_type do_falsename() const 
# 1846
{ return (_M_data)->_M_falsename; } 
# 1850
void _M_initialize_numpunct(__c_locale __cloc = 0); 
# 1851
}; 
# 1853
template< class _CharT> locale::id 
# 1854
numpunct< _CharT> ::id; 
# 1857
template<> numpunct< char> ::~numpunct(); 
# 1861
template<> void numpunct< char> ::_M_initialize_numpunct(__c_locale __cloc); 
# 1865
template<> numpunct< wchar_t> ::~numpunct(); 
# 1869
template<> void numpunct< wchar_t> ::_M_initialize_numpunct(__c_locale __cloc); 
# 1873
template< class _CharT> 
# 1874
class numpunct_byname : public numpunct< _CharT>  { 
# 1877
public: typedef _CharT char_type; 
# 1878
typedef basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  string_type; 
# 1881
explicit numpunct_byname(const char *__s, std::size_t __refs = 0) : std::numpunct< _CharT> (__refs) 
# 1883
{ 
# 1884
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 1886
{ 
# 1887
std::__c_locale __tmp; 
# 1888
(this->_S_create_c_locale(__tmp, __s)); 
# 1889
(this->_M_initialize_numpunct(__tmp)); 
# 1890
(this->_S_destroy_c_locale(__tmp)); 
# 1891
}  
# 1892
} 
# 1896
protected: virtual ~numpunct_byname() { } 
# 1897
}; 
# 1899
inline namespace __gnu_cxx_ldbl128 { 
# 1914 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
template< class _CharT, class _InIter> 
# 1915
class num_get : public locale::facet { 
# 1921
public: typedef _CharT char_type; 
# 1922
typedef _InIter iter_type; 
# 1926
static locale::id id; 
# 1936 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
explicit num_get(size_t __refs = 0) : locale::facet(__refs) { } 
# 1962 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 1963
__err, bool &__v) const 
# 1964
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 1999 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2000
__err, long &__v) const 
# 2001
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2004
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2005
__err, unsigned short &__v) const 
# 2006
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2009
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2010
__err, unsigned &__v) const 
# 2011
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2014
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2015
__err, unsigned long &__v) const 
# 2016
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2020
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2021
__err, long long &__v) const 
# 2022
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2025
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2026
__err, unsigned long long &__v) const 
# 2027
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2059 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2060
__err, float &__v) const 
# 2061
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2064
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2065
__err, double &__v) const 
# 2066
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2069
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2070
__err, long double &__v) const 
# 2071
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2102 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2103
__err, void *&__v) const 
# 2104
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2108
protected: virtual ~num_get() { } 
# 2111
iter_type _M_extract_float(iter_type, iter_type, ios_base &, ios_base::iostate &, string &) const; 
# 2114
template< class _ValueT> iter_type _M_extract_int(iter_type, iter_type, ios_base &, ios_base::iostate &, _ValueT &) const; 
# 2119
template< class _CharT2> typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, int> ::__type 
# 2121
_M_find(const _CharT2 *, size_t __len, _CharT2 __c) const 
# 2122
{ 
# 2123
int __ret = (-1); 
# 2124
if (__len <= (10)) 
# 2125
{ 
# 2126
if ((__c >= ((_CharT2)'0')) && (__c < ((_CharT2)(((_CharT2)'0') + __len)))) { 
# 2127
__ret = (__c - ((_CharT2)'0')); }  
# 2128
} else 
# 2130
{ 
# 2131
if ((__c >= ((_CharT2)'0')) && (__c <= ((_CharT2)'9'))) { 
# 2132
__ret = (__c - ((_CharT2)'0')); } else { 
# 2133
if ((__c >= ((_CharT2)'a')) && (__c <= ((_CharT2)'f'))) { 
# 2134
__ret = (10 + (__c - ((_CharT2)'a'))); } else { 
# 2135
if ((__c >= ((_CharT2)'A')) && (__c <= ((_CharT2)'F'))) { 
# 2136
__ret = (10 + (__c - ((_CharT2)'A'))); }  }  }  
# 2137
}  
# 2138
return __ret; 
# 2139
} 
# 2141
template< class _CharT2> typename __gnu_cxx::__enable_if< !__is_char< _CharT2> ::__value, int> ::__type 
# 2144
_M_find(const _CharT2 *__zero, size_t __len, _CharT2 __c) const 
# 2145
{ 
# 2146
int __ret = (-1); 
# 2147
const char_type *__q = char_traits< _CharT2> ::find(__zero, __len, __c); 
# 2148
if (__q) 
# 2149
{ 
# 2150
__ret = (__q - __zero); 
# 2151
if (__ret > 15) { 
# 2152
__ret -= 6; }  
# 2153
}  
# 2154
return __ret; 
# 2155
} 
# 2173 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, bool &) const; 
# 2176
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2177
__err, long &__v) const 
# 2178
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2181
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2182
__err, unsigned short &__v) const 
# 2183
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2186
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2187
__err, unsigned &__v) const 
# 2188
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2191
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2192
__err, unsigned long &__v) const 
# 2193
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2197
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2198
__err, long long &__v) const 
# 2199
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2202
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2203
__err, unsigned long long &__v) const 
# 2204
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2208
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, float &) const; 
# 2211
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, double &) const; 
# 2217
virtual iter_type __do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, double &) const; 
# 2226
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, void *&) const; 
# 2231
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, long double &) const; 
# 2235
}; 
# 2237
template< class _CharT, class _InIter> locale::id 
# 2238
num_get< _CharT, _InIter> ::id; 
# 2253 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
template< class _CharT, class _OutIter> 
# 2254
class num_put : public locale::facet { 
# 2260
public: typedef _CharT char_type; 
# 2261
typedef _OutIter iter_type; 
# 2265
static locale::id id; 
# 2275 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
explicit num_put(size_t __refs = 0) : locale::facet(__refs) { } 
# 2293 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, bool __v) const 
# 2294
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2335 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long __v) const 
# 2336
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2339
iter_type put(iter_type __s, ios_base &__io, char_type __fill, unsigned long 
# 2340
__v) const 
# 2341
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2345
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long long __v) const 
# 2346
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2349
iter_type put(iter_type __s, ios_base &__io, char_type __fill, unsigned long long 
# 2350
__v) const 
# 2351
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2398 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, double __v) const 
# 2399
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2402
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long double 
# 2403
__v) const 
# 2404
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2423 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, const void *
# 2424
__v) const 
# 2425
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2428
protected: template< class _ValueT> iter_type _M_insert_float(iter_type, ios_base & __io, char_type __fill, char __mod, _ValueT __v) const; 
# 2434
void _M_group_float(const char * __grouping, size_t __grouping_size, char_type __sep, const char_type * __p, char_type * __new, char_type * __cs, int & __len) const; 
# 2438
template< class _ValueT> iter_type _M_insert_int(iter_type, ios_base & __io, char_type __fill, _ValueT __v) const; 
# 2444
void _M_group_int(const char * __grouping, size_t __grouping_size, char_type __sep, ios_base & __io, char_type * __new, char_type * __cs, int & __len) const; 
# 2449
void _M_pad(char_type __fill, streamsize __w, ios_base & __io, char_type * __new, const char_type * __cs, int & __len) const; 
# 2454
virtual ~num_put() { } 
# 2471 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type __s, ios_base & __io, char_type __fill, bool __v) const; 
# 2474
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, long __v) const 
# 2475
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2478
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long 
# 2479
__v) const 
# 2480
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2484
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, long long 
# 2485
__v) const 
# 2486
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2489
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long long 
# 2490
__v) const 
# 2491
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2495
virtual iter_type do_put(iter_type, ios_base &, char_type, double) const; 
# 2500
virtual iter_type __do_put(iter_type, ios_base &, char_type, double) const; 
# 2507
virtual iter_type do_put(iter_type, ios_base &, char_type, const void *) const; 
# 2512
virtual iter_type do_put(iter_type, ios_base &, char_type, long double) const; 
# 2515
}; 
# 2517
template< class _CharT, class _OutIter> locale::id 
# 2518
num_put< _CharT, _OutIter> ::id; 
# 2520
}
# 2528
template< class _CharT> inline bool 
# 2530 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
isspace(_CharT __c, const locale &__loc) 
# 2531
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::space, __c)); } 
# 2534
template< class _CharT> inline bool 
# 2536 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
isprint(_CharT __c, const locale &__loc) 
# 2537
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::print, __c)); } 
# 2540
template< class _CharT> inline bool 
# 2542 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
iscntrl(_CharT __c, const locale &__loc) 
# 2543
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::cntrl, __c)); } 
# 2546
template< class _CharT> inline bool 
# 2548 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
isupper(_CharT __c, const locale &__loc) 
# 2549
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::upper, __c)); } 
# 2552
template< class _CharT> inline bool 
# 2554 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
islower(_CharT __c, const locale &__loc) 
# 2555
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::lower, __c)); } 
# 2558
template< class _CharT> inline bool 
# 2560 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
isalpha(_CharT __c, const locale &__loc) 
# 2561
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::alpha, __c)); } 
# 2564
template< class _CharT> inline bool 
# 2566 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
isdigit(_CharT __c, const locale &__loc) 
# 2567
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::digit, __c)); } 
# 2570
template< class _CharT> inline bool 
# 2572 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
ispunct(_CharT __c, const locale &__loc) 
# 2573
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::punct, __c)); } 
# 2576
template< class _CharT> inline bool 
# 2578 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
isxdigit(_CharT __c, const locale &__loc) 
# 2579
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::xdigit, __c)); } 
# 2582
template< class _CharT> inline bool 
# 2584 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
isalnum(_CharT __c, const locale &__loc) 
# 2585
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::alnum, __c)); } 
# 2588
template< class _CharT> inline bool 
# 2590 "/usr/include/c++/4.8.2/bits/locale_facets.h" 3
isgraph(_CharT __c, const locale &__loc) 
# 2591
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::graph, __c)); } 
# 2594
template< class _CharT> inline _CharT 
# 2596
toupper(_CharT __c, const locale &__loc) 
# 2597
{ return (use_facet< ctype< _CharT> > (__loc).toupper(__c)); } 
# 2600
template< class _CharT> inline _CharT 
# 2602
tolower(_CharT __c, const locale &__loc) 
# 2603
{ return (use_facet< ctype< _CharT> > (__loc).tolower(__c)); } 
# 2606
}
# 35 "/usr/include/c++/4.8.2/bits/locale_facets.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
template< class _Facet> 
# 42
struct __use_cache { 
# 45
const _Facet *operator()(const locale & __loc) const; 
# 46
}; 
# 49
template< class _CharT> 
# 50
struct __use_cache< __numpunct_cache< _CharT> >  { 
# 53
const __numpunct_cache< _CharT>  *operator()(const locale &__loc) const 
# 54
{ 
# 55
const size_t __i = (numpunct< _CharT> ::id._M_id)(); 
# 56
const locale::facet **__caches = (__loc._M_impl)->_M_caches; 
# 57
if (!(__caches[__i])) 
# 58
{ 
# 59
__numpunct_cache< _CharT>  *__tmp = (0); 
# 60
try 
# 61
{ 
# 62
__tmp = (new __numpunct_cache< _CharT> ); 
# 63
(__tmp->_M_cache(__loc)); 
# 64
} 
# 65
catch (...) 
# 66
{ 
# 67
delete __tmp; 
# 68
throw; 
# 69
}  
# 70
(__loc._M_impl)->_M_install_cache(__tmp, __i); 
# 71
}  
# 72
return static_cast< const __numpunct_cache< _CharT>  *>(__caches[__i]); 
# 73
} 
# 74
}; 
# 76
template< class _CharT> void 
# 78
__numpunct_cache< _CharT> ::_M_cache(const locale &__loc) 
# 79
{ 
# 80
(_M_allocated) = true; 
# 82
const numpunct< _CharT>  &__np = use_facet< numpunct< _CharT> > (__loc); 
# 84
char *__grouping = (0); 
# 85
_CharT *__truename = (0); 
# 86
_CharT *__falsename = (0); 
# 87
try 
# 88
{ 
# 89
(_M_grouping_size) = ((__np.grouping()).size()); 
# 90
__grouping = (new char [_M_grouping_size]); 
# 91
((__np.grouping()).copy(__grouping, _M_grouping_size)); 
# 92
(_M_grouping) = __grouping; 
# 93
(_M_use_grouping) = ((_M_grouping_size) && ((static_cast< signed char>((_M_grouping)[0])) > 0) && (((_M_grouping)[0]) != __gnu_cxx::__numeric_traits_integer< char> ::__max)); 
# 98
(_M_truename_size) = ((__np.truename()).size()); 
# 99
__truename = (new _CharT [_M_truename_size]); 
# 100
((__np.truename()).copy(__truename, _M_truename_size)); 
# 101
(_M_truename) = __truename; 
# 103
(_M_falsename_size) = ((__np.falsename()).size()); 
# 104
__falsename = (new _CharT [_M_falsename_size]); 
# 105
((__np.falsename()).copy(__falsename, _M_falsename_size)); 
# 106
(_M_falsename) = __falsename; 
# 108
(_M_decimal_point) = (__np.decimal_point()); 
# 109
(_M_thousands_sep) = (__np.thousands_sep()); 
# 111
const ctype< _CharT>  &__ct = use_facet< ctype< _CharT> > (__loc); 
# 112
(__ct.widen(__num_base::_S_atoms_out, __num_base::_S_atoms_out + __num_base::_S_oend, _M_atoms_out)); 
# 115
(__ct.widen(__num_base::_S_atoms_in, __num_base::_S_atoms_in + __num_base::_S_iend, _M_atoms_in)); 
# 118
} 
# 119
catch (...) 
# 120
{ 
# 121
delete [] __grouping; 
# 122
delete [] __truename; 
# 123
delete [] __falsename; 
# 124
throw; 
# 125
}  
# 126
} 
# 136 "/usr/include/c++/4.8.2/bits/locale_facets.tcc" 3
__attribute((__pure__)) bool 
# 137 "/usr/include/c++/4.8.2/bits/locale_facets.tcc" 3
__verify_grouping(const char * __grouping, size_t __grouping_size, const string & __grouping_tmp) throw(); 
# 140
inline namespace __gnu_cxx_ldbl128 { 
# 142
template< class _CharT, class _InIter> _InIter 
# 145
num_get< _CharT, _InIter> ::_M_extract_float(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 146
__err, string &__xtrc) const 
# 147
{ 
# 148
typedef char_traits< _CharT>  __traits_type; 
# 149
typedef __numpunct_cache< _CharT>  __cache_type; 
# 150
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 151
const locale &__loc = __io._M_getloc(); 
# 152
const __cache_type *__lc = __uc(__loc); 
# 153
const _CharT *__lit = ((__lc->_M_atoms_in)); 
# 154
char_type __c = (char_type()); 
# 157
bool __testeof = __beg == __end; 
# 160
if (!__testeof) 
# 161
{ 
# 162
__c = (*__beg); 
# 163
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 164
if ((__plus || (__c == (__lit[__num_base::_S_iminus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) 
# 167
{ 
# 168
(__xtrc += (__plus ? '+' : '-')); 
# 169
if ((++__beg) != __end) { 
# 170
__c = (*__beg); } else { 
# 172
__testeof = true; }  
# 173
}  
# 174
}  
# 177
bool __found_mantissa = false; 
# 178
int __sep_pos = 0; 
# 179
while (!__testeof) 
# 180
{ 
# 181
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) { 
# 183
break; } else { 
# 184
if (__c == (__lit[__num_base::_S_izero])) 
# 185
{ 
# 186
if (!__found_mantissa) 
# 187
{ 
# 188
(__xtrc += ('0')); 
# 189
__found_mantissa = true; 
# 190
}  
# 191
++__sep_pos; 
# 193
if ((++__beg) != __end) { 
# 194
__c = (*__beg); } else { 
# 196
__testeof = true; }  
# 197
} else { 
# 199
break; }  }  
# 200
}  
# 203
bool __found_dec = false; 
# 204
bool __found_sci = false; 
# 205
string __found_grouping; 
# 206
if (__lc->_M_use_grouping) { 
# 207
__found_grouping.reserve(32); }  
# 208
const char_type *__lit_zero = __lit + __num_base::_S_izero; 
# 210
if (!(__lc->_M_allocated)) { 
# 212
while (!__testeof) { 
# 213
{ 
# 214
const int __digit = _M_find(__lit_zero, 10, __c); 
# 215
if (__digit != (-1)) 
# 216
{ 
# 217
(__xtrc += (('0') + __digit)); 
# 218
__found_mantissa = true; 
# 219
} else { 
# 220
if ((__c == (__lc->_M_decimal_point)) && (!__found_dec) && (!__found_sci)) 
# 222
{ 
# 223
(__xtrc += ('.')); 
# 224
__found_dec = true; 
# 225
} else { 
# 226
if (((__c == (__lit[__num_base::_S_ie])) || (__c == (__lit[__num_base::_S_iE]))) && (!__found_sci) && __found_mantissa) 
# 229
{ 
# 231
(__xtrc += ('e')); 
# 232
__found_sci = true; 
# 235
if ((++__beg) != __end) 
# 236
{ 
# 237
__c = (*__beg); 
# 238
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 239
if (__plus || (__c == (__lit[__num_base::_S_iminus]))) { 
# 240
(__xtrc += (__plus ? '+' : '-')); } else { 
# 242
continue; }  
# 243
} else 
# 245
{ 
# 246
__testeof = true; 
# 247
break; 
# 248
}  
# 249
} else { 
# 251
break; }  }  }  
# 253
if ((++__beg) != __end) { 
# 254
__c = (*__beg); } else { 
# 256
__testeof = true; }  
# 257
} }  } else { 
# 259
while (!__testeof) { 
# 260
{ 
# 263
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) 
# 264
{ 
# 265
if ((!__found_dec) && (!__found_sci)) 
# 266
{ 
# 269
if (__sep_pos) 
# 270
{ 
# 271
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 272
__sep_pos = 0; 
# 273
} else 
# 275
{ 
# 278
__xtrc.clear(); 
# 279
break; 
# 280
}  
# 281
} else { 
# 283
break; }  
# 284
} else { 
# 285
if (__c == (__lc->_M_decimal_point)) 
# 286
{ 
# 287
if ((!__found_dec) && (!__found_sci)) 
# 288
{ 
# 292
if (__found_grouping.size()) { 
# 293
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 294
(__xtrc += ('.')); 
# 295
__found_dec = true; 
# 296
} else { 
# 298
break; }  
# 299
} else 
# 301
{ 
# 302
const char_type *__q = __traits_type::find(__lit_zero, 10, __c); 
# 304
if (__q) 
# 305
{ 
# 306
__xtrc += ('0' + (__q - __lit_zero)); 
# 307
__found_mantissa = true; 
# 308
++__sep_pos; 
# 309
} else { 
# 310
if (((__c == (__lit[__num_base::_S_ie])) || (__c == (__lit[__num_base::_S_iE]))) && (!__found_sci) && __found_mantissa) 
# 313
{ 
# 315
if ((__found_grouping.size()) && (!__found_dec)) { 
# 316
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 317
(__xtrc += ('e')); 
# 318
__found_sci = true; 
# 321
if ((++__beg) != __end) 
# 322
{ 
# 323
__c = (*__beg); 
# 324
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 325
if ((__plus || (__c == (__lit[__num_base::_S_iminus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) { 
# 329
(__xtrc += (__plus ? '+' : '-')); } else { 
# 331
continue; }  
# 332
} else 
# 334
{ 
# 335
__testeof = true; 
# 336
break; 
# 337
}  
# 338
} else { 
# 340
break; }  }  
# 341
}  }  
# 343
if ((++__beg) != __end) { 
# 344
__c = (*__beg); } else { 
# 346
__testeof = true; }  
# 347
} }  }  
# 351
if (__found_grouping.size()) 
# 352
{ 
# 354
if ((!__found_dec) && (!__found_sci)) { 
# 355
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 357
if (!std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping)) { 
# 360
__err = ios_base::failbit; }  
# 361
}  
# 363
return __beg; 
# 364
} 
# 366
template< class _CharT, class _InIter> 
# 367
template< class _ValueT> _InIter 
# 370
num_get< _CharT, _InIter> ::_M_extract_int(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 371
__err, _ValueT &__v) const 
# 372
{ 
# 373
typedef char_traits< _CharT>  __traits_type; 
# 374
using __gnu_cxx::__add_unsigned;
# 375
typedef typename __gnu_cxx::__add_unsigned< _ValueT> ::__type __unsigned_type; 
# 376
typedef __numpunct_cache< _CharT>  __cache_type; 
# 377
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 378
const locale &__loc = __io._M_getloc(); 
# 379
const __cache_type *__lc = __uc(__loc); 
# 380
const _CharT *__lit = ((__lc->_M_atoms_in)); 
# 381
char_type __c = (char_type()); 
# 384
const ios_base::fmtflags __basefield = ((__io.flags()) & ios_base::basefield); 
# 386
const bool __oct = __basefield == ios_base::oct; 
# 387
int __base = __oct ? 8 : ((__basefield == ios_base::hex) ? 16 : 10); 
# 390
bool __testeof = __beg == __end; 
# 393
bool __negative = false; 
# 394
if (!__testeof) 
# 395
{ 
# 396
__c = (*__beg); 
# 397
__negative = (__c == (__lit[__num_base::_S_iminus])); 
# 398
if ((__negative || (__c == (__lit[__num_base::_S_iplus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) 
# 401
{ 
# 402
if ((++__beg) != __end) { 
# 403
__c = (*__beg); } else { 
# 405
__testeof = true; }  
# 406
}  
# 407
}  
# 411
bool __found_zero = false; 
# 412
int __sep_pos = 0; 
# 413
while (!__testeof) 
# 414
{ 
# 415
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) { 
# 417
break; } else { 
# 418
if ((__c == (__lit[__num_base::_S_izero])) && ((!__found_zero) || (__base == 10))) 
# 420
{ 
# 421
__found_zero = true; 
# 422
++__sep_pos; 
# 423
if (__basefield == 0) { 
# 424
__base = 8; }  
# 425
if (__base == 8) { 
# 426
__sep_pos = 0; }  
# 427
} else { 
# 428
if (__found_zero && ((__c == (__lit[__num_base::_S_ix])) || (__c == (__lit[__num_base::_S_iX])))) 
# 431
{ 
# 432
if (__basefield == 0) { 
# 433
__base = 16; }  
# 434
if (__base == 16) 
# 435
{ 
# 436
__found_zero = false; 
# 437
__sep_pos = 0; 
# 438
} else { 
# 440
break; }  
# 441
} else { 
# 443
break; }  }  }  
# 445
if ((++__beg) != __end) 
# 446
{ 
# 447
__c = (*__beg); 
# 448
if (!__found_zero) { 
# 449
break; }  
# 450
} else { 
# 452
__testeof = true; }  
# 453
}  
# 457
const size_t __len = (__base == 16) ? (__num_base::_S_iend) - (__num_base::_S_izero) : __base; 
# 461
string __found_grouping; 
# 462
if (__lc->_M_use_grouping) { 
# 463
__found_grouping.reserve(32); }  
# 464
bool __testfail = false; 
# 465
bool __testoverflow = false; 
# 466
const __unsigned_type __max = (__negative && __gnu_cxx::__numeric_traits< _ValueT> ::__is_signed) ? -__gnu_cxx::__numeric_traits< _ValueT> ::__min : __gnu_cxx::__numeric_traits< _ValueT> ::__max; 
# 470
const __unsigned_type __smax = __max / __base; 
# 471
__unsigned_type __result = (0); 
# 472
int __digit = 0; 
# 473
const char_type *__lit_zero = __lit + __num_base::_S_izero; 
# 475
if (!(__lc->_M_allocated)) { 
# 477
while (!__testeof) 
# 478
{ 
# 479
__digit = _M_find(__lit_zero, __len, __c); 
# 480
if (__digit == (-1)) { 
# 481
break; }  
# 483
if (__result > __smax) { 
# 484
__testoverflow = true; } else 
# 486
{ 
# 487
__result *= __base; 
# 488
__testoverflow |= (__result > (__max - __digit)); 
# 489
__result += __digit; 
# 490
++__sep_pos; 
# 491
}  
# 493
if ((++__beg) != __end) { 
# 494
__c = (*__beg); } else { 
# 496
__testeof = true; }  
# 497
}  } else { 
# 499
while (!__testeof) 
# 500
{ 
# 503
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) 
# 504
{ 
# 507
if (__sep_pos) 
# 508
{ 
# 509
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 510
__sep_pos = 0; 
# 511
} else 
# 513
{ 
# 514
__testfail = true; 
# 515
break; 
# 516
}  
# 517
} else { 
# 518
if (__c == (__lc->_M_decimal_point)) { 
# 519
break; } else 
# 521
{ 
# 522
const char_type *__q = __traits_type::find(__lit_zero, __len, __c); 
# 524
if (!__q) { 
# 525
break; }  
# 527
__digit = (__q - __lit_zero); 
# 528
if (__digit > 15) { 
# 529
__digit -= 6; }  
# 530
if (__result > __smax) { 
# 531
__testoverflow = true; } else 
# 533
{ 
# 534
__result *= __base; 
# 535
__testoverflow |= (__result > (__max - __digit)); 
# 536
__result += __digit; 
# 537
++__sep_pos; 
# 538
}  
# 539
}  }  
# 541
if ((++__beg) != __end) { 
# 542
__c = (*__beg); } else { 
# 544
__testeof = true; }  
# 545
}  }  
# 549
if (__found_grouping.size()) 
# 550
{ 
# 552
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 554
if (!std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping)) { 
# 557
__err = ios_base::failbit; }  
# 558
}  
# 562
if (((!__sep_pos) && (!__found_zero) && (!(__found_grouping.size()))) || __testfail) 
# 564
{ 
# 565
__v = 0; 
# 566
__err = ios_base::failbit; 
# 567
} else { 
# 568
if (__testoverflow) 
# 569
{ 
# 570
if (__negative && __gnu_cxx::__numeric_traits< _ValueT> ::__is_signed) { 
# 572
__v = __gnu_cxx::__numeric_traits< _ValueT> ::__min; } else { 
# 574
__v = __gnu_cxx::__numeric_traits< _ValueT> ::__max; }  
# 575
__err = ios_base::failbit; 
# 576
} else { 
# 578
__v = (__negative ? -__result : __result); }  }  
# 580
if (__testeof) { 
# 581
(__err |= ios_base::eofbit); }  
# 582
return __beg; 
# 583
} 
# 587
template< class _CharT, class _InIter> _InIter 
# 590
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 591
__err, bool &__v) const 
# 592
{ 
# 593
if (!(((__io.flags()) & ios_base::boolalpha))) 
# 594
{ 
# 598
long __l = (-1); 
# 599
__beg = _M_extract_int(__beg, __end, __io, __err, __l); 
# 600
if ((__l == (0)) || (__l == (1))) { 
# 601
__v = ((bool)__l); } else 
# 603
{ 
# 606
__v = true; 
# 607
__err = ios_base::failbit; 
# 608
if (__beg == __end) { 
# 609
(__err |= ios_base::eofbit); }  
# 610
}  
# 611
} else 
# 613
{ 
# 615
typedef __numpunct_cache< _CharT>  __cache_type; 
# 616
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 617
const locale &__loc = __io._M_getloc(); 
# 618
const __cache_type *__lc = __uc(__loc); 
# 620
bool __testf = true; 
# 621
bool __testt = true; 
# 622
bool __donef = (__lc->_M_falsename_size) == 0; 
# 623
bool __donet = (__lc->_M_truename_size) == 0; 
# 624
bool __testeof = false; 
# 625
size_t __n = (0); 
# 626
while ((!__donef) || (!__donet)) 
# 627
{ 
# 628
if (__beg == __end) 
# 629
{ 
# 630
__testeof = true; 
# 631
break; 
# 632
}  
# 634
const char_type __c = (*__beg); 
# 636
if (!__donef) { 
# 637
__testf = (__c == ((__lc->_M_falsename)[__n])); }  
# 639
if ((!__testf) && __donet) { 
# 640
break; }  
# 642
if (!__donet) { 
# 643
__testt = (__c == ((__lc->_M_truename)[__n])); }  
# 645
if ((!__testt) && __donef) { 
# 646
break; }  
# 648
if ((!__testt) && (!__testf)) { 
# 649
break; }  
# 651
++__n; 
# 652
++__beg; 
# 654
__donef = ((!__testf) || (__n >= (__lc->_M_falsename_size))); 
# 655
__donet = ((!__testt) || (__n >= (__lc->_M_truename_size))); 
# 656
}  
# 657
if (__testf && (__n == (__lc->_M_falsename_size)) && __n) 
# 658
{ 
# 659
__v = false; 
# 660
if (__testt && (__n == (__lc->_M_truename_size))) { 
# 661
__err = ios_base::failbit; } else { 
# 663
__err = (__testeof ? ios_base::eofbit : ios_base::goodbit); }  
# 664
} else { 
# 665
if (__testt && (__n == (__lc->_M_truename_size)) && __n) 
# 666
{ 
# 667
__v = true; 
# 668
__err = (__testeof ? ios_base::eofbit : ios_base::goodbit); 
# 669
} else 
# 671
{ 
# 674
__v = false; 
# 675
__err = ios_base::failbit; 
# 676
if (__testeof) { 
# 677
(__err |= ios_base::eofbit); }  
# 678
}  }  
# 679
}  
# 680
return __beg; 
# 681
} 
# 683
template< class _CharT, class _InIter> _InIter 
# 686
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 687
__err, float &__v) const 
# 688
{ 
# 689
string __xtrc; 
# 690
__xtrc.reserve(32); 
# 691
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 692
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 693
if (__beg == __end) { 
# 694
(__err |= ios_base::eofbit); }  
# 695
return __beg; 
# 696
} 
# 698
template< class _CharT, class _InIter> _InIter 
# 701
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 702
__err, double &__v) const 
# 703
{ 
# 704
string __xtrc; 
# 705
__xtrc.reserve(32); 
# 706
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 707
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 708
if (__beg == __end) { 
# 709
(__err |= ios_base::eofbit); }  
# 710
return __beg; 
# 711
} 
# 714
template< class _CharT, class _InIter> _InIter 
# 717
num_get< _CharT, _InIter> ::__do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 718
__err, double &__v) const 
# 719
{ 
# 720
string __xtrc; 
# 721
__xtrc.reserve(32); 
# 722
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 723
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 724
if (__beg == __end) { 
# 725
(__err |= ios_base::eofbit); }  
# 726
return __beg; 
# 727
} 
# 730
template< class _CharT, class _InIter> _InIter 
# 733
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 734
__err, long double &__v) const 
# 735
{ 
# 736
string __xtrc; 
# 737
__xtrc.reserve(32); 
# 738
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 739
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 740
if (__beg == __end) { 
# 741
(__err |= ios_base::eofbit); }  
# 742
return __beg; 
# 743
} 
# 745
template< class _CharT, class _InIter> _InIter 
# 748
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 749
__err, void *&__v) const 
# 750
{ 
# 752
typedef ios_base::fmtflags fmtflags; 
# 753
const fmtflags __fmt = __io.flags(); 
# 754
__io.flags((((__fmt & ((~ios_base::basefield)))) | ios_base::hex)); 
# 758
typedef __gnu_cxx::__conditional_type< true, unsigned long, unsigned long long> ::__type _UIntPtrType; 
# 760
_UIntPtrType __ul; 
# 761
__beg = _M_extract_int(__beg, __end, __io, __err, __ul); 
# 764
__io.flags(__fmt); 
# 766
__v = (reinterpret_cast< void *>(__ul)); 
# 767
return __beg; 
# 768
} 
# 772
template< class _CharT, class _OutIter> void 
# 775
num_put< _CharT, _OutIter> ::_M_pad(_CharT __fill, streamsize __w, ios_base &__io, _CharT *
# 776
__new, const _CharT *__cs, int &__len) const 
# 777
{ 
# 780
__pad< _CharT, char_traits< _CharT> > ::_S_pad(__io, __fill, __new, __cs, __w, __len); 
# 782
__len = (static_cast< int>(__w)); 
# 783
} 
# 785
}
# 787
template< class _CharT, class _ValueT> int 
# 789
__int_to_char(_CharT *__bufend, _ValueT __v, const _CharT *__lit, ios_base::fmtflags 
# 790
__flags, bool __dec) 
# 791
{ 
# 792
_CharT *__buf = __bufend; 
# 793
if (__builtin_expect(__dec, true)) 
# 794
{ 
# 796
do 
# 797
{ 
# 798
(*(--__buf)) = (__lit[(__v % 10) + __num_base::_S_odigits]); 
# 799
__v /= 10; 
# 800
} 
# 801
while (__v != 0); 
# 802
} else { 
# 803
if (((__flags & ios_base::basefield)) == ios_base::oct) 
# 804
{ 
# 806
do 
# 807
{ 
# 808
(*(--__buf)) = (__lit[(__v & 7) + __num_base::_S_odigits]); 
# 809
__v >>= 3; 
# 810
} 
# 811
while (__v != 0); 
# 812
} else 
# 814
{ 
# 816
const bool __uppercase = (__flags & ios_base::uppercase); 
# 817
const int __case_offset = __uppercase ? __num_base::_S_oudigits : __num_base::_S_odigits; 
# 819
do 
# 820
{ 
# 821
(*(--__buf)) = (__lit[(__v & 15) + __case_offset]); 
# 822
__v >>= 4; 
# 823
} 
# 824
while (__v != 0); 
# 825
}  }  
# 826
return __bufend - __buf; 
# 827
} 
# 829
inline namespace __gnu_cxx_ldbl128 { 
# 831
template< class _CharT, class _OutIter> void 
# 834
num_put< _CharT, _OutIter> ::_M_group_int(const char *__grouping, size_t __grouping_size, _CharT __sep, ios_base &, _CharT *
# 835
__new, _CharT *__cs, int &__len) const 
# 836
{ 
# 837
_CharT *__p = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __len); 
# 839
__len = (__p - __new); 
# 840
} 
# 842
template< class _CharT, class _OutIter> 
# 843
template< class _ValueT> _OutIter 
# 846
num_put< _CharT, _OutIter> ::_M_insert_int(_OutIter __s, ios_base &__io, _CharT __fill, _ValueT 
# 847
__v) const 
# 848
{ 
# 849
using __gnu_cxx::__add_unsigned;
# 850
typedef typename __gnu_cxx::__add_unsigned< _ValueT> ::__type __unsigned_type; 
# 851
typedef __numpunct_cache< _CharT>  __cache_type; 
# 852
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 853
const locale &__loc = __io._M_getloc(); 
# 854
const __cache_type *__lc = __uc(__loc); 
# 855
const _CharT *__lit = ((__lc->_M_atoms_out)); 
# 856
const ios_base::fmtflags __flags = __io.flags(); 
# 859
const int __ilen = ((5) * sizeof(_ValueT)); 
# 860
_CharT *__cs = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __ilen)); 
# 865
const ios_base::fmtflags __basefield = (__flags & ios_base::basefield); 
# 866
const bool __dec = (__basefield != ios_base::oct) && (__basefield != ios_base::hex); 
# 868
const __unsigned_type __u = ((__v > 0) || (!__dec)) ? (__unsigned_type)__v : (-((__unsigned_type)__v)); 
# 871
int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec); 
# 872
__cs += (__ilen - __len); 
# 875
if (__lc->_M_use_grouping) 
# 876
{ 
# 879
_CharT *__cs2 = static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * (__len + 1)) * (2))); 
# 882
_M_group_int((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __io, __cs2 + 2, __cs, __len); 
# 884
__cs = (__cs2 + 2); 
# 885
}  
# 888
if (__builtin_expect(__dec, true)) 
# 889
{ 
# 891
if (__v >= 0) 
# 892
{ 
# 893
if (((bool)((__flags & ios_base::showpos))) && __gnu_cxx::__numeric_traits< _ValueT> ::__is_signed) { 
# 895
((*(--__cs)) = (__lit[__num_base::_S_oplus])), (++__len); }  
# 896
} else { 
# 898
((*(--__cs)) = (__lit[__num_base::_S_ominus])), (++__len); }  
# 899
} else { 
# 900
if (((bool)((__flags & ios_base::showbase))) && __v) 
# 901
{ 
# 902
if (__basefield == ios_base::oct) { 
# 903
((*(--__cs)) = (__lit[__num_base::_S_odigits])), (++__len); } else 
# 905
{ 
# 907
const bool __uppercase = (__flags & ios_base::uppercase); 
# 908
(*(--__cs)) = (__lit[(__num_base::_S_ox) + __uppercase]); 
# 910
(*(--__cs)) = (__lit[__num_base::_S_odigits]); 
# 911
__len += 2; 
# 912
}  
# 913
}  }  
# 916
const streamsize __w = __io.width(); 
# 917
if (__w > (static_cast< streamsize>(__len))) 
# 918
{ 
# 919
_CharT *__cs3 = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)); 
# 921
_M_pad(__fill, __w, __io, __cs3, __cs, __len); 
# 922
__cs = __cs3; 
# 923
}  
# 924
__io.width(0); 
# 928
return std::__write(__s, __cs, __len); 
# 929
} 
# 931
template< class _CharT, class _OutIter> void 
# 934
num_put< _CharT, _OutIter> ::_M_group_float(const char *__grouping, size_t __grouping_size, _CharT 
# 935
__sep, const _CharT *__p, _CharT *__new, _CharT *
# 936
__cs, int &__len) const 
# 937
{ 
# 941
const int __declen = (__p) ? __p - __cs : __len; 
# 942
_CharT *__p2 = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __declen); 
# 947
int __newlen = __p2 - __new; 
# 948
if (__p) 
# 949
{ 
# 950
char_traits< _CharT> ::copy(__p2, __p, __len - __declen); 
# 951
__newlen += (__len - __declen); 
# 952
}  
# 953
__len = __newlen; 
# 954
} 
# 966 "/usr/include/c++/4.8.2/bits/locale_facets.tcc" 3
template< class _CharT, class _OutIter> 
# 967
template< class _ValueT> _OutIter 
# 970
num_put< _CharT, _OutIter> ::_M_insert_float(_OutIter __s, ios_base &__io, _CharT __fill, char __mod, _ValueT 
# 971
__v) const 
# 972
{ 
# 973
typedef __numpunct_cache< _CharT>  __cache_type; 
# 974
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 975
const locale &__loc = __io._M_getloc(); 
# 976
const __cache_type *__lc = __uc(__loc); 
# 979
const streamsize __prec = (__io.precision() < (0)) ? 6 : __io.precision(); 
# 981
const int __max_digits = (__gnu_cxx::__numeric_traits< _ValueT> ::__digits10); 
# 985
int __len; 
# 987
char __fbuf[16]; 
# 988
__num_base::_S_format_float(__io, __fbuf, __mod); 
# 993
int __cs_size = (__max_digits * 3); 
# 994
char *__cs = static_cast< char *>(__builtin_alloca(__cs_size)); 
# 995
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v); 
# 999
if (__len >= __cs_size) 
# 1000
{ 
# 1001
__cs_size = (__len + 1); 
# 1002
__cs = (static_cast< char *>(__builtin_alloca(__cs_size))); 
# 1003
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v); 
# 1005
}  
# 1027 "/usr/include/c++/4.8.2/bits/locale_facets.tcc" 3
const ctype< _CharT>  &__ctype = use_facet< ctype< _CharT> > (__loc); 
# 1029
_CharT *__ws = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __len)); 
# 1031
(__ctype.widen(__cs, __cs + __len, __ws)); 
# 1034
_CharT *__wp = (0); 
# 1035
const char *__p = char_traits< char> ::find(__cs, __len, '.'); 
# 1036
if (__p) 
# 1037
{ 
# 1038
__wp = (__ws + (__p - __cs)); 
# 1039
(*__wp) = (__lc->_M_decimal_point); 
# 1040
}  
# 1045
if ((__lc->_M_use_grouping) && ((__wp || (__len < 3)) || (((__cs[1]) <= ('9')) && ((__cs[2]) <= ('9')) && ((__cs[1]) >= ('0')) && ((__cs[2]) >= ('0'))))) 
# 1048
{ 
# 1051
_CharT *__ws2 = static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * __len) * (2))); 
# 1054
streamsize __off = (0); 
# 1055
if (((__cs[0]) == ('-')) || ((__cs[0]) == ('+'))) 
# 1056
{ 
# 1057
__off = (1); 
# 1058
(__ws2[0]) = (__ws[0]); 
# 1059
__len -= 1; 
# 1060
}  
# 1062
_M_group_float((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __wp, __ws2 + __off, __ws + __off, __len); 
# 1065
__len += __off; 
# 1067
__ws = __ws2; 
# 1068
}  
# 1071
const streamsize __w = __io.width(); 
# 1072
if (__w > (static_cast< streamsize>(__len))) 
# 1073
{ 
# 1074
_CharT *__ws3 = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)); 
# 1076
_M_pad(__fill, __w, __io, __ws3, __ws, __len); 
# 1077
__ws = __ws3; 
# 1078
}  
# 1079
__io.width(0); 
# 1083
return std::__write(__s, __ws, __len); 
# 1084
} 
# 1086
template< class _CharT, class _OutIter> _OutIter 
# 1089
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, bool __v) const 
# 1090
{ 
# 1091
const ios_base::fmtflags __flags = __io.flags(); 
# 1092
if (((__flags & ios_base::boolalpha)) == 0) 
# 1093
{ 
# 1094
const long __l = __v; 
# 1095
__s = _M_insert_int(__s, __io, __fill, __l); 
# 1096
} else 
# 1098
{ 
# 1099
typedef __numpunct_cache< _CharT>  __cache_type; 
# 1100
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 1101
const locale &__loc = __io._M_getloc(); 
# 1102
const __cache_type *__lc = __uc(__loc); 
# 1104
const _CharT *__name = __v ? __lc->_M_truename : (__lc->_M_falsename); 
# 1106
int __len = __v ? __lc->_M_truename_size : (__lc->_M_falsename_size); 
# 1109
const streamsize __w = __io.width(); 
# 1110
if (__w > (static_cast< streamsize>(__len))) 
# 1111
{ 
# 1112
const streamsize __plen = __w - __len; 
# 1113
_CharT *__ps = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __plen)); 
# 1117
char_traits< _CharT> ::assign(__ps, __plen, __fill); 
# 1118
__io.width(0); 
# 1120
if (((__flags & ios_base::adjustfield)) == ios_base::left) 
# 1121
{ 
# 1122
__s = std::__write(__s, __name, __len); 
# 1123
__s = std::__write(__s, __ps, __plen); 
# 1124
} else 
# 1126
{ 
# 1127
__s = std::__write(__s, __ps, __plen); 
# 1128
__s = std::__write(__s, __name, __len); 
# 1129
}  
# 1130
return __s; 
# 1131
}  
# 1132
__io.width(0); 
# 1133
__s = std::__write(__s, __name, __len); 
# 1134
}  
# 1135
return __s; 
# 1136
} 
# 1138
template< class _CharT, class _OutIter> _OutIter 
# 1141
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, double __v) const 
# 1142
{ return _M_insert_float(__s, __io, __fill, ((char)0), __v); } 
# 1145
template< class _CharT, class _OutIter> _OutIter 
# 1148
num_put< _CharT, _OutIter> ::__do_put(iter_type __s, ios_base &__io, char_type __fill, double __v) const 
# 1149
{ return _M_insert_float(__s, __io, __fill, ((char)0), __v); } 
# 1152
template< class _CharT, class _OutIter> _OutIter 
# 1155
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, long double 
# 1156
__v) const 
# 1157
{ return _M_insert_float(__s, __io, __fill, 'L', __v); } 
# 1159
template< class _CharT, class _OutIter> _OutIter 
# 1162
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, const void *
# 1163
__v) const 
# 1164
{ 
# 1165
const ios_base::fmtflags __flags = __io.flags(); 
# 1166
const ios_base::fmtflags __fmt = (~((ios_base::basefield | ios_base::uppercase))); 
# 1168
__io.flags((((__flags & __fmt)) | ((ios_base::hex | ios_base::showbase)))); 
# 1172
typedef __gnu_cxx::__conditional_type< true, unsigned long, unsigned long long> ::__type _UIntPtrType; 
# 1174
__s = _M_insert_int(__s, __io, __fill, reinterpret_cast< _UIntPtrType>(__v)); 
# 1176
__io.flags(__flags); 
# 1177
return __s; 
# 1178
} 
# 1180
}
# 1189 "/usr/include/c++/4.8.2/bits/locale_facets.tcc" 3
template< class _CharT, class _Traits> void 
# 1191
__pad< _CharT, _Traits> ::_S_pad(ios_base &__io, _CharT __fill, _CharT *
# 1192
__news, const _CharT *__olds, streamsize 
# 1193
__newlen, streamsize __oldlen) 
# 1194
{ 
# 1195
const size_t __plen = static_cast< size_t>(__newlen - __oldlen); 
# 1196
const ios_base::fmtflags __adjust = ((__io.flags()) & ios_base::adjustfield); 
# 1199
if (__adjust == ios_base::left) 
# 1200
{ 
# 1201
_Traits::copy(__news, __olds, __oldlen); 
# 1202
_Traits::assign(__news + __oldlen, __plen, __fill); 
# 1203
return; 
# 1204
}  
# 1206
size_t __mod = (0); 
# 1207
if (__adjust == ios_base::internal) 
# 1208
{ 
# 1212
const locale &__loc = __io._M_getloc(); 
# 1213
const ctype< _CharT>  &__ctype = use_facet< ctype< _CharT> > (__loc); 
# 1215
if (((__ctype.widen('-')) == (__olds[0])) || ((__ctype.widen('+')) == (__olds[0]))) 
# 1217
{ 
# 1218
(__news[0]) = (__olds[0]); 
# 1219
__mod = (1); 
# 1220
++__news; 
# 1221
} else { 
# 1222
if (((__ctype.widen('0')) == (__olds[0])) && (__oldlen > (1)) && (((__ctype.widen('x')) == (__olds[1])) || ((__ctype.widen('X')) == (__olds[1])))) 
# 1226
{ 
# 1227
(__news[0]) = (__olds[0]); 
# 1228
(__news[1]) = (__olds[1]); 
# 1229
__mod = (2); 
# 1230
__news += 2; 
# 1231
}  }  
# 1233
}  
# 1234
_Traits::assign(__news, __plen, __fill); 
# 1235
_Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod); 
# 1236
} 
# 1238
template< class _CharT> _CharT *
# 1240
__add_grouping(_CharT *__s, _CharT __sep, const char *
# 1241
__gbeg, size_t __gsize, const _CharT *
# 1242
__first, const _CharT *__last) 
# 1243
{ 
# 1244
size_t __idx = (0); 
# 1245
size_t __ctr = (0); 
# 1247
while (((__last - __first) > (__gbeg[__idx])) && ((static_cast< signed char>(__gbeg[__idx])) > 0) && ((__gbeg[__idx]) != __gnu_cxx::__numeric_traits_integer< char> ::__max)) 
# 1250
{ 
# 1251
__last -= (__gbeg[__idx]); 
# 1252
(__idx < (__gsize - (1))) ? ++__idx : (++__ctr); 
# 1253
}  
# 1255
while (__first != __last) { 
# 1256
(*(__s++)) = (*(__first++)); }  
# 1258
while (__ctr--) 
# 1259
{ 
# 1260
(*(__s++)) = __sep; 
# 1261
for (char __i = __gbeg[__idx]; __i > 0; --__i) { 
# 1262
(*(__s++)) = (*(__first++)); }  
# 1263
}  
# 1265
while (__idx--) 
# 1266
{ 
# 1267
(*(__s++)) = __sep; 
# 1268
for (char __i = __gbeg[__idx]; __i > 0; --__i) { 
# 1269
(*(__s++)) = (*(__first++)); }  
# 1270
}  
# 1272
return __s; 
# 1273
} 
# 1278
extern template class numpunct< char> ;
# 1279
extern template class numpunct_byname< char> ;
# 1280
extern template class __gnu_cxx_ldbl128::num_get< char, istreambuf_iterator< char, char_traits< char> > > ;
# 1281
extern template class __gnu_cxx_ldbl128::num_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
# 1284
extern template const ctype< char>  &use_facet< ctype< char> > (const locale &);
# 1288
extern template const numpunct< char>  &use_facet< numpunct< char> > (const locale &);
# 1292
extern template const __gnu_cxx_ldbl128::num_put< char, ostreambuf_iterator< char, char_traits< char> > >  &use_facet< __gnu_cxx_ldbl128::num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 1296
extern template const __gnu_cxx_ldbl128::num_get< char, istreambuf_iterator< char, char_traits< char> > >  &use_facet< __gnu_cxx_ldbl128::num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 1300
extern template bool has_facet< ctype< char> > (const locale &) throw();
# 1304 "/usr/include/c++/4.8.2/bits/locale_facets.tcc" 3
extern template bool has_facet< numpunct< char> > (const locale &) throw();
# 1308 "/usr/include/c++/4.8.2/bits/locale_facets.tcc" 3
extern template bool has_facet< __gnu_cxx_ldbl128::num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 1312 "/usr/include/c++/4.8.2/bits/locale_facets.tcc" 3
extern template bool has_facet< __gnu_cxx_ldbl128::num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 1317 "/usr/include/c++/4.8.2/bits/locale_facets.tcc" 3
extern template class numpunct< wchar_t> ;
# 1318
extern template class numpunct_byname< wchar_t> ;
# 1319
extern template class __gnu_cxx_ldbl128::num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 1320
extern template class __gnu_cxx_ldbl128::num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 1323
extern template const ctype< wchar_t>  &use_facet< ctype< wchar_t> > (const locale &);
# 1327
extern template const numpunct< wchar_t>  &use_facet< numpunct< wchar_t> > (const locale &);
# 1331
extern template const __gnu_cxx_ldbl128::num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > >  &use_facet< __gnu_cxx_ldbl128::num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 1335
extern template const __gnu_cxx_ldbl128::num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > >  &use_facet< __gnu_cxx_ldbl128::num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 1339
extern template bool has_facet< ctype< wchar_t> > (const locale &) throw();
# 1343 "/usr/include/c++/4.8.2/bits/locale_facets.tcc" 3
extern template bool has_facet< numpunct< wchar_t> > (const locale &) throw();
# 1347 "/usr/include/c++/4.8.2/bits/locale_facets.tcc" 3
extern template bool has_facet< __gnu_cxx_ldbl128::num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 1351 "/usr/include/c++/4.8.2/bits/locale_facets.tcc" 3
extern template bool has_facet< __gnu_cxx_ldbl128::num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 1358 "/usr/include/c++/4.8.2/bits/locale_facets.tcc" 3
}
# 40 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 44
template< class _Facet> inline const _Facet &
# 46
__check_facet(const _Facet *__f) 
# 47
{ 
# 48
if (!__f) { 
# 49
__throw_bad_cast(); }  
# 50
return *__f; 
# 51
} 
# 65 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
template< class _CharT, class _Traits> 
# 66
class basic_ios : public ios_base { 
# 75
public: typedef _CharT char_type; 
# 76
typedef typename _Traits::int_type int_type; 
# 77
typedef typename _Traits::pos_type pos_type; 
# 78
typedef typename _Traits::off_type off_type; 
# 79
typedef _Traits traits_type; 
# 86
typedef ctype< _CharT>  __ctype_type; 
# 88
typedef __gnu_cxx_ldbl128::num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> >  __num_put_type; 
# 90
typedef __gnu_cxx_ldbl128::num_get< _CharT, istreambuf_iterator< _CharT, _Traits> >  __num_get_type; 
# 95
protected: basic_ostream< _CharT, _Traits>  *_M_tie; 
# 96
mutable char_type _M_fill; 
# 97
mutable bool _M_fill_init; 
# 98
basic_streambuf< _CharT, _Traits>  *_M_streambuf; 
# 101
const __ctype_type *_M_ctype; 
# 103
const __num_put_type *_M_num_put; 
# 105
const __num_get_type *_M_num_get; 
# 115
public: operator void *() const 
# 116
{ return this->fail() ? 0 : (const_cast< basic_ios *>(this)); } 
# 119 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
bool operator!() const 
# 120
{ return this->fail(); } 
# 131 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
iostate rdstate() const 
# 132
{ return _M_streambuf_state; } 
# 142 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
void clear(iostate __state = goodbit); 
# 151
void setstate(iostate __state) 
# 152
{ this->clear(((this->rdstate()) | __state)); } 
# 158
void _M_setstate(iostate __state) 
# 159
{ 
# 162
((_M_streambuf_state) |= __state); 
# 163
if (((this->exceptions()) & __state)) { 
# 164
throw; }  
# 165
} 
# 174 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
bool good() const 
# 175
{ return (this->rdstate()) == 0; } 
# 184 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
bool eof() const 
# 185
{ return (((this->rdstate()) & eofbit)) != 0; } 
# 195 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
bool fail() const 
# 196
{ return (((this->rdstate()) & ((badbit | failbit)))) != 0; } 
# 205 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
bool bad() const 
# 206
{ return (((this->rdstate()) & badbit)) != 0; } 
# 216 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
iostate exceptions() const 
# 217
{ return _M_exception; } 
# 251 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
void exceptions(iostate __except) 
# 252
{ 
# 253
(_M_exception) = __except; 
# 254
this->clear(_M_streambuf_state); 
# 255
} 
# 264
explicit basic_ios(basic_streambuf< _CharT, _Traits>  *__sb) : ios_base(), _M_tie((0)), _M_fill(), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0)) 
# 267
{ this->init(__sb); } 
# 276
virtual ~basic_ios() { } 
# 289 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
basic_ostream< _CharT, _Traits>  *tie() const 
# 290
{ return _M_tie; } 
# 301 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
basic_ostream< _CharT, _Traits>  *tie(basic_ostream< _CharT, _Traits>  *__tiestr) 
# 302
{ 
# 303
basic_ostream< _CharT, _Traits>  *__old = _M_tie; 
# 304
(_M_tie) = __tiestr; 
# 305
return __old; 
# 306
} 
# 315
basic_streambuf< _CharT, _Traits>  *rdbuf() const 
# 316
{ return _M_streambuf; } 
# 341 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
basic_streambuf< _CharT, _Traits>  *rdbuf(basic_streambuf< _CharT, _Traits>  * __sb); 
# 355 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
basic_ios &copyfmt(const basic_ios & __rhs); 
# 364
char_type fill() const 
# 365
{ 
# 366
if (!(_M_fill_init)) 
# 367
{ 
# 368
(_M_fill) = this->widen(' '); 
# 369
(_M_fill_init) = true; 
# 370
}  
# 371
return _M_fill; 
# 372
} 
# 384 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
char_type fill(char_type __ch) 
# 385
{ 
# 386
char_type __old = (this->fill()); 
# 387
(_M_fill) = __ch; 
# 388
return __old; 
# 389
} 
# 404 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
locale imbue(const locale & __loc); 
# 424 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
char narrow(char_type __c, char __dfault) const 
# 425
{ return (__check_facet(_M_ctype).narrow(__c, __dfault)); } 
# 443 "/usr/include/c++/4.8.2/bits/basic_ios.h" 3
char_type widen(char __c) const 
# 444
{ return (__check_facet(_M_ctype).widen(__c)); } 
# 454
protected: basic_ios() : ios_base(), _M_tie((0)), _M_fill(char_type()), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0)) 
# 457
{ } 
# 466
void init(basic_streambuf< _CharT, _Traits>  * __sb); 
# 469
void _M_cache_locale(const locale & __loc); 
# 470
}; 
# 473
}
# 35 "/usr/include/c++/4.8.2/bits/basic_ios.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 39
template< class _CharT, class _Traits> void 
# 41
basic_ios< _CharT, _Traits> ::clear(iostate __state) 
# 42
{ 
# 43
if ((this->rdbuf())) { 
# 44
(_M_streambuf_state) = __state; } else { 
# 46
(_M_streambuf_state) = ((__state | badbit)); }  
# 47
if (((this->exceptions()) & (this->rdstate()))) { 
# 48
__throw_ios_failure("basic_ios::clear"); }  
# 49
} 
# 51
template< class _CharT, class _Traits> basic_streambuf< _CharT, _Traits>  *
# 53
basic_ios< _CharT, _Traits> ::rdbuf(basic_streambuf< _CharT, _Traits>  *__sb) 
# 54
{ 
# 55
basic_streambuf< _CharT, _Traits>  *__old = _M_streambuf; 
# 56
(_M_streambuf) = __sb; 
# 57
this->clear(); 
# 58
return __old; 
# 59
} 
# 61
template< class _CharT, class _Traits> basic_ios< _CharT, _Traits>  &
# 63
basic_ios< _CharT, _Traits> ::copyfmt(const basic_ios &__rhs) 
# 64
{ 
# 67
if (this != (&__rhs)) 
# 68
{ 
# 73
_Words *__words = ((__rhs._M_word_size) <= _S_local_word_size) ? _M_local_word : (new _Words [__rhs._M_word_size]); 
# 77
_Callback_list *__cb = __rhs._M_callbacks; 
# 78
if (__cb) { 
# 79
__cb->_M_add_reference(); }  
# 80
this->ios_base::_M_call_callbacks(erase_event); 
# 81
if ((_M_word) != (_M_local_word)) 
# 82
{ 
# 83
delete [] (_M_word); 
# 84
(_M_word) = (0); 
# 85
}  
# 86
this->ios_base::_M_dispose_callbacks(); 
# 89
(_M_callbacks) = __cb; 
# 90
for (int __i = 0; __i < (__rhs._M_word_size); ++__i) { 
# 91
(__words[__i]) = ((__rhs._M_word)[__i]); }  
# 92
(_M_word) = __words; 
# 93
(_M_word_size) = (__rhs._M_word_size); 
# 95
this->flags(__rhs.flags()); 
# 96
this->width(__rhs.width()); 
# 97
this->precision(__rhs.precision()); 
# 98
(this->tie((__rhs.tie()))); 
# 99
(this->fill((__rhs.fill()))); 
# 100
((_M_ios_locale) = (__rhs.getloc())); 
# 101
_M_cache_locale(_M_ios_locale); 
# 103
this->ios_base::_M_call_callbacks(copyfmt_event); 
# 106
this->exceptions(__rhs.exceptions()); 
# 107
}  
# 108
return *this; 
# 109
} 
# 112
template< class _CharT, class _Traits> locale 
# 114
basic_ios< _CharT, _Traits> ::imbue(const locale &__loc) 
# 115
{ 
# 116
locale __old(this->getloc()); 
# 117
this->ios_base::imbue(__loc); 
# 118
_M_cache_locale(__loc); 
# 119
if ((this->rdbuf()) != 0) { 
# 120
((this->rdbuf())->pubimbue(__loc)); }  
# 121
return __old; 
# 122
} 
# 124
template< class _CharT, class _Traits> void 
# 126
basic_ios< _CharT, _Traits> ::init(basic_streambuf< _CharT, _Traits>  *__sb) 
# 127
{ 
# 129
this->ios_base::_M_init(); 
# 132
_M_cache_locale(_M_ios_locale); 
# 146 "/usr/include/c++/4.8.2/bits/basic_ios.tcc" 3
(_M_fill) = _CharT(); 
# 147
(_M_fill_init) = false; 
# 149
(_M_tie) = 0; 
# 150
(_M_exception) = goodbit; 
# 151
(_M_streambuf) = __sb; 
# 152
(_M_streambuf_state) = ((__sb) ? goodbit : badbit); 
# 153
} 
# 155
template< class _CharT, class _Traits> void 
# 157
basic_ios< _CharT, _Traits> ::_M_cache_locale(const locale &__loc) 
# 158
{ 
# 159
if (__builtin_expect(has_facet< __ctype_type> (__loc), true)) { 
# 160
(_M_ctype) = (&use_facet< __ctype_type> (__loc)); } else { 
# 162
(_M_ctype) = 0; }  
# 164
if (__builtin_expect(has_facet< __num_put_type> (__loc), true)) { 
# 165
(_M_num_put) = (&use_facet< __num_put_type> (__loc)); } else { 
# 167
(_M_num_put) = 0; }  
# 169
if (__builtin_expect(has_facet< __num_get_type> (__loc), true)) { 
# 170
(_M_num_get) = (&use_facet< __num_get_type> (__loc)); } else { 
# 172
(_M_num_get) = 0; }  
# 173
} 
# 178
extern template class basic_ios< char, char_traits< char> > ;
# 181
extern template class basic_ios< wchar_t, char_traits< wchar_t> > ;
# 186
}
# 41 "/usr/include/c++/4.8.2/ostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 57 "/usr/include/c++/4.8.2/ostream" 3
template< class _CharT, class _Traits> 
# 58
class basic_ostream : virtual public basic_ios< _CharT, _Traits>  { 
# 62
public: typedef _CharT char_type; 
# 63
typedef typename _Traits::int_type int_type; 
# 64
typedef typename _Traits::pos_type pos_type; 
# 65
typedef typename _Traits::off_type off_type; 
# 66
typedef _Traits traits_type; 
# 69
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 70
typedef std::basic_ios< _CharT, _Traits>  __ios_type; 
# 71
typedef basic_ostream __ostream_type; 
# 73
typedef __gnu_cxx_ldbl128::num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> >  __num_put_type; 
# 74
typedef ctype< _CharT>  __ctype_type; 
# 84 "/usr/include/c++/4.8.2/ostream" 3
explicit basic_ostream(__streambuf_type *__sb) 
# 85
{ (this->init(__sb)); } 
# 93
virtual ~basic_ostream() { } 
# 96
class sentry; 
# 97
friend class sentry; 
# 108 "/usr/include/c++/4.8.2/ostream" 3
__ostream_type &operator<<(__ostream_type &(*__pf)(__ostream_type &)) 
# 109
{ 
# 113
return __pf(*this); 
# 114
} 
# 117
__ostream_type &operator<<(__ios_type &(*__pf)(__ios_type &)) 
# 118
{ 
# 122
__pf(*this); 
# 123
return *this; 
# 124
} 
# 127
__ostream_type &operator<<(std::ios_base &(*__pf)(std::ios_base &)) 
# 128
{ 
# 132
__pf(*this); 
# 133
return *this; 
# 134
} 
# 166 "/usr/include/c++/4.8.2/ostream" 3
__ostream_type &operator<<(long __n) 
# 167
{ return _M_insert(__n); } 
# 170
__ostream_type &operator<<(unsigned long __n) 
# 171
{ return _M_insert(__n); } 
# 174
__ostream_type &operator<<(bool __n) 
# 175
{ return _M_insert(__n); } 
# 178
__ostream_type &operator<<(short __n); 
# 181
__ostream_type &operator<<(unsigned short __n) 
# 182
{ 
# 185
return _M_insert(static_cast< unsigned long>(__n)); 
# 186
} 
# 189
__ostream_type &operator<<(int __n); 
# 192
__ostream_type &operator<<(unsigned __n) 
# 193
{ 
# 196
return _M_insert(static_cast< unsigned long>(__n)); 
# 197
} 
# 201
__ostream_type &operator<<(long long __n) 
# 202
{ return _M_insert(__n); } 
# 205
__ostream_type &operator<<(unsigned long long __n) 
# 206
{ return _M_insert(__n); } 
# 220 "/usr/include/c++/4.8.2/ostream" 3
__ostream_type &operator<<(double __f) 
# 221
{ return _M_insert(__f); } 
# 224
__ostream_type &operator<<(float __f) 
# 225
{ 
# 228
return _M_insert(static_cast< double>(__f)); 
# 229
} 
# 232
__ostream_type &operator<<(long double __f) 
# 233
{ return _M_insert(__f); } 
# 245 "/usr/include/c++/4.8.2/ostream" 3
__ostream_type &operator<<(const void *__p) 
# 246
{ return _M_insert(__p); } 
# 270 "/usr/include/c++/4.8.2/ostream" 3
__ostream_type &operator<<(__streambuf_type * __sb); 
# 303 "/usr/include/c++/4.8.2/ostream" 3
__ostream_type &put(char_type __c); 
# 311
void _M_write(const char_type *__s, std::streamsize __n) 
# 312
{ 
# 313
const std::streamsize __put = ((this->rdbuf())->sputn(__s, __n)); 
# 314
if (__put != __n) { 
# 315
(this->setstate(ios_base::badbit)); }  
# 316
} 
# 335 "/usr/include/c++/4.8.2/ostream" 3
__ostream_type &write(const char_type * __s, std::streamsize __n); 
# 348 "/usr/include/c++/4.8.2/ostream" 3
__ostream_type &flush(); 
# 358 "/usr/include/c++/4.8.2/ostream" 3
pos_type tellp(); 
# 369 "/usr/include/c++/4.8.2/ostream" 3
__ostream_type &seekp(pos_type); 
# 381 "/usr/include/c++/4.8.2/ostream" 3
__ostream_type &seekp(off_type, std::ios_base::seekdir); 
# 384
protected: basic_ostream() 
# 385
{ (this->init(0)); } 
# 387
template< class _ValueT> __ostream_type &_M_insert(_ValueT __v); 
# 390
}; 
# 399 "/usr/include/c++/4.8.2/ostream" 3
template< class _CharT, class _Traits> 
# 400
class basic_ostream< _CharT, _Traits> ::sentry { 
# 403
bool _M_ok; 
# 404
basic_ostream &_M_os; 
# 419 "/usr/include/c++/4.8.2/ostream" 3
public: explicit sentry(basic_ostream & __os); 
# 428 "/usr/include/c++/4.8.2/ostream" 3
~sentry() 
# 429
{ 
# 431
if (((bool)(((_M_os).flags()) & ios_base::unitbuf)) && (!uncaught_exception())) 
# 432
{ 
# 434
if (((_M_os).rdbuf()) && ((((_M_os).rdbuf())->pubsync()) == (-1))) { 
# 435
((_M_os).setstate(ios_base::badbit)); }  
# 436
}  
# 437
} 
# 449 "/usr/include/c++/4.8.2/ostream" 3
operator bool() const 
# 450
{ return _M_ok; } 
# 451
}; 
# 469 "/usr/include/c++/4.8.2/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 471
operator<<(basic_ostream< _CharT, _Traits>  &__out, _CharT __c) 
# 472
{ return __ostream_insert(__out, &__c, 1); } 
# 474
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 476
operator<<(basic_ostream< _CharT, _Traits>  &__out, char __c) 
# 477
{ return __out << (__out.widen(__c)); } 
# 480
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 482
operator<<(basic_ostream< char, _Traits>  &__out, char __c) 
# 483
{ return __ostream_insert(__out, &__c, 1); } 
# 486
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 488
operator<<(basic_ostream< char, _Traits>  &__out, signed char __c) 
# 489
{ return __out << (static_cast< char>(__c)); } 
# 491
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 493
operator<<(basic_ostream< char, _Traits>  &__out, unsigned char __c) 
# 494
{ return __out << (static_cast< char>(__c)); } 
# 511 "/usr/include/c++/4.8.2/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 513
operator<<(basic_ostream< _CharT, _Traits>  &__out, const _CharT *__s) 
# 514
{ 
# 515
if (!__s) { 
# 516
(__out.setstate(ios_base::badbit)); } else { 
# 518
__ostream_insert(__out, __s, static_cast< streamsize>(_Traits::length(__s))); }  
# 520
return __out; 
# 521
} 
# 523
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __out, const char * __s); 
# 528
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 530
operator<<(basic_ostream< char, _Traits>  &__out, const char *__s) 
# 531
{ 
# 532
if (!__s) { 
# 533
(__out.setstate(ios_base::badbit)); } else { 
# 535
__ostream_insert(__out, __s, static_cast< streamsize>(_Traits::length(__s))); }  
# 537
return __out; 
# 538
} 
# 541
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 543
operator<<(basic_ostream< char, _Traits>  &__out, const signed char *__s) 
# 544
{ return __out << (reinterpret_cast< const char *>(__s)); } 
# 546
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 548
operator<<(basic_ostream< char, _Traits>  &__out, const unsigned char *__s) 
# 549
{ return __out << (reinterpret_cast< const char *>(__s)); } 
# 562 "/usr/include/c++/4.8.2/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 564
endl(basic_ostream< _CharT, _Traits>  &__os) 
# 565
{ return flush((__os.put((__os.widen('\n'))))); } 
# 574 "/usr/include/c++/4.8.2/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 576
ends(basic_ostream< _CharT, _Traits>  &__os) 
# 577
{ return (__os.put(_CharT())); } 
# 584
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 586
flush(basic_ostream< _CharT, _Traits>  &__os) 
# 587
{ return (__os.flush()); } 
# 610 "/usr/include/c++/4.8.2/ostream" 3
}
# 41 "/usr/include/c++/4.8.2/bits/ostream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> 
# 47
basic_ostream< _CharT, _Traits> ::sentry::sentry(basic_ostream &__os) : _M_ok(false), _M_os(__os) 
# 49
{ 
# 51
if ((__os.tie()) && (__os.good())) { 
# 52
((__os.tie())->flush()); }  
# 54
if ((__os.good())) { 
# 55
(_M_ok) = true; } else { 
# 57
(__os.setstate(ios_base::failbit)); }  
# 58
} 
# 60
template< class _CharT, class _Traits> 
# 61
template< class _ValueT> basic_ostream< _CharT, _Traits>  &
# 64
basic_ostream< _CharT, _Traits> ::_M_insert(_ValueT __v) 
# 65
{ 
# 66
sentry __cerb(*this); 
# 67
if (__cerb) 
# 68
{ 
# 69
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 70
try 
# 71
{ 
# 72
const __num_put_type &__np = __check_facet((this->_M_num_put)); 
# 73
if (((__np.put(*this, *this, (this->fill()), __v)).failed())) { 
# 74
(__err |= std::ios_base::badbit); }  
# 75
} 
# 76
catch (__cxxabiv1::__forced_unwind &) 
# 77
{ 
# 78
(this->_M_setstate(ios_base::badbit)); 
# 79
throw; 
# 80
} 
# 81
catch (...) 
# 82
{ (this->_M_setstate(ios_base::badbit)); }  
# 83
if (__err) { 
# 84
(this->setstate(__err)); }  
# 85
}  
# 86
return *this; 
# 87
} 
# 89
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 92
basic_ostream< _CharT, _Traits> ::operator<<(short __n) 
# 93
{ 
# 96
const std::ios_base::fmtflags __fmt = (this->flags()) & ios_base::basefield; 
# 97
if ((__fmt == std::ios_base::oct) || (__fmt == std::ios_base::hex)) { 
# 98
return _M_insert(static_cast< long>(static_cast< unsigned short>(__n))); } else { 
# 100
return _M_insert(static_cast< long>(__n)); }  
# 101
} 
# 103
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 106
basic_ostream< _CharT, _Traits> ::operator<<(int __n) 
# 107
{ 
# 110
const std::ios_base::fmtflags __fmt = (this->flags()) & ios_base::basefield; 
# 111
if ((__fmt == std::ios_base::oct) || (__fmt == std::ios_base::hex)) { 
# 112
return _M_insert(static_cast< long>(static_cast< unsigned>(__n))); } else { 
# 114
return _M_insert(static_cast< long>(__n)); }  
# 115
} 
# 117
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 120
basic_ostream< _CharT, _Traits> ::operator<<(__streambuf_type *__sbin) 
# 121
{ 
# 122
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 123
sentry __cerb(*this); 
# 124
if (__cerb && __sbin) 
# 125
{ 
# 126
try 
# 127
{ 
# 128
if (!__copy_streambufs(__sbin, (this->rdbuf()))) { 
# 129
(__err |= std::ios_base::failbit); }  
# 130
} 
# 131
catch (__cxxabiv1::__forced_unwind &) 
# 132
{ 
# 133
(this->_M_setstate(ios_base::badbit)); 
# 134
throw; 
# 135
} 
# 136
catch (...) 
# 137
{ (this->_M_setstate(ios_base::failbit)); }  
# 138
} else { 
# 139
if (!__sbin) { 
# 140
(__err |= std::ios_base::badbit); }  }  
# 141
if (__err) { 
# 142
(this->setstate(__err)); }  
# 143
return *this; 
# 144
} 
# 146
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 149
basic_ostream< _CharT, _Traits> ::put(char_type __c) 
# 150
{ 
# 157
sentry __cerb(*this); 
# 158
if (__cerb) 
# 159
{ 
# 160
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 161
try 
# 162
{ 
# 163
const int_type __put = ((this->rdbuf())->sputc(__c)); 
# 164
if (traits_type::eq_int_type(__put, traits_type::eof())) { 
# 165
(__err |= std::ios_base::badbit); }  
# 166
} 
# 167
catch (__cxxabiv1::__forced_unwind &) 
# 168
{ 
# 169
(this->_M_setstate(ios_base::badbit)); 
# 170
throw; 
# 171
} 
# 172
catch (...) 
# 173
{ (this->_M_setstate(ios_base::badbit)); }  
# 174
if (__err) { 
# 175
(this->setstate(__err)); }  
# 176
}  
# 177
return *this; 
# 178
} 
# 180
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 183
basic_ostream< _CharT, _Traits> ::write(const _CharT *__s, std::streamsize __n) 
# 184
{ 
# 192
sentry __cerb(*this); 
# 193
if (__cerb) 
# 194
{ 
# 195
try 
# 196
{ _M_write(__s, __n); } 
# 197
catch (__cxxabiv1::__forced_unwind &) 
# 198
{ 
# 199
(this->_M_setstate(ios_base::badbit)); 
# 200
throw; 
# 201
} 
# 202
catch (...) 
# 203
{ (this->_M_setstate(ios_base::badbit)); }  
# 204
}  
# 205
return *this; 
# 206
} 
# 208
template< class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 211
basic_ostream< _CharT, _Traits> ::flush() 
# 212
{ 
# 216
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 217
try 
# 218
{ 
# 219
if ((this->rdbuf()) && (((this->rdbuf())->pubsync()) == (-1))) { 
# 220
(__err |= std::ios_base::badbit); }  
# 221
} 
# 222
catch (__cxxabiv1::__forced_unwind &) 
# 223
{ 
# 224
(this->_M_setstate(ios_base::badbit)); 
# 225
throw; 
# 226
} 
# 227
catch (...) 
# 228
{ (this->_M_setstate(ios_base::badbit)); }  
# 229
if (__err) { 
# 230
(this->setstate(__err)); }  
# 231
return *this; 
# 232
} 
# 234
template< class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::pos_type 
# 237
basic_ostream< _CharT, _Traits> ::tellp() 
# 238
{ 
# 239
pos_type __ret = ((pos_type)(-1)); 
# 240
try 
# 241
{ 
# 242
if (!(this->fail())) { 
# 243
__ret = ((this->rdbuf())->pubseekoff(0, ios_base::cur, ios_base::out)); }  
# 244
} 
# 245
catch (__cxxabiv1::__forced_unwind &) 
# 246
{ 
# 247
(this->_M_setstate(ios_base::badbit)); 
# 248
throw; 
# 249
} 
# 250
catch (...) 
# 251
{ (this->_M_setstate(ios_base::badbit)); }  
# 252
return __ret; 
# 253
} 
# 255
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 258
basic_ostream< _CharT, _Traits> ::seekp(pos_type __pos) 
# 259
{ 
# 260
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 261
try 
# 262
{ 
# 263
if (!(this->fail())) 
# 264
{ 
# 267
const pos_type __p = ((this->rdbuf())->pubseekpos(__pos, ios_base::out)); 
# 271
if (__p == ((pos_type)((off_type)(-1)))) { 
# 272
(__err |= std::ios_base::failbit); }  
# 273
}  
# 274
} 
# 275
catch (__cxxabiv1::__forced_unwind &) 
# 276
{ 
# 277
(this->_M_setstate(ios_base::badbit)); 
# 278
throw; 
# 279
} 
# 280
catch (...) 
# 281
{ (this->_M_setstate(ios_base::badbit)); }  
# 282
if (__err) { 
# 283
(this->setstate(__err)); }  
# 284
return *this; 
# 285
} 
# 287
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 290
basic_ostream< _CharT, _Traits> ::seekp(off_type __off, std::ios_base::seekdir __dir) 
# 291
{ 
# 292
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 293
try 
# 294
{ 
# 295
if (!(this->fail())) 
# 296
{ 
# 299
const pos_type __p = ((this->rdbuf())->pubseekoff(__off, __dir, ios_base::out)); 
# 303
if (__p == ((pos_type)((off_type)(-1)))) { 
# 304
(__err |= std::ios_base::failbit); }  
# 305
}  
# 306
} 
# 307
catch (__cxxabiv1::__forced_unwind &) 
# 308
{ 
# 309
(this->_M_setstate(ios_base::badbit)); 
# 310
throw; 
# 311
} 
# 312
catch (...) 
# 313
{ (this->_M_setstate(ios_base::badbit)); }  
# 314
if (__err) { 
# 315
(this->setstate(__err)); }  
# 316
return *this; 
# 317
} 
# 319
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 321
operator<<(basic_ostream< _CharT, _Traits>  &__out, const char *__s) 
# 322
{ 
# 323
if (!__s) { 
# 324
(__out.setstate(ios_base::badbit)); } else 
# 326
{ 
# 329
const size_t __clen = char_traits< char> ::length(__s); 
# 330
try 
# 331
{ 
# 332
struct __ptr_guard { 
# 334
_CharT *__p; 
# 335
__ptr_guard(_CharT *__ip) : __p(__ip) { } 
# 336
~__ptr_guard() { delete [] (__p); } 
# 337
_CharT *__get() { return __p; } 
# 338
} __pg(new _CharT [__clen]); 
# 340
_CharT *__ws = __pg.__get(); 
# 341
for (size_t __i = (0); __i < __clen; ++__i) { 
# 342
(__ws[__i]) = (__out.widen(__s[__i])); }  
# 343
__ostream_insert(__out, __ws, __clen); 
# 344
} 
# 345
catch (__cxxabiv1::__forced_unwind &) 
# 346
{ 
# 347
(__out._M_setstate(ios_base::badbit)); 
# 348
throw; 
# 349
} 
# 350
catch (...) 
# 351
{ (__out._M_setstate(ios_base::badbit)); }  
# 352
}  
# 353
return __out; 
# 354
} 
# 359
extern template class basic_ostream< char, char_traits< char> > ;
# 360
extern template basic_ostream< char, char_traits< char> >  &endl(basic_ostream< char, char_traits< char> >  & __os);
# 361
extern template basic_ostream< char, char_traits< char> >  &ends(basic_ostream< char, char_traits< char> >  & __os);
# 362
extern template basic_ostream< char, char_traits< char> >  &flush(basic_ostream< char, char_traits< char> >  & __os);
# 363
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, char __c);
# 364
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, unsigned char __c);
# 365
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, signed char __c);
# 366
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, const char * __s);
# 367
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, const unsigned char * __s);
# 368
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, const signed char * __s);
# 370
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long __v);
# 371
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long __v);
# 372
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(bool __v);
# 374
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long long __v);
# 375
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long long __v);
# 377
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(double __v);
# 378
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long double __v);
# 379
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(const void * __v);
# 382
extern template class basic_ostream< wchar_t, char_traits< wchar_t> > ;
# 383
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &endl(basic_ostream< wchar_t, char_traits< wchar_t> >  & __os);
# 384
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &ends(basic_ostream< wchar_t, char_traits< wchar_t> >  & __os);
# 385
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &flush(basic_ostream< wchar_t, char_traits< wchar_t> >  & __os);
# 386
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & __out, wchar_t __c);
# 387
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & __out, char __c);
# 388
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & __out, const wchar_t * __s);
# 389
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & __out, const char * __s);
# 391
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long __v);
# 392
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long __v);
# 393
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(bool __v);
# 395
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long long __v);
# 396
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long long __v);
# 398
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(double __v);
# 399
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long double __v);
# 400
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(const void * __v);
# 405
}
# 41 "/usr/include/c++/4.8.2/istream" 3
namespace std __attribute((__visibility__("default"))) { 
# 57 "/usr/include/c++/4.8.2/istream" 3
template< class _CharT, class _Traits> 
# 58
class basic_istream : virtual public basic_ios< _CharT, _Traits>  { 
# 62
public: typedef _CharT char_type; 
# 63
typedef typename _Traits::int_type int_type; 
# 64
typedef typename _Traits::pos_type pos_type; 
# 65
typedef typename _Traits::off_type off_type; 
# 66
typedef _Traits traits_type; 
# 69
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 70
typedef std::basic_ios< _CharT, _Traits>  __ios_type; 
# 71
typedef basic_istream __istream_type; 
# 73
typedef __gnu_cxx_ldbl128::num_get< _CharT, istreambuf_iterator< _CharT, _Traits> >  __num_get_type; 
# 74
typedef ctype< _CharT>  __ctype_type; 
# 82
protected: std::streamsize _M_gcount; 
# 93
public: explicit basic_istream(__streambuf_type *__sb) : _M_gcount(((std::streamsize)0)) 
# 95
{ (this->init(__sb)); } 
# 103
virtual ~basic_istream() 
# 104
{ (_M_gcount) = ((std::streamsize)0); } 
# 107
class sentry; 
# 108
friend class sentry; 
# 120 "/usr/include/c++/4.8.2/istream" 3
__istream_type &operator>>(__istream_type &(*__pf)(__istream_type &)) 
# 121
{ return __pf(*this); } 
# 124
__istream_type &operator>>(__ios_type &(*__pf)(__ios_type &)) 
# 125
{ 
# 126
__pf(*this); 
# 127
return *this; 
# 128
} 
# 131
__istream_type &operator>>(std::ios_base &(*__pf)(std::ios_base &)) 
# 132
{ 
# 133
__pf(*this); 
# 134
return *this; 
# 135
} 
# 168 "/usr/include/c++/4.8.2/istream" 3
__istream_type &operator>>(bool &__n) 
# 169
{ return _M_extract(__n); } 
# 172
__istream_type &operator>>(short & __n); 
# 175
__istream_type &operator>>(unsigned short &__n) 
# 176
{ return _M_extract(__n); } 
# 179
__istream_type &operator>>(int & __n); 
# 182
__istream_type &operator>>(unsigned &__n) 
# 183
{ return _M_extract(__n); } 
# 186
__istream_type &operator>>(long &__n) 
# 187
{ return _M_extract(__n); } 
# 190
__istream_type &operator>>(unsigned long &__n) 
# 191
{ return _M_extract(__n); } 
# 195
__istream_type &operator>>(long long &__n) 
# 196
{ return _M_extract(__n); } 
# 199
__istream_type &operator>>(unsigned long long &__n) 
# 200
{ return _M_extract(__n); } 
# 214 "/usr/include/c++/4.8.2/istream" 3
__istream_type &operator>>(float &__f) 
# 215
{ return _M_extract(__f); } 
# 218
__istream_type &operator>>(double &__f) 
# 219
{ return _M_extract(__f); } 
# 222
__istream_type &operator>>(long double &__f) 
# 223
{ return _M_extract(__f); } 
# 235 "/usr/include/c++/4.8.2/istream" 3
__istream_type &operator>>(void *&__p) 
# 236
{ return _M_extract(__p); } 
# 259 "/usr/include/c++/4.8.2/istream" 3
__istream_type &operator>>(__streambuf_type * __sb); 
# 269 "/usr/include/c++/4.8.2/istream" 3
std::streamsize gcount() const 
# 270
{ return _M_gcount; } 
# 302 "/usr/include/c++/4.8.2/istream" 3
int_type get(); 
# 316 "/usr/include/c++/4.8.2/istream" 3
__istream_type &get(char_type & __c); 
# 343 "/usr/include/c++/4.8.2/istream" 3
__istream_type &get(char_type * __s, std::streamsize __n, char_type __delim); 
# 354 "/usr/include/c++/4.8.2/istream" 3
__istream_type &get(char_type *__s, std::streamsize __n) 
# 355
{ return (this->get(__s, __n, (this->widen('\n')))); } 
# 377 "/usr/include/c++/4.8.2/istream" 3
__istream_type &get(__streambuf_type & __sb, char_type __delim); 
# 387 "/usr/include/c++/4.8.2/istream" 3
__istream_type &get(__streambuf_type &__sb) 
# 388
{ return (this->get(__sb, (this->widen('\n')))); } 
# 416 "/usr/include/c++/4.8.2/istream" 3
__istream_type &getline(char_type * __s, std::streamsize __n, char_type __delim); 
# 427 "/usr/include/c++/4.8.2/istream" 3
__istream_type &getline(char_type *__s, std::streamsize __n) 
# 428
{ return (this->getline(__s, __n, (this->widen('\n')))); } 
# 451 "/usr/include/c++/4.8.2/istream" 3
__istream_type &ignore(std::streamsize __n, int_type __delim); 
# 454
__istream_type &ignore(std::streamsize __n); 
# 457
__istream_type &ignore(); 
# 468 "/usr/include/c++/4.8.2/istream" 3
int_type peek(); 
# 486 "/usr/include/c++/4.8.2/istream" 3
__istream_type &read(char_type * __s, std::streamsize __n); 
# 505 "/usr/include/c++/4.8.2/istream" 3
std::streamsize readsome(char_type * __s, std::streamsize __n); 
# 522 "/usr/include/c++/4.8.2/istream" 3
__istream_type &putback(char_type __c); 
# 538 "/usr/include/c++/4.8.2/istream" 3
__istream_type &unget(); 
# 556 "/usr/include/c++/4.8.2/istream" 3
int sync(); 
# 571 "/usr/include/c++/4.8.2/istream" 3
pos_type tellg(); 
# 586 "/usr/include/c++/4.8.2/istream" 3
__istream_type &seekg(pos_type); 
# 602 "/usr/include/c++/4.8.2/istream" 3
__istream_type &seekg(off_type, std::ios_base::seekdir); 
# 606
protected: basic_istream() : _M_gcount(((std::streamsize)0)) 
# 608
{ (this->init(0)); } 
# 610
template< class _ValueT> __istream_type &_M_extract(_ValueT & __v); 
# 613
}; 
# 619
template<> basic_istream< char, char_traits< char> >  &basic_istream< char, char_traits< char> > ::getline(char_type * __s, streamsize __n, char_type __delim); 
# 624
template<> basic_istream< char, char_traits< char> >  &basic_istream< char, char_traits< char> > ::ignore(streamsize __n); 
# 629
template<> basic_istream< char, char_traits< char> >  &basic_istream< char, char_traits< char> > ::ignore(streamsize __n, int_type __delim); 
# 635
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &basic_istream< wchar_t, char_traits< wchar_t> > ::getline(char_type * __s, streamsize __n, char_type __delim); 
# 640
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize __n); 
# 645
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize __n, int_type __delim); 
# 656 "/usr/include/c++/4.8.2/istream" 3
template< class _CharT, class _Traits> 
# 657
class basic_istream< _CharT, _Traits> ::sentry { 
# 660
bool _M_ok; 
# 664
public: typedef _Traits traits_type; 
# 665
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 666
typedef basic_istream __istream_type; 
# 667
typedef typename std::basic_istream< _CharT, _Traits> ::__ctype_type __ctype_type; 
# 668
typedef typename _Traits::int_type __int_type; 
# 693 "/usr/include/c++/4.8.2/istream" 3
explicit sentry(basic_istream & __is, bool __noskipws = false); 
# 705 "/usr/include/c++/4.8.2/istream" 3
operator bool() const 
# 706
{ return _M_ok; } 
# 707
}; 
# 721 "/usr/include/c++/4.8.2/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __in, _CharT & __c); 
# 725
template< class _Traits> inline basic_istream< char, _Traits>  &
# 727
operator>>(basic_istream< char, _Traits>  &__in, unsigned char &__c) 
# 728
{ return __in >> (reinterpret_cast< char &>(__c)); } 
# 730
template< class _Traits> inline basic_istream< char, _Traits>  &
# 732
operator>>(basic_istream< char, _Traits>  &__in, signed char &__c) 
# 733
{ return __in >> (reinterpret_cast< char &>(__c)); } 
# 763 "/usr/include/c++/4.8.2/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __in, _CharT * __s); 
# 770
template<> basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, char * __s); 
# 772
template< class _Traits> inline basic_istream< char, _Traits>  &
# 774
operator>>(basic_istream< char, _Traits>  &__in, unsigned char *__s) 
# 775
{ return __in >> (reinterpret_cast< char *>(__s)); } 
# 777
template< class _Traits> inline basic_istream< char, _Traits>  &
# 779
operator>>(basic_istream< char, _Traits>  &__in, signed char *__s) 
# 780
{ return __in >> (reinterpret_cast< char *>(__s)); } 
# 794 "/usr/include/c++/4.8.2/istream" 3
template< class _CharT, class _Traits> 
# 795
class basic_iostream : public basic_istream< _CharT, _Traits> , public basic_ostream< _CharT, _Traits>  { 
# 803
public: typedef _CharT char_type; 
# 804
typedef typename _Traits::int_type int_type; 
# 805
typedef typename _Traits::pos_type pos_type; 
# 806
typedef typename _Traits::off_type off_type; 
# 807
typedef _Traits traits_type; 
# 810
typedef std::basic_istream< _CharT, _Traits>  __istream_type; 
# 811
typedef std::basic_ostream< _CharT, _Traits>  __ostream_type; 
# 820
explicit basic_iostream(basic_streambuf< _CharT, _Traits>  *__sb) : __istream_type(__sb), __ostream_type(__sb) 
# 821
{ } 
# 827
virtual ~basic_iostream() { } 
# 830
protected: basic_iostream() : __istream_type(), __ostream_type() 
# 831
{ } 
# 832
}; 
# 854 "/usr/include/c++/4.8.2/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &ws(basic_istream< _CharT, _Traits>  & __is); 
# 880 "/usr/include/c++/4.8.2/istream" 3
}
# 41 "/usr/include/c++/4.8.2/bits/istream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> 
# 47
basic_istream< _CharT, _Traits> ::sentry::sentry(basic_istream &__in, bool __noskip) : _M_ok(false) 
# 48
{ 
# 49
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 50
if ((__in.good())) { 
# 51
try 
# 52
{ 
# 53
if ((__in.tie())) { 
# 54
((__in.tie())->flush()); }  
# 55
if ((!__noskip) && ((bool)((__in.flags()) & ios_base::skipws))) 
# 56
{ 
# 57
const __int_type __eof = traits_type::eof(); 
# 58
__streambuf_type *__sb = (__in.rdbuf()); 
# 59
__int_type __c = (__sb->sgetc()); 
# 61
const __ctype_type &__ct = __check_facet((__in._M_ctype)); 
# 62
while ((!traits_type::eq_int_type(__c, __eof)) && (__ct.is(ctype_base::space, traits_type::to_char_type(__c)))) { 
# 65
__c = (__sb->snextc()); }  
# 70
if (traits_type::eq_int_type(__c, __eof)) { 
# 71
(__err |= std::ios_base::eofbit); }  
# 72
}  
# 73
} 
# 74
catch (__cxxabiv1::__forced_unwind &) 
# 75
{ 
# 76
(__in._M_setstate(ios_base::badbit)); 
# 77
throw; 
# 78
} 
# 79
catch (...) 
# 80
{ (__in._M_setstate(ios_base::badbit)); }  }  
# 82
if ((__in.good()) && (__err == std::ios_base::goodbit)) { 
# 83
(_M_ok) = true; } else 
# 85
{ 
# 86
(__err |= std::ios_base::failbit); 
# 87
(__in.setstate(__err)); 
# 88
}  
# 89
} 
# 91
template< class _CharT, class _Traits> 
# 92
template< class _ValueT> basic_istream< _CharT, _Traits>  &
# 95
basic_istream< _CharT, _Traits> ::_M_extract(_ValueT &__v) 
# 96
{ 
# 97
sentry __cerb(*this, false); 
# 98
if (__cerb) 
# 99
{ 
# 100
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 101
try 
# 102
{ 
# 103
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 104
(__ng.get(*this, 0, *this, __err, __v)); 
# 105
} 
# 106
catch (__cxxabiv1::__forced_unwind &) 
# 107
{ 
# 108
(this->_M_setstate(ios_base::badbit)); 
# 109
throw; 
# 110
} 
# 111
catch (...) 
# 112
{ (this->_M_setstate(ios_base::badbit)); }  
# 113
if (__err) { 
# 114
(this->setstate(__err)); }  
# 115
}  
# 116
return *this; 
# 117
} 
# 119
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 122
basic_istream< _CharT, _Traits> ::operator>>(short &__n) 
# 123
{ 
# 126
sentry __cerb(*this, false); 
# 127
if (__cerb) 
# 128
{ 
# 129
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 130
try 
# 131
{ 
# 132
long __l; 
# 133
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 134
(__ng.get(*this, 0, *this, __err, __l)); 
# 138
if (__l < __gnu_cxx::__numeric_traits_integer< short> ::__min) 
# 139
{ 
# 140
(__err |= std::ios_base::failbit); 
# 141
__n = __gnu_cxx::__numeric_traits_integer< short> ::__min; 
# 142
} else { 
# 143
if (__l > __gnu_cxx::__numeric_traits_integer< short> ::__max) 
# 144
{ 
# 145
(__err |= std::ios_base::failbit); 
# 146
__n = __gnu_cxx::__numeric_traits_integer< short> ::__max; 
# 147
} else { 
# 149
__n = ((short)__l); }  }  
# 150
} 
# 151
catch (__cxxabiv1::__forced_unwind &) 
# 152
{ 
# 153
(this->_M_setstate(ios_base::badbit)); 
# 154
throw; 
# 155
} 
# 156
catch (...) 
# 157
{ (this->_M_setstate(ios_base::badbit)); }  
# 158
if (__err) { 
# 159
(this->setstate(__err)); }  
# 160
}  
# 161
return *this; 
# 162
} 
# 164
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 167
basic_istream< _CharT, _Traits> ::operator>>(int &__n) 
# 168
{ 
# 171
sentry __cerb(*this, false); 
# 172
if (__cerb) 
# 173
{ 
# 174
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 175
try 
# 176
{ 
# 177
long __l; 
# 178
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 179
(__ng.get(*this, 0, *this, __err, __l)); 
# 183
if (__l < __gnu_cxx::__numeric_traits_integer< int> ::__min) 
# 184
{ 
# 185
(__err |= std::ios_base::failbit); 
# 186
__n = __gnu_cxx::__numeric_traits_integer< int> ::__min; 
# 187
} else { 
# 188
if (__l > __gnu_cxx::__numeric_traits_integer< int> ::__max) 
# 189
{ 
# 190
(__err |= std::ios_base::failbit); 
# 191
__n = __gnu_cxx::__numeric_traits_integer< int> ::__max; 
# 192
} else { 
# 194
__n = ((int)__l); }  }  
# 195
} 
# 196
catch (__cxxabiv1::__forced_unwind &) 
# 197
{ 
# 198
(this->_M_setstate(ios_base::badbit)); 
# 199
throw; 
# 200
} 
# 201
catch (...) 
# 202
{ (this->_M_setstate(ios_base::badbit)); }  
# 203
if (__err) { 
# 204
(this->setstate(__err)); }  
# 205
}  
# 206
return *this; 
# 207
} 
# 209
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 212
basic_istream< _CharT, _Traits> ::operator>>(__streambuf_type *__sbout) 
# 213
{ 
# 214
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 215
sentry __cerb(*this, false); 
# 216
if (__cerb && __sbout) 
# 217
{ 
# 218
try 
# 219
{ 
# 220
bool __ineof; 
# 221
if (!__copy_streambufs_eof((this->rdbuf()), __sbout, __ineof)) { 
# 222
(__err |= std::ios_base::failbit); }  
# 223
if (__ineof) { 
# 224
(__err |= std::ios_base::eofbit); }  
# 225
} 
# 226
catch (__cxxabiv1::__forced_unwind &) 
# 227
{ 
# 228
(this->_M_setstate(ios_base::failbit)); 
# 229
throw; 
# 230
} 
# 231
catch (...) 
# 232
{ (this->_M_setstate(ios_base::failbit)); }  
# 233
} else { 
# 234
if (!__sbout) { 
# 235
(__err |= std::ios_base::failbit); }  }  
# 236
if (__err) { 
# 237
(this->setstate(__err)); }  
# 238
return *this; 
# 239
} 
# 241
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type 
# 244
basic_istream< _CharT, _Traits> ::get() 
# 245
{ 
# 246
const int_type __eof = traits_type::eof(); 
# 247
int_type __c = __eof; 
# 248
(_M_gcount) = (0); 
# 249
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 250
sentry __cerb(*this, true); 
# 251
if (__cerb) 
# 252
{ 
# 253
try 
# 254
{ 
# 255
__c = ((this->rdbuf())->sbumpc()); 
# 257
if (!traits_type::eq_int_type(__c, __eof)) { 
# 258
(_M_gcount) = (1); } else { 
# 260
(__err |= std::ios_base::eofbit); }  
# 261
} 
# 262
catch (__cxxabiv1::__forced_unwind &) 
# 263
{ 
# 264
(this->_M_setstate(ios_base::badbit)); 
# 265
throw; 
# 266
} 
# 267
catch (...) 
# 268
{ (this->_M_setstate(ios_base::badbit)); }  
# 269
}  
# 270
if (!(_M_gcount)) { 
# 271
(__err |= std::ios_base::failbit); }  
# 272
if (__err) { 
# 273
(this->setstate(__err)); }  
# 274
return __c; 
# 275
} 
# 277
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 280
basic_istream< _CharT, _Traits> ::get(char_type &__c) 
# 281
{ 
# 282
(_M_gcount) = (0); 
# 283
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 284
sentry __cerb(*this, true); 
# 285
if (__cerb) 
# 286
{ 
# 287
try 
# 288
{ 
# 289
const int_type __cb = ((this->rdbuf())->sbumpc()); 
# 291
if (!traits_type::eq_int_type(__cb, traits_type::eof())) 
# 292
{ 
# 293
(_M_gcount) = (1); 
# 294
__c = traits_type::to_char_type(__cb); 
# 295
} else { 
# 297
(__err |= std::ios_base::eofbit); }  
# 298
} 
# 299
catch (__cxxabiv1::__forced_unwind &) 
# 300
{ 
# 301
(this->_M_setstate(ios_base::badbit)); 
# 302
throw; 
# 303
} 
# 304
catch (...) 
# 305
{ (this->_M_setstate(ios_base::badbit)); }  
# 306
}  
# 307
if (!(_M_gcount)) { 
# 308
(__err |= std::ios_base::failbit); }  
# 309
if (__err) { 
# 310
(this->setstate(__err)); }  
# 311
return *this; 
# 312
} 
# 314
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 317
basic_istream< _CharT, _Traits> ::get(char_type *__s, std::streamsize __n, char_type __delim) 
# 318
{ 
# 319
(_M_gcount) = (0); 
# 320
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 321
sentry __cerb(*this, true); 
# 322
if (__cerb) 
# 323
{ 
# 324
try 
# 325
{ 
# 326
const int_type __idelim = traits_type::to_int_type(__delim); 
# 327
const int_type __eof = traits_type::eof(); 
# 328
__streambuf_type *__sb = (this->rdbuf()); 
# 329
int_type __c = (__sb->sgetc()); 
# 331
while ((((_M_gcount) + (1)) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim))) 
# 334
{ 
# 335
(*(__s++)) = traits_type::to_char_type(__c); 
# 336
++(_M_gcount); 
# 337
__c = (__sb->snextc()); 
# 338
}  
# 339
if (traits_type::eq_int_type(__c, __eof)) { 
# 340
(__err |= std::ios_base::eofbit); }  
# 341
} 
# 342
catch (__cxxabiv1::__forced_unwind &) 
# 343
{ 
# 344
(this->_M_setstate(ios_base::badbit)); 
# 345
throw; 
# 346
} 
# 347
catch (...) 
# 348
{ (this->_M_setstate(ios_base::badbit)); }  
# 349
}  
# 352
if (__n > (0)) { 
# 353
(*__s) = char_type(); }  
# 354
if (!(_M_gcount)) { 
# 355
(__err |= std::ios_base::failbit); }  
# 356
if (__err) { 
# 357
(this->setstate(__err)); }  
# 358
return *this; 
# 359
} 
# 361
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 364
basic_istream< _CharT, _Traits> ::get(__streambuf_type &__sb, char_type __delim) 
# 365
{ 
# 366
(_M_gcount) = (0); 
# 367
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 368
sentry __cerb(*this, true); 
# 369
if (__cerb) 
# 370
{ 
# 371
try 
# 372
{ 
# 373
const int_type __idelim = traits_type::to_int_type(__delim); 
# 374
const int_type __eof = traits_type::eof(); 
# 375
__streambuf_type *__this_sb = (this->rdbuf()); 
# 376
int_type __c = (__this_sb->sgetc()); 
# 377
char_type __c2 = traits_type::to_char_type(__c); 
# 379
while ((!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim)) && (!traits_type::eq_int_type((__sb.sputc(__c2)), __eof))) 
# 382
{ 
# 383
++(_M_gcount); 
# 384
__c = (__this_sb->snextc()); 
# 385
__c2 = traits_type::to_char_type(__c); 
# 386
}  
# 387
if (traits_type::eq_int_type(__c, __eof)) { 
# 388
(__err |= std::ios_base::eofbit); }  
# 389
} 
# 390
catch (__cxxabiv1::__forced_unwind &) 
# 391
{ 
# 392
(this->_M_setstate(ios_base::badbit)); 
# 393
throw; 
# 394
} 
# 395
catch (...) 
# 396
{ (this->_M_setstate(ios_base::badbit)); }  
# 397
}  
# 398
if (!(_M_gcount)) { 
# 399
(__err |= std::ios_base::failbit); }  
# 400
if (__err) { 
# 401
(this->setstate(__err)); }  
# 402
return *this; 
# 403
} 
# 405
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 408
basic_istream< _CharT, _Traits> ::getline(char_type *__s, std::streamsize __n, char_type __delim) 
# 409
{ 
# 410
(_M_gcount) = (0); 
# 411
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 412
sentry __cerb(*this, true); 
# 413
if (__cerb) 
# 414
{ 
# 415
try 
# 416
{ 
# 417
const int_type __idelim = traits_type::to_int_type(__delim); 
# 418
const int_type __eof = traits_type::eof(); 
# 419
__streambuf_type *__sb = (this->rdbuf()); 
# 420
int_type __c = (__sb->sgetc()); 
# 422
while ((((_M_gcount) + (1)) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim))) 
# 425
{ 
# 426
(*(__s++)) = traits_type::to_char_type(__c); 
# 427
__c = (__sb->snextc()); 
# 428
++(_M_gcount); 
# 429
}  
# 430
if (traits_type::eq_int_type(__c, __eof)) { 
# 431
(__err |= std::ios_base::eofbit); } else 
# 433
{ 
# 434
if (traits_type::eq_int_type(__c, __idelim)) 
# 435
{ 
# 436
(__sb->sbumpc()); 
# 437
++(_M_gcount); 
# 438
} else { 
# 440
(__err |= std::ios_base::failbit); }  
# 441
}  
# 442
} 
# 443
catch (__cxxabiv1::__forced_unwind &) 
# 444
{ 
# 445
(this->_M_setstate(ios_base::badbit)); 
# 446
throw; 
# 447
} 
# 448
catch (...) 
# 449
{ (this->_M_setstate(ios_base::badbit)); }  
# 450
}  
# 453
if (__n > (0)) { 
# 454
(*__s) = char_type(); }  
# 455
if (!(_M_gcount)) { 
# 456
(__err |= std::ios_base::failbit); }  
# 457
if (__err) { 
# 458
(this->setstate(__err)); }  
# 459
return *this; 
# 460
} 
# 465
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 468
basic_istream< _CharT, _Traits> ::ignore() 
# 469
{ 
# 470
(_M_gcount) = (0); 
# 471
sentry __cerb(*this, true); 
# 472
if (__cerb) 
# 473
{ 
# 474
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 475
try 
# 476
{ 
# 477
const int_type __eof = traits_type::eof(); 
# 478
__streambuf_type *__sb = (this->rdbuf()); 
# 480
if (traits_type::eq_int_type((__sb->sbumpc()), __eof)) { 
# 481
(__err |= std::ios_base::eofbit); } else { 
# 483
(_M_gcount) = (1); }  
# 484
} 
# 485
catch (__cxxabiv1::__forced_unwind &) 
# 486
{ 
# 487
(this->_M_setstate(ios_base::badbit)); 
# 488
throw; 
# 489
} 
# 490
catch (...) 
# 491
{ (this->_M_setstate(ios_base::badbit)); }  
# 492
if (__err) { 
# 493
(this->setstate(__err)); }  
# 494
}  
# 495
return *this; 
# 496
} 
# 498
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 501
basic_istream< _CharT, _Traits> ::ignore(std::streamsize __n) 
# 502
{ 
# 503
(_M_gcount) = (0); 
# 504
sentry __cerb(*this, true); 
# 505
if (__cerb && (__n > (0))) 
# 506
{ 
# 507
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 508
try 
# 509
{ 
# 510
const int_type __eof = traits_type::eof(); 
# 511
__streambuf_type *__sb = (this->rdbuf()); 
# 512
int_type __c = (__sb->sgetc()); 
# 521 "/usr/include/c++/4.8.2/bits/istream.tcc" 3
bool __large_ignore = false; 
# 522
while (true) 
# 523
{ 
# 524
while (((_M_gcount) < __n) && (!traits_type::eq_int_type(__c, __eof))) 
# 526
{ 
# 527
++(_M_gcount); 
# 528
__c = (__sb->snextc()); 
# 529
}  
# 530
if ((__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) && (!traits_type::eq_int_type(__c, __eof))) 
# 532
{ 
# 533
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__min; 
# 535
__large_ignore = true; 
# 536
} else { 
# 538
break; }  
# 539
}  
# 541
if (__large_ignore) { 
# 542
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 544
if (traits_type::eq_int_type(__c, __eof)) { 
# 545
(__err |= std::ios_base::eofbit); }  
# 546
} 
# 547
catch (__cxxabiv1::__forced_unwind &) 
# 548
{ 
# 549
(this->_M_setstate(ios_base::badbit)); 
# 550
throw; 
# 551
} 
# 552
catch (...) 
# 553
{ (this->_M_setstate(ios_base::badbit)); }  
# 554
if (__err) { 
# 555
(this->setstate(__err)); }  
# 556
}  
# 557
return *this; 
# 558
} 
# 560
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 563
basic_istream< _CharT, _Traits> ::ignore(std::streamsize __n, int_type __delim) 
# 564
{ 
# 565
(_M_gcount) = (0); 
# 566
sentry __cerb(*this, true); 
# 567
if (__cerb && (__n > (0))) 
# 568
{ 
# 569
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 570
try 
# 571
{ 
# 572
const int_type __eof = traits_type::eof(); 
# 573
__streambuf_type *__sb = (this->rdbuf()); 
# 574
int_type __c = (__sb->sgetc()); 
# 577
bool __large_ignore = false; 
# 578
while (true) 
# 579
{ 
# 580
while (((_M_gcount) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __delim))) 
# 583
{ 
# 584
++(_M_gcount); 
# 585
__c = (__sb->snextc()); 
# 586
}  
# 587
if ((__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __delim))) 
# 590
{ 
# 591
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__min; 
# 593
__large_ignore = true; 
# 594
} else { 
# 596
break; }  
# 597
}  
# 599
if (__large_ignore) { 
# 600
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 602
if (traits_type::eq_int_type(__c, __eof)) { 
# 603
(__err |= std::ios_base::eofbit); } else { 
# 604
if (traits_type::eq_int_type(__c, __delim)) 
# 605
{ 
# 606
if ((_M_gcount) < __gnu_cxx::__numeric_traits_integer< long> ::__max) { 
# 608
++(_M_gcount); }  
# 609
(__sb->sbumpc()); 
# 610
}  }  
# 611
} 
# 612
catch (__cxxabiv1::__forced_unwind &) 
# 613
{ 
# 614
(this->_M_setstate(ios_base::badbit)); 
# 615
throw; 
# 616
} 
# 617
catch (...) 
# 618
{ (this->_M_setstate(ios_base::badbit)); }  
# 619
if (__err) { 
# 620
(this->setstate(__err)); }  
# 621
}  
# 622
return *this; 
# 623
} 
# 625
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type 
# 628
basic_istream< _CharT, _Traits> ::peek() 
# 629
{ 
# 630
int_type __c = traits_type::eof(); 
# 631
(_M_gcount) = (0); 
# 632
sentry __cerb(*this, true); 
# 633
if (__cerb) 
# 634
{ 
# 635
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 636
try 
# 637
{ 
# 638
__c = ((this->rdbuf())->sgetc()); 
# 639
if (traits_type::eq_int_type(__c, traits_type::eof())) { 
# 640
(__err |= std::ios_base::eofbit); }  
# 641
} 
# 642
catch (__cxxabiv1::__forced_unwind &) 
# 643
{ 
# 644
(this->_M_setstate(ios_base::badbit)); 
# 645
throw; 
# 646
} 
# 647
catch (...) 
# 648
{ (this->_M_setstate(ios_base::badbit)); }  
# 649
if (__err) { 
# 650
(this->setstate(__err)); }  
# 651
}  
# 652
return __c; 
# 653
} 
# 655
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 658
basic_istream< _CharT, _Traits> ::read(char_type *__s, std::streamsize __n) 
# 659
{ 
# 660
(_M_gcount) = (0); 
# 661
sentry __cerb(*this, true); 
# 662
if (__cerb) 
# 663
{ 
# 664
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 665
try 
# 666
{ 
# 667
(_M_gcount) = ((this->rdbuf())->sgetn(__s, __n)); 
# 668
if ((_M_gcount) != __n) { 
# 669
(__err |= ((std::ios_base::eofbit | std::ios_base::failbit))); }  
# 670
} 
# 671
catch (__cxxabiv1::__forced_unwind &) 
# 672
{ 
# 673
(this->_M_setstate(ios_base::badbit)); 
# 674
throw; 
# 675
} 
# 676
catch (...) 
# 677
{ (this->_M_setstate(ios_base::badbit)); }  
# 678
if (__err) { 
# 679
(this->setstate(__err)); }  
# 680
}  
# 681
return *this; 
# 682
} 
# 684
template< class _CharT, class _Traits> streamsize 
# 687
basic_istream< _CharT, _Traits> ::readsome(char_type *__s, std::streamsize __n) 
# 688
{ 
# 689
(_M_gcount) = (0); 
# 690
sentry __cerb(*this, true); 
# 691
if (__cerb) 
# 692
{ 
# 693
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 694
try 
# 695
{ 
# 697
const std::streamsize __num = ((this->rdbuf())->in_avail()); 
# 698
if (__num > (0)) { 
# 699
(_M_gcount) = ((this->rdbuf())->sgetn(__s, std::min(__num, __n))); } else { 
# 700
if (__num == (-1)) { 
# 701
(__err |= std::ios_base::eofbit); }  }  
# 702
} 
# 703
catch (__cxxabiv1::__forced_unwind &) 
# 704
{ 
# 705
(this->_M_setstate(ios_base::badbit)); 
# 706
throw; 
# 707
} 
# 708
catch (...) 
# 709
{ (this->_M_setstate(ios_base::badbit)); }  
# 710
if (__err) { 
# 711
(this->setstate(__err)); }  
# 712
}  
# 713
return _M_gcount; 
# 714
} 
# 716
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 719
basic_istream< _CharT, _Traits> ::putback(char_type __c) 
# 720
{ 
# 723
(_M_gcount) = (0); 
# 725
(this->clear((this->rdstate()) & ((~std::ios_base::eofbit)))); 
# 726
sentry __cerb(*this, true); 
# 727
if (__cerb) 
# 728
{ 
# 729
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 730
try 
# 731
{ 
# 732
const int_type __eof = traits_type::eof(); 
# 733
__streambuf_type *__sb = (this->rdbuf()); 
# 734
if ((!__sb) || traits_type::eq_int_type((__sb->sputbackc(__c)), __eof)) { 
# 736
(__err |= std::ios_base::badbit); }  
# 737
} 
# 738
catch (__cxxabiv1::__forced_unwind &) 
# 739
{ 
# 740
(this->_M_setstate(ios_base::badbit)); 
# 741
throw; 
# 742
} 
# 743
catch (...) 
# 744
{ (this->_M_setstate(ios_base::badbit)); }  
# 745
if (__err) { 
# 746
(this->setstate(__err)); }  
# 747
}  
# 748
return *this; 
# 749
} 
# 751
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 754
basic_istream< _CharT, _Traits> ::unget() 
# 755
{ 
# 758
(_M_gcount) = (0); 
# 760
(this->clear((this->rdstate()) & ((~std::ios_base::eofbit)))); 
# 761
sentry __cerb(*this, true); 
# 762
if (__cerb) 
# 763
{ 
# 764
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 765
try 
# 766
{ 
# 767
const int_type __eof = traits_type::eof(); 
# 768
__streambuf_type *__sb = (this->rdbuf()); 
# 769
if ((!__sb) || traits_type::eq_int_type((__sb->sungetc()), __eof)) { 
# 771
(__err |= std::ios_base::badbit); }  
# 772
} 
# 773
catch (__cxxabiv1::__forced_unwind &) 
# 774
{ 
# 775
(this->_M_setstate(ios_base::badbit)); 
# 776
throw; 
# 777
} 
# 778
catch (...) 
# 779
{ (this->_M_setstate(ios_base::badbit)); }  
# 780
if (__err) { 
# 781
(this->setstate(__err)); }  
# 782
}  
# 783
return *this; 
# 784
} 
# 786
template< class _CharT, class _Traits> int 
# 789
basic_istream< _CharT, _Traits> ::sync() 
# 790
{ 
# 793
int __ret = (-1); 
# 794
sentry __cerb(*this, true); 
# 795
if (__cerb) 
# 796
{ 
# 797
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 798
try 
# 799
{ 
# 800
__streambuf_type *__sb = (this->rdbuf()); 
# 801
if (__sb) 
# 802
{ 
# 803
if ((__sb->pubsync()) == (-1)) { 
# 804
(__err |= std::ios_base::badbit); } else { 
# 806
__ret = 0; }  
# 807
}  
# 808
} 
# 809
catch (__cxxabiv1::__forced_unwind &) 
# 810
{ 
# 811
(this->_M_setstate(ios_base::badbit)); 
# 812
throw; 
# 813
} 
# 814
catch (...) 
# 815
{ (this->_M_setstate(ios_base::badbit)); }  
# 816
if (__err) { 
# 817
(this->setstate(__err)); }  
# 818
}  
# 819
return __ret; 
# 820
} 
# 822
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::pos_type 
# 825
basic_istream< _CharT, _Traits> ::tellg() 
# 826
{ 
# 829
pos_type __ret = ((pos_type)(-1)); 
# 830
sentry __cerb(*this, true); 
# 831
if (__cerb) 
# 832
{ 
# 833
try 
# 834
{ 
# 835
if (!(this->fail())) { 
# 836
__ret = ((this->rdbuf())->pubseekoff(0, ios_base::cur, ios_base::in)); }  
# 838
} 
# 839
catch (__cxxabiv1::__forced_unwind &) 
# 840
{ 
# 841
(this->_M_setstate(ios_base::badbit)); 
# 842
throw; 
# 843
} 
# 844
catch (...) 
# 845
{ (this->_M_setstate(ios_base::badbit)); }  
# 846
}  
# 847
return __ret; 
# 848
} 
# 850
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 853
basic_istream< _CharT, _Traits> ::seekg(pos_type __pos) 
# 854
{ 
# 858
(this->clear((this->rdstate()) & ((~std::ios_base::eofbit)))); 
# 859
sentry __cerb(*this, true); 
# 860
if (__cerb) 
# 861
{ 
# 862
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 863
try 
# 864
{ 
# 865
if (!(this->fail())) 
# 866
{ 
# 868
const pos_type __p = ((this->rdbuf())->pubseekpos(__pos, ios_base::in)); 
# 872
if (__p == ((pos_type)((off_type)(-1)))) { 
# 873
(__err |= std::ios_base::failbit); }  
# 874
}  
# 875
} 
# 876
catch (__cxxabiv1::__forced_unwind &) 
# 877
{ 
# 878
(this->_M_setstate(ios_base::badbit)); 
# 879
throw; 
# 880
} 
# 881
catch (...) 
# 882
{ (this->_M_setstate(ios_base::badbit)); }  
# 883
if (__err) { 
# 884
(this->setstate(__err)); }  
# 885
}  
# 886
return *this; 
# 887
} 
# 889
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 892
basic_istream< _CharT, _Traits> ::seekg(off_type __off, std::ios_base::seekdir __dir) 
# 893
{ 
# 897
(this->clear((this->rdstate()) & ((~std::ios_base::eofbit)))); 
# 898
sentry __cerb(*this, true); 
# 899
if (__cerb) 
# 900
{ 
# 901
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 902
try 
# 903
{ 
# 904
if (!(this->fail())) 
# 905
{ 
# 907
const pos_type __p = ((this->rdbuf())->pubseekoff(__off, __dir, ios_base::in)); 
# 911
if (__p == ((pos_type)((off_type)(-1)))) { 
# 912
(__err |= std::ios_base::failbit); }  
# 913
}  
# 914
} 
# 915
catch (__cxxabiv1::__forced_unwind &) 
# 916
{ 
# 917
(this->_M_setstate(ios_base::badbit)); 
# 918
throw; 
# 919
} 
# 920
catch (...) 
# 921
{ (this->_M_setstate(ios_base::badbit)); }  
# 922
if (__err) { 
# 923
(this->setstate(__err)); }  
# 924
}  
# 925
return *this; 
# 926
} 
# 929
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 931
operator>>(basic_istream< _CharT, _Traits>  &__in, _CharT &__c) 
# 932
{ 
# 933
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 934
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 936
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 937
if (__cerb) 
# 938
{ 
# 939
ios_base::iostate __err = ios_base::goodbit; 
# 940
try 
# 941
{ 
# 942
const __int_type __cb = ((__in.rdbuf())->sbumpc()); 
# 943
if (!_Traits::eq_int_type(__cb, _Traits::eof())) { 
# 944
__c = _Traits::to_char_type(__cb); } else { 
# 946
(__err |= ((ios_base::eofbit | ios_base::failbit))); }  
# 947
} 
# 948
catch (__cxxabiv1::__forced_unwind &) 
# 949
{ 
# 950
(__in._M_setstate(ios_base::badbit)); 
# 951
throw; 
# 952
} 
# 953
catch (...) 
# 954
{ (__in._M_setstate(ios_base::badbit)); }  
# 955
if (__err) { 
# 956
(__in.setstate(__err)); }  
# 957
}  
# 958
return __in; 
# 959
} 
# 961
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 963
operator>>(basic_istream< _CharT, _Traits>  &__in, _CharT *__s) 
# 964
{ 
# 965
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 966
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 967
typedef typename _Traits::int_type int_type; 
# 968
typedef _CharT char_type; 
# 969
typedef ctype< _CharT>  __ctype_type; 
# 971
streamsize __extracted = (0); 
# 972
ios_base::iostate __err = ios_base::goodbit; 
# 973
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 974
if (__cerb) 
# 975
{ 
# 976
try 
# 977
{ 
# 979
streamsize __num = (__in.width()); 
# 980
if (__num <= (0)) { 
# 981
__num = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 983
const __ctype_type &__ct = use_facet< ctype< _CharT> > ((__in.getloc())); 
# 985
const int_type __eof = _Traits::eof(); 
# 986
__streambuf_type *__sb = (__in.rdbuf()); 
# 987
int_type __c = (__sb->sgetc()); 
# 989
while ((__extracted < (__num - (1))) && (!_Traits::eq_int_type(__c, __eof)) && (!(__ct.is(ctype_base::space, _Traits::to_char_type(__c))))) 
# 993
{ 
# 994
(*(__s++)) = _Traits::to_char_type(__c); 
# 995
++__extracted; 
# 996
__c = (__sb->snextc()); 
# 997
}  
# 998
if (_Traits::eq_int_type(__c, __eof)) { 
# 999
(__err |= ios_base::eofbit); }  
# 1003
(*__s) = char_type(); 
# 1004
(__in.width(0)); 
# 1005
} 
# 1006
catch (__cxxabiv1::__forced_unwind &) 
# 1007
{ 
# 1008
(__in._M_setstate(ios_base::badbit)); 
# 1009
throw; 
# 1010
} 
# 1011
catch (...) 
# 1012
{ (__in._M_setstate(ios_base::badbit)); }  
# 1013
}  
# 1014
if (!__extracted) { 
# 1015
(__err |= ios_base::failbit); }  
# 1016
if (__err) { 
# 1017
(__in.setstate(__err)); }  
# 1018
return __in; 
# 1019
} 
# 1022
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1024
ws(basic_istream< _CharT, _Traits>  &__in) 
# 1025
{ 
# 1026
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1027
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 1028
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1029
typedef ctype< _CharT>  __ctype_type; 
# 1031
const __ctype_type &__ct = use_facet< ctype< _CharT> > ((__in.getloc())); 
# 1032
const __int_type __eof = _Traits::eof(); 
# 1033
__streambuf_type *__sb = (__in.rdbuf()); 
# 1034
__int_type __c = (__sb->sgetc()); 
# 1036
while ((!_Traits::eq_int_type(__c, __eof)) && (__ct.is(ctype_base::space, _Traits::to_char_type(__c)))) { 
# 1038
__c = (__sb->snextc()); }  
# 1040
if (_Traits::eq_int_type(__c, __eof)) { 
# 1041
(__in.setstate(ios_base::eofbit)); }  
# 1042
return __in; 
# 1043
} 
# 1048
extern template class basic_istream< char, char_traits< char> > ;
# 1049
extern template basic_istream< char, char_traits< char> >  &ws(basic_istream< char, char_traits< char> >  & __is);
# 1050
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, char & __c);
# 1051
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  &, char *);
# 1052
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, unsigned char & __c);
# 1053
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, signed char & __c);
# 1054
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, unsigned char * __s);
# 1055
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, signed char * __s);
# 1057
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned short & __v);
# 1058
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned & __v);
# 1059
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long & __v);
# 1060
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long & __v);
# 1061
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(bool & __v);
# 1063
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long long & __v);
# 1064
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long long & __v);
# 1066
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(float & __v);
# 1067
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(double & __v);
# 1068
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long double & __v);
# 1069
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(void *& __v);
# 1071
extern template class basic_iostream< char, char_traits< char> > ;
# 1074
extern template class basic_istream< wchar_t, char_traits< wchar_t> > ;
# 1075
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &ws(basic_istream< wchar_t, char_traits< wchar_t> >  & __is);
# 1076
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &operator>>(basic_istream< wchar_t, char_traits< wchar_t> >  & __in, wchar_t & __c);
# 1077
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &operator>>(basic_istream< wchar_t, char_traits< wchar_t> >  &, wchar_t *);
# 1079
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned short & __v);
# 1080
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned & __v);
# 1081
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long & __v);
# 1082
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long & __v);
# 1083
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(bool & __v);
# 1085
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long long & __v);
# 1086
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long long & __v);
# 1088
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(float & __v);
# 1089
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(double & __v);
# 1090
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long double & __v);
# 1091
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(void *& __v);
# 1093
extern template class basic_iostream< wchar_t, char_traits< wchar_t> > ;
# 1098
}
# 42 "/usr/include/c++/4.8.2/iostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 60 "/usr/include/c++/4.8.2/iostream" 3
extern istream cin; 
# 61
extern ostream cout; 
# 62
extern ostream cerr; 
# 63
extern ostream clog; 
# 66
extern wistream wcin; 
# 67
extern wostream wcout; 
# 68
extern wostream wcerr; 
# 69
extern wostream wclog; 
# 74
static ios_base::Init __ioinit; 
# 77
}
# 17 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode1.cuh"
namespace cuZFP { 
# 20
template< class Scalar> inline void 
# 22
gather_partial1(Scalar *q, const Scalar *p, int nx, int sx) 
# 23
{ 
# 24
uint x; 
# 25
for (x = (0); x < nx; (x++), (p += sx)) { 
# 26
(q[x]) = (*p); }  
# 27
pad_block(q, nx, 1); 
# 28
} 
# 30
template< class Scalar> inline void 
# 32
gather1(Scalar *q, const Scalar *p, int sx) 
# 33
{ 
# 34
uint x; 
# 35
for (x = (0); x < (4); (x++), (p += sx)) { 
# 36
(*(q++)) = (*p); }  
# 37
} 
# 39
template< class Scalar> static void 
# 41
__wrapper__device_stub_cudaEncode1(const uint &maxbits, const Scalar *&
# 42
scalars, Word *&
# 43
stream, const uint &
# 44
dim, const int &
# 45
sx, const uint &
# 46
padded_dim, const uint &
# 47
tot_blocks) { ::cudaLaunchKernel(0, 0, 0, 0, 0, 0);}
#if 0
# 48
{ 
# 49
typedef unsigned long long ull; 
# 50
typedef long long ll; 
# 51
const ull blockId = ((__device_builtin_variable_blockIdx.x) + ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_gridDim.x))) + (((__device_builtin_variable_gridDim.x) * (__device_builtin_variable_gridDim.y)) * (__device_builtin_variable_blockIdx.z)); 
# 57
const uint block_idx = (blockId * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 59
if (block_idx >= tot_blocks) 
# 60
{ 
# 63
return; 
# 64
}  
# 66
uint block_dim; 
# 67
block_dim = (padded_dim >> 2); 
# 70
uint block; 
# 71
block = ((block_idx % block_dim) * (4)); 
# 73
const ll offset = ((ll)block) * sx; 
# 75
Scalar fblock[4]; 
# 77
bool partial = false; 
# 78
if ((block + (4)) > dim) { partial = true; }  
# 80
if (partial) 
# 81
{ 
# 82
uint nx = (4) - (padded_dim - dim); 
# 83
gather_partial1(fblock, scalars + offset, nx, sx); 
# 84
} else 
# 86
{ 
# 87
gather1(fblock, scalars + offset, sx); 
# 88
}  
# 89
zfp_encode_block< Scalar, 4> (fblock, maxbits, block_idx, stream); 
# 90
} 
#endif
# 39 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode1.cuh"
template< class Scalar> void 
# 41
cudaEncode1(const uint maxbits, const Scalar *
# 42
scalars, Word *
# 43
stream, const uint 
# 44
dim, const int 
# 45
sx, const uint 
# 46
padded_dim, const uint 
# 47
tot_blocks) 
# 48
{__wrapper__device_stub_cudaEncode1<Scalar>(maxbits,scalars,stream,dim,sx,padded_dim,tot_blocks);
# 90
return;}
#if 0
# 48
{ 
# 49
typedef unsigned long long ull; 
# 50
typedef long long ll; 
# 51
const ull blockId = ((__device_builtin_variable_blockIdx.x) + ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_gridDim.x))) + (((__device_builtin_variable_gridDim.x) * (__device_builtin_variable_gridDim.y)) * (__device_builtin_variable_blockIdx.z)); 
# 57
const uint block_idx = (blockId * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 59
if (block_idx >= tot_blocks) 
# 60
{ 
# 63
return; 
# 64
}  
# 66
uint block_dim; 
# 67
block_dim = (padded_dim >> 2); 
# 70
uint block; 
# 71
block = ((block_idx % block_dim) * (4)); 
# 73
const ll offset = ((ll)block) * sx; 
# 75
Scalar fblock[4]; 
# 77
bool partial = false; 
# 78
if ((block + (4)) > dim) { partial = true; }  
# 80
if (partial) 
# 81
{ 
# 82
uint nx = (4) - (padded_dim - dim); 
# 83
gather_partial1(fblock, scalars + offset, nx, sx); 
# 84
} else 
# 86
{ 
# 87
gather1(fblock, scalars + offset, sx); 
# 88
}  
# 89
zfp_encode_block< Scalar, 4> (fblock, maxbits, block_idx, stream); 
# 90
} 
#endif
# 94 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode1.cuh"
template< class Scalar> size_t 
# 95
encode1launch(uint dim, int 
# 96
sx, const Scalar *
# 97
d_data, Word *
# 98
stream, const int 
# 99
maxbits) 
# 100
{ 
# 101
const int cuda_block_size = 1024; 
# 102
dim3 block_size = dim3(cuda_block_size, 1, 1); 
# 103
uint zfp_pad(dim); 
# 104
if ((zfp_pad % (4)) != (0)) { zfp_pad += ((4) - (dim % (4))); }  
# 106
const uint zfp_blocks = zfp_pad / (4); 
# 111
int block_pad = 0; 
# 112
if ((zfp_blocks % cuda_block_size) != (0)) 
# 113
{ 
# 114
block_pad = (cuda_block_size - (zfp_blocks % cuda_block_size)); 
# 115
}  
# 117
size_t total_blocks = block_pad + zfp_blocks; 
# 119
dim3 grid_size = calculate_grid_size(total_blocks, cuda_block_size); 
# 121
size_t stream_bytes = calc_device_mem1d(zfp_pad, maxbits); 
# 123
cudaMemset(stream, 0, stream_bytes); 
# 126
cudaEvent_t start, stop; 
# 127
cudaEventCreate(&start); 
# 128
cudaEventCreate(&stop); 
# 129
cudaEventRecord(start); 
# 132
(__cudaPushCallConfiguration(grid_size, block_size)) ? (void)0 : cudaEncode1< Scalar> (maxbits, d_data, stream, dim, sx, zfp_pad, zfp_blocks); 
# 142
cudaEventRecord(stop); 
# 143
cudaEventSynchronize(stop); 
# 144
cudaStreamSynchronize(0); 
# 146
float miliseconds = (0.0F); 
# 147
cudaEventElapsedTime(&miliseconds, start, stop); 
# 149
return stream_bytes; 
# 150
} 
# 155
template< class Scalar> size_t 
# 156
encode1(int dim, int 
# 157
sx, Scalar *
# 158
d_data, Word *
# 159
stream, const int 
# 160
maxbits) 
# 161
{ 
# 162
return encode1launch< Scalar> (dim, sx, d_data, stream, maxbits); 
# 163
} 
# 165
}
# 41 "/usr/include/c++/4.8.2/sstream" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/4.8.2/sstream" 3
template< class _CharT, class _Traits, class _Alloc> 
# 64
class basic_stringbuf : public basic_streambuf< _CharT, _Traits>  { 
# 68
public: typedef _CharT char_type; 
# 69
typedef _Traits traits_type; 
# 72
typedef _Alloc allocator_type; 
# 73
typedef typename _Traits::int_type int_type; 
# 74
typedef typename _Traits::pos_type pos_type; 
# 75
typedef typename _Traits::off_type off_type; 
# 77
typedef std::basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 78
typedef basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 79
typedef typename basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 83
protected: std::ios_base::openmode _M_mode; 
# 86
__string_type _M_string; 
# 98 "/usr/include/c++/4.8.2/sstream" 3
public: explicit basic_stringbuf(std::ios_base::openmode __mode = (std::ios_base::in | std::ios_base::out)) : __streambuf_type(), _M_mode(__mode), _M_string() 
# 100
{ } 
# 111 "/usr/include/c++/4.8.2/sstream" 3
explicit basic_stringbuf(const __string_type &__str, std::ios_base::openmode 
# 112
__mode = (std::ios_base::in | std::ios_base::out)) : __streambuf_type(), _M_mode(), _M_string((__str.data()), (__str.size())) 
# 114
{ _M_stringbuf_init(__mode); } 
# 126 "/usr/include/c++/4.8.2/sstream" 3
__string_type str() const 
# 127
{ 
# 128
__string_type __ret; 
# 129
if ((this->pptr())) 
# 130
{ 
# 132
if ((this->pptr()) > (this->egptr())) { 
# 133
__ret = __string_type((this->pbase()), (this->pptr())); } else { 
# 135
__ret = __string_type((this->pbase()), (this->egptr())); }  
# 136
} else { 
# 138
__ret = (_M_string); }  
# 139
return __ret; 
# 140
} 
# 150 "/usr/include/c++/4.8.2/sstream" 3
void str(const __string_type &__s) 
# 151
{ 
# 153
((_M_string).assign((__s.data()), (__s.size()))); 
# 154
_M_stringbuf_init(_M_mode); 
# 155
} 
# 160
protected: void _M_stringbuf_init(std::ios_base::openmode __mode) 
# 161
{ 
# 162
(_M_mode) = __mode; 
# 163
__size_type __len = (0); 
# 164
if (((_M_mode) & ((std::ios_base::ate | std::ios_base::app)))) { 
# 165
__len = ((_M_string).size()); }  
# 166
_M_sync(const_cast< char_type *>(((_M_string).data())), 0, __len); 
# 167
} 
# 170
virtual std::streamsize showmanyc() 
# 171
{ 
# 172
std::streamsize __ret = (-1); 
# 173
if (((_M_mode) & std::ios_base::in)) 
# 174
{ 
# 175
_M_update_egptr(); 
# 176
__ret = ((this->egptr()) - (this->gptr())); 
# 177
}  
# 178
return __ret; 
# 179
} 
# 182
virtual int_type underflow(); 
# 185
virtual int_type pbackfail(int_type __c = traits_type::eof()); 
# 188
virtual int_type overflow(int_type __c = traits_type::eof()); 
# 202 "/usr/include/c++/4.8.2/sstream" 3
virtual __streambuf_type *setbuf(char_type *__s, std::streamsize __n) 
# 203
{ 
# 204
if (__s && (__n >= (0))) 
# 205
{ 
# 212
((_M_string).clear()); 
# 215
_M_sync(__s, __n, 0); 
# 216
}  
# 217
return this; 
# 218
} 
# 221
virtual pos_type seekoff(off_type __off, std::ios_base::seekdir __way, std::ios_base::openmode __mode = (std::ios_base::in | std::ios_base::out)); 
# 225
virtual pos_type seekpos(pos_type __sp, std::ios_base::openmode __mode = (std::ios_base::in | std::ios_base::out)); 
# 232
void _M_sync(char_type * __base, __size_type __i, __size_type __o); 
# 237
void _M_update_egptr() 
# 238
{ 
# 239
const bool __testin = ((_M_mode) & std::ios_base::in); 
# 240
if ((this->pptr()) && ((this->pptr()) > (this->egptr()))) 
# 241
{ 
# 242
if (__testin) { 
# 243
(this->setg((this->eback()), (this->gptr()), (this->pptr()))); } else { 
# 245
(this->setg((this->pptr()), (this->pptr()), (this->pptr()))); }  
# 246
}  
# 247
} 
# 252
void _M_pbump(char_type * __pbeg, char_type * __pend, off_type __off); 
# 253
}; 
# 271 "/usr/include/c++/4.8.2/sstream" 3
template< class _CharT, class _Traits, class _Alloc> 
# 272
class basic_istringstream : public basic_istream< _CharT, _Traits>  { 
# 276
public: typedef _CharT char_type; 
# 277
typedef _Traits traits_type; 
# 280
typedef _Alloc allocator_type; 
# 281
typedef typename _Traits::int_type int_type; 
# 282
typedef typename _Traits::pos_type pos_type; 
# 283
typedef typename _Traits::off_type off_type; 
# 286
typedef basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 287
typedef basic_stringbuf< _CharT, _Traits, _Alloc>  __stringbuf_type; 
# 288
typedef std::basic_istream< _CharT, _Traits>  __istream_type; 
# 291
private: __stringbuf_type _M_stringbuf; 
# 308 "/usr/include/c++/4.8.2/sstream" 3
public: explicit basic_istringstream(std::ios_base::openmode __mode = ios_base::in) : __istream_type(), _M_stringbuf((__mode | std::ios_base::in)) 
# 310
{ (this->init(&(_M_stringbuf))); } 
# 326 "/usr/include/c++/4.8.2/sstream" 3
explicit basic_istringstream(const __string_type &__str, std::ios_base::openmode 
# 327
__mode = ios_base::in) : __istream_type(), _M_stringbuf(__str, (__mode | std::ios_base::in)) 
# 329
{ (this->init(&(_M_stringbuf))); } 
# 337
~basic_istringstream() 
# 338
{ } 
# 348 "/usr/include/c++/4.8.2/sstream" 3
__stringbuf_type *rdbuf() const 
# 349
{ return const_cast< __stringbuf_type *>(&(_M_stringbuf)); } 
# 356
__string_type str() const 
# 357
{ return ((_M_stringbuf).str()); } 
# 366
void str(const __string_type &__s) 
# 367
{ ((_M_stringbuf).str(__s)); } 
# 368
}; 
# 386 "/usr/include/c++/4.8.2/sstream" 3
template< class _CharT, class _Traits, class _Alloc> 
# 387
class basic_ostringstream : public basic_ostream< _CharT, _Traits>  { 
# 391
public: typedef _CharT char_type; 
# 392
typedef _Traits traits_type; 
# 395
typedef _Alloc allocator_type; 
# 396
typedef typename _Traits::int_type int_type; 
# 397
typedef typename _Traits::pos_type pos_type; 
# 398
typedef typename _Traits::off_type off_type; 
# 401
typedef basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 402
typedef basic_stringbuf< _CharT, _Traits, _Alloc>  __stringbuf_type; 
# 403
typedef std::basic_ostream< _CharT, _Traits>  __ostream_type; 
# 406
private: __stringbuf_type _M_stringbuf; 
# 423 "/usr/include/c++/4.8.2/sstream" 3
public: explicit basic_ostringstream(std::ios_base::openmode __mode = ios_base::out) : __ostream_type(), _M_stringbuf((__mode | std::ios_base::out)) 
# 425
{ (this->init(&(_M_stringbuf))); } 
# 441 "/usr/include/c++/4.8.2/sstream" 3
explicit basic_ostringstream(const __string_type &__str, std::ios_base::openmode 
# 442
__mode = ios_base::out) : __ostream_type(), _M_stringbuf(__str, (__mode | std::ios_base::out)) 
# 444
{ (this->init(&(_M_stringbuf))); } 
# 452
~basic_ostringstream() 
# 453
{ } 
# 463 "/usr/include/c++/4.8.2/sstream" 3
__stringbuf_type *rdbuf() const 
# 464
{ return const_cast< __stringbuf_type *>(&(_M_stringbuf)); } 
# 471
__string_type str() const 
# 472
{ return ((_M_stringbuf).str()); } 
# 481
void str(const __string_type &__s) 
# 482
{ ((_M_stringbuf).str(__s)); } 
# 483
}; 
# 501 "/usr/include/c++/4.8.2/sstream" 3
template< class _CharT, class _Traits, class _Alloc> 
# 502
class basic_stringstream : public basic_iostream< _CharT, _Traits>  { 
# 506
public: typedef _CharT char_type; 
# 507
typedef _Traits traits_type; 
# 510
typedef _Alloc allocator_type; 
# 511
typedef typename _Traits::int_type int_type; 
# 512
typedef typename _Traits::pos_type pos_type; 
# 513
typedef typename _Traits::off_type off_type; 
# 516
typedef basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 517
typedef basic_stringbuf< _CharT, _Traits, _Alloc>  __stringbuf_type; 
# 518
typedef std::basic_iostream< _CharT, _Traits>  __iostream_type; 
# 521
private: __stringbuf_type _M_stringbuf; 
# 537 "/usr/include/c++/4.8.2/sstream" 3
public: explicit basic_stringstream(std::ios_base::openmode __m = (std::ios_base::out | std::ios_base::in)) : __iostream_type(), _M_stringbuf(__m) 
# 539
{ (this->init(&(_M_stringbuf))); } 
# 553 "/usr/include/c++/4.8.2/sstream" 3
explicit basic_stringstream(const __string_type &__str, std::ios_base::openmode 
# 554
__m = (std::ios_base::out | std::ios_base::in)) : __iostream_type(), _M_stringbuf(__str, __m) 
# 556
{ (this->init(&(_M_stringbuf))); } 
# 564
~basic_stringstream() 
# 565
{ } 
# 575 "/usr/include/c++/4.8.2/sstream" 3
__stringbuf_type *rdbuf() const 
# 576
{ return const_cast< __stringbuf_type *>(&(_M_stringbuf)); } 
# 583
__string_type str() const 
# 584
{ return ((_M_stringbuf).str()); } 
# 593
void str(const __string_type &__s) 
# 594
{ ((_M_stringbuf).str(__s)); } 
# 595
}; 
# 598
}
# 39 "/usr/include/c++/4.8.2/bits/sstream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _CharT, class _Traits, class _Alloc> typename basic_stringbuf< _CharT, _Traits, _Alloc> ::int_type 
# 46
basic_stringbuf< _CharT, _Traits, _Alloc> ::pbackfail(int_type __c) 
# 47
{ 
# 48
int_type __ret = traits_type::eof(); 
# 49
if ((this->eback()) < (this->gptr())) 
# 50
{ 
# 53
const bool __testeof = traits_type::eq_int_type(__c, __ret); 
# 54
if (!__testeof) 
# 55
{ 
# 56
const bool __testeq = traits_type::eq(traits_type::to_char_type(__c), (this->gptr())[-1]); 
# 59
const bool __testout = (this->_M_mode) & ios_base::out; 
# 60
if (__testeq || __testout) 
# 61
{ 
# 62
(this->gbump(-1)); 
# 63
if (!__testeq) { 
# 64
(*(this->gptr())) = traits_type::to_char_type(__c); }  
# 65
__ret = __c; 
# 66
}  
# 67
} else 
# 69
{ 
# 70
(this->gbump(-1)); 
# 71
__ret = traits_type::not_eof(__c); 
# 72
}  
# 73
}  
# 74
return __ret; 
# 75
} 
# 77
template< class _CharT, class _Traits, class _Alloc> typename basic_stringbuf< _CharT, _Traits, _Alloc> ::int_type 
# 80
basic_stringbuf< _CharT, _Traits, _Alloc> ::overflow(int_type __c) 
# 81
{ 
# 82
const bool __testout = (this->_M_mode) & ios_base::out; 
# 83
if (__builtin_expect(!__testout, false)) { 
# 84
return traits_type::eof(); }  
# 86
const bool __testeof = traits_type::eq_int_type(__c, traits_type::eof()); 
# 87
if (__builtin_expect(__testeof, false)) { 
# 88
return traits_type::not_eof(__c); }  
# 90
const __size_type __capacity = ((_M_string).capacity()); 
# 91
const __size_type __max_size = ((_M_string).max_size()); 
# 92
const bool __testput = (this->pptr()) < (this->epptr()); 
# 93
if (__builtin_expect((!__testput) && (__capacity == __max_size), false)) { 
# 94
return traits_type::eof(); }  
# 98
const char_type __conv = traits_type::to_char_type(__c); 
# 99
if (!__testput) 
# 100
{ 
# 110 "/usr/include/c++/4.8.2/bits/sstream.tcc" 3
const __size_type __opt_len = std::max((__size_type)(2 * __capacity), (__size_type)512); 
# 112
const __size_type __len = std::min(__opt_len, __max_size); 
# 113
__string_type __tmp; 
# 114
(__tmp.reserve(__len)); 
# 115
if ((this->pbase())) { 
# 116
(__tmp.assign((this->pbase()), (this->epptr()) - (this->pbase()))); }  
# 117
(__tmp.push_back(__conv)); 
# 118
((_M_string).swap(__tmp)); 
# 119
_M_sync(const_cast< char_type *>(((_M_string).data())), (this->gptr()) - (this->eback()), (this->pptr()) - (this->pbase())); 
# 121
} else { 
# 123
(*(this->pptr())) = __conv; }  
# 124
(this->pbump(1)); 
# 125
return __c; 
# 126
} 
# 128
template< class _CharT, class _Traits, class _Alloc> typename basic_stringbuf< _CharT, _Traits, _Alloc> ::int_type 
# 131
basic_stringbuf< _CharT, _Traits, _Alloc> ::underflow() 
# 132
{ 
# 133
int_type __ret = traits_type::eof(); 
# 134
const bool __testin = (this->_M_mode) & ios_base::in; 
# 135
if (__testin) 
# 136
{ 
# 138
_M_update_egptr(); 
# 140
if ((this->gptr()) < (this->egptr())) { 
# 141
__ret = traits_type::to_int_type(*(this->gptr())); }  
# 142
}  
# 143
return __ret; 
# 144
} 
# 146
template< class _CharT, class _Traits, class _Alloc> typename basic_stringbuf< _CharT, _Traits, _Alloc> ::pos_type 
# 149
basic_stringbuf< _CharT, _Traits, _Alloc> ::seekoff(off_type __off, std::ios_base::seekdir __way, std::ios_base::openmode __mode) 
# 150
{ 
# 151
pos_type __ret = ((pos_type)((off_type)(-1))); 
# 152
bool __testin = ((ios_base::in & (this->_M_mode)) & __mode) != 0; 
# 153
bool __testout = ((ios_base::out & (this->_M_mode)) & __mode) != 0; 
# 154
const bool __testboth = __testin && __testout && (__way != std::ios_base::cur); 
# 155
__testin &= (!((__mode & std::ios_base::out))); 
# 156
__testout &= (!((__mode & std::ios_base::in))); 
# 160
const char_type *__beg = __testin ? (this->eback()) : (this->pbase()); 
# 161
if ((__beg || (!__off)) && ((__testin || __testout) || __testboth)) 
# 162
{ 
# 163
_M_update_egptr(); 
# 165
off_type __newoffi = __off; 
# 166
off_type __newoffo = __newoffi; 
# 167
if (__way == std::ios_base::cur) 
# 168
{ 
# 169
__newoffi += ((this->gptr()) - __beg); 
# 170
__newoffo += ((this->pptr()) - __beg); 
# 171
} else { 
# 172
if (__way == std::ios_base::end) { 
# 173
__newoffo = (__newoffi += ((this->egptr()) - __beg)); }  }  
# 175
if ((__testin || __testboth) && (__newoffi >= 0) && (((this->egptr()) - __beg) >= __newoffi)) 
# 178
{ 
# 179
(this->setg((this->eback()), (this->eback()) + __newoffi, (this->egptr()))); 
# 181
__ret = ((pos_type)__newoffi); 
# 182
}  
# 183
if ((__testout || __testboth) && (__newoffo >= 0) && (((this->egptr()) - __beg) >= __newoffo)) 
# 186
{ 
# 187
_M_pbump((this->pbase()), (this->epptr()), __newoffo); 
# 188
__ret = ((pos_type)__newoffo); 
# 189
}  
# 190
}  
# 191
return __ret; 
# 192
} 
# 194
template< class _CharT, class _Traits, class _Alloc> typename basic_stringbuf< _CharT, _Traits, _Alloc> ::pos_type 
# 197
basic_stringbuf< _CharT, _Traits, _Alloc> ::seekpos(pos_type __sp, std::ios_base::openmode __mode) 
# 198
{ 
# 199
pos_type __ret = ((pos_type)((off_type)(-1))); 
# 200
const bool __testin = ((ios_base::in & (this->_M_mode)) & __mode) != 0; 
# 201
const bool __testout = ((ios_base::out & (this->_M_mode)) & __mode) != 0; 
# 203
const char_type *__beg = __testin ? (this->eback()) : (this->pbase()); 
# 204
if ((__beg || (!((off_type)__sp))) && (__testin || __testout)) 
# 205
{ 
# 206
_M_update_egptr(); 
# 208
const off_type __pos(__sp); 
# 209
const bool __testpos = (0 <= __pos) && (__pos <= ((this->egptr()) - __beg)); 
# 211
if (__testpos) 
# 212
{ 
# 213
if (__testin) { 
# 214
(this->setg((this->eback()), (this->eback()) + __pos, (this->egptr()))); }  
# 216
if (__testout) { 
# 217
_M_pbump((this->pbase()), (this->epptr()), __pos); }  
# 218
__ret = __sp; 
# 219
}  
# 220
}  
# 221
return __ret; 
# 222
} 
# 224
template< class _CharT, class _Traits, class _Alloc> void 
# 227
basic_stringbuf< _CharT, _Traits, _Alloc> ::_M_sync(char_type *__base, __size_type __i, __size_type __o) 
# 228
{ 
# 229
const bool __testin = ((_M_mode) & std::ios_base::in); 
# 230
const bool __testout = ((_M_mode) & std::ios_base::out); 
# 231
char_type *__endg = __base + ((_M_string).size()); 
# 232
char_type *__endp = __base + ((_M_string).capacity()); 
# 234
if (__base != ((_M_string).data())) 
# 235
{ 
# 237
__endg += __i; 
# 238
__i = 0; 
# 239
__endp = __endg; 
# 240
}  
# 242
if (__testin) { 
# 243
(this->setg(__base, __base + __i, __endg)); }  
# 244
if (__testout) 
# 245
{ 
# 246
_M_pbump(__base, __endp, __o); 
# 250
if (!__testin) { 
# 251
(this->setg(__endg, __endg, __endg)); }  
# 252
}  
# 253
} 
# 255
template< class _CharT, class _Traits, class _Alloc> void 
# 258
basic_stringbuf< _CharT, _Traits, _Alloc> ::_M_pbump(char_type *__pbeg, char_type *__pend, off_type __off) 
# 259
{ 
# 260
(this->setp(__pbeg, __pend)); 
# 261
while (__off > __gnu_cxx::__numeric_traits< int> ::__max) 
# 262
{ 
# 263
(this->pbump(__gnu_cxx::__numeric_traits< int> ::__max)); 
# 264
__off -= __gnu_cxx::__numeric_traits< int> ::__max; 
# 265
}  
# 266
(this->pbump(__off)); 
# 267
} 
# 272
extern template class basic_stringbuf< char, char_traits< char> , allocator< char> > ;
# 273
extern template class basic_istringstream< char, char_traits< char> , allocator< char> > ;
# 274
extern template class basic_ostringstream< char, char_traits< char> , allocator< char> > ;
# 275
extern template class basic_stringstream< char, char_traits< char> , allocator< char> > ;
# 278
extern template class basic_stringbuf< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 279
extern template class basic_istringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 280
extern template class basic_ostringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 281
extern template class basic_stringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 286
}
# 7 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/ErrorCheck.h"
using std::stringstream;
# 8
class ErrorCheck { 
# 11
public: ErrorCheck() 
# 12
{ 
# 14
} 
# 16
void chk(std::string msg) 
# 17
{ 
# 18
(error) = cudaGetLastError(); 
# 19
if ((error) != (cudaSuccess)) 
# 20
{ 
# 21
(((((std::cout << msg)) << (" : "))) << (error)); 
# 22
(((((std::cout << (" "))) << (cudaGetErrorString(error)))) << (std::endl)); 
# 23
}  
# 24
} 
# 26
void chk() 
# 27
{ 
# 28
this->chk((str).str()); 
# 29
(str).str(""); 
# 30
} 
# 31
cudaError error; 
# 32
std::stringstream str; 
# 33
}; 
# 12 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode2.cuh"
namespace cuZFP { 
# 15
template< class Scalar> inline void 
# 17
gather_partial2(Scalar *q, const Scalar *p, int nx, int ny, int sx, int sy) 
# 18
{ 
# 19
uint x, y; 
# 20
for (y = (0); y < ny; (y++), (p += (sy - (nx * sx)))) { 
# 21
for (x = (0); x < nx; (x++), (p += sx)) { 
# 22
(q[((4) * y) + x]) = (*p); }  
# 23
pad_block(q + ((4) * y), nx, 1); 
# 24
}  
# 25
for (x = (0); x < (4); x++) { 
# 26
pad_block(q + x, ny, 4); }  
# 27
} 
# 29
template< class Scalar> inline void 
# 31
gather2(Scalar *q, const Scalar *p, int sx, int sy) 
# 32
{ 
# 33
uint x, y; 
# 34
for (y = (0); y < (4); (y++), (p += (sy - (4 * sx)))) { 
# 35
for (x = (0); x < (4); (x++), (p += sx)) { 
# 36
(*(q++)) = (*p); }  }  
# 37
} 
# 39
template< class Scalar> static void 
# 42
__wrapper__device_stub_cudaEncode2(const uint &maxbits, const Scalar *&
# 43
scalars, Word *&
# 44
stream, const uint2 &
# 45
dims, const int2 &
# 46
stride, const uint2 &
# 47
padded_dims, const uint &
# 48
tot_blocks) { ::cudaLaunchKernel(0, 0, 0, 0, 0, 0);}
#if 0
# 49
{ 
# 51
typedef unsigned long long ull; 
# 52
typedef long long ll; 
# 53
const ull blockId = ((__device_builtin_variable_blockIdx.x) + ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_gridDim.x))) + (((__device_builtin_variable_gridDim.x) * (__device_builtin_variable_gridDim.y)) * (__device_builtin_variable_blockIdx.z)); 
# 59
const uint block_idx = (blockId * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 61
if (block_idx >= tot_blocks) 
# 62
{ 
# 65
return; 
# 66
}  
# 68
uint2 block_dims; 
# 69
(block_dims.x) = ((padded_dims.x) >> 2); 
# 70
(block_dims.y) = ((padded_dims.y) >> 2); 
# 73
uint2 block; 
# 74
(block.x) = ((block_idx % (block_dims.x)) * (4)); 
# 75
(block.y) = (((block_idx / (block_dims.x)) % (block_dims.y)) * (4)); 
# 77
const ll offset = (((ll)(block.x)) * (stride.x)) + (((ll)(block.y)) * (stride.y)); 
# 79
Scalar fblock[16]; 
# 81
bool partial = false; 
# 82
if (((block.x) + (4)) > (dims.x)) { partial = true; }  
# 83
if (((block.y) + (4)) > (dims.y)) { partial = true; }  
# 85
if (partial) 
# 86
{ 
# 87
const uint nx = (((block.x) + (4)) > (dims.x)) ? (dims.x) - (block.x) : (4); 
# 88
const uint ny = (((block.y) + (4)) > (dims.y)) ? (dims.y) - (block.y) : (4); 
# 89
gather_partial2(fblock, scalars + offset, nx, ny, stride.x, stride.y); 
# 91
} else 
# 93
{ 
# 94
gather2(fblock, scalars + offset, stride.x, stride.y); 
# 95
}  
# 99
} 
#endif
# 39 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode2.cuh"
template< class Scalar> void 
# 42
cudaEncode2(const uint maxbits, const Scalar *
# 43
scalars, Word *
# 44
stream, const uint2 
# 45
dims, const int2 
# 46
stride, const uint2 
# 47
padded_dims, const uint 
# 48
tot_blocks) 
# 49
{__wrapper__device_stub_cudaEncode2<Scalar>(maxbits,scalars,stream,dims,stride,padded_dims,tot_blocks);
# 99
return;}
#if 0
# 49
{ 
# 51
typedef unsigned long long ull; 
# 52
typedef long long ll; 
# 53
const ull blockId = ((__device_builtin_variable_blockIdx.x) + ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_gridDim.x))) + (((__device_builtin_variable_gridDim.x) * (__device_builtin_variable_gridDim.y)) * (__device_builtin_variable_blockIdx.z)); 
# 59
const uint block_idx = (blockId * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 61
if (block_idx >= tot_blocks) 
# 62
{ 
# 65
return; 
# 66
}  
# 68
uint2 block_dims; 
# 69
(block_dims.x) = ((padded_dims.x) >> 2); 
# 70
(block_dims.y) = ((padded_dims.y) >> 2); 
# 73
uint2 block; 
# 74
(block.x) = ((block_idx % (block_dims.x)) * (4)); 
# 75
(block.y) = (((block_idx / (block_dims.x)) % (block_dims.y)) * (4)); 
# 77
const ll offset = (((ll)(block.x)) * (stride.x)) + (((ll)(block.y)) * (stride.y)); 
# 79
Scalar fblock[16]; 
# 81
bool partial = false; 
# 82
if (((block.x) + (4)) > (dims.x)) { partial = true; }  
# 83
if (((block.y) + (4)) > (dims.y)) { partial = true; }  
# 85
if (partial) 
# 86
{ 
# 87
const uint nx = (((block.x) + (4)) > (dims.x)) ? (dims.x) - (block.x) : (4); 
# 88
const uint ny = (((block.y) + (4)) > (dims.y)) ? (dims.y) - (block.y) : (4); 
# 89
gather_partial2(fblock, scalars + offset, nx, ny, stride.x, stride.y); 
# 91
} else 
# 93
{ 
# 94
gather2(fblock, scalars + offset, stride.x, stride.y); 
# 95
}  
# 99
} 
#endif
# 104 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode2.cuh"
template< class Scalar> size_t 
# 105
encode2launch(uint2 dims, int2 
# 106
stride, const Scalar *
# 107
d_data, Word *
# 108
stream, const int 
# 109
maxbits) 
# 110
{ 
# 111
const int cuda_block_size = 128; 
# 112
dim3 block_size = dim3(cuda_block_size, 1, 1); 
# 114
uint2 zfp_pad(dims); 
# 115
if (((zfp_pad.x) % (4)) != (0)) { (zfp_pad.x) += ((4) - ((dims.x) % (4))); }  
# 116
if (((zfp_pad.y) % (4)) != (0)) { (zfp_pad.y) += ((4) - ((dims.y) % (4))); }  
# 118
const uint zfp_blocks = ((zfp_pad.x) * (zfp_pad.y)) / (16); 
# 124
int block_pad = 0; 
# 125
if ((zfp_blocks % cuda_block_size) != (0)) 
# 126
{ 
# 127
block_pad = (cuda_block_size - (zfp_blocks % cuda_block_size)); 
# 128
}  
# 130
size_t total_blocks = block_pad + zfp_blocks; 
# 132
dim3 grid_size = calculate_grid_size(total_blocks, cuda_block_size); 
# 135
size_t stream_bytes = calc_device_mem2d(zfp_pad, maxbits); 
# 137
cudaMemset(stream, 0, stream_bytes); 
# 140
cudaEvent_t start, stop; 
# 141
cudaEventCreate(&start); 
# 142
cudaEventCreate(&stop); 
# 143
cudaEventRecord(start); 
# 146
(__cudaPushCallConfiguration(grid_size, block_size)) ? (void)0 : cudaEncode2< Scalar> (maxbits, d_data, stream, dims, stride, zfp_pad, zfp_blocks); 
# 156
cudaDeviceSynchronize(); 
# 157
cudaEventRecord(stop); 
# 158
cudaEventSynchronize(stop); 
# 159
cudaStreamSynchronize(0); 
# 161
float miliseconds = (0.0F); 
# 162
cudaEventElapsedTime(&miliseconds, start, stop); 
# 163
float seconds = miliseconds / (1000.0F); 
# 164
float mb = (((float)((dims.x) * (dims.y))) * (sizeof(Scalar))) / (((1024.0F) * (1024.0F)) * (1024.0F)); 
# 165
float rate = mb / seconds; 
# 166
printf("Encode elapsed time: %.5f (s)\n", seconds); 
# 167
printf("# encode2 rate: %.2f (GB / sec) %d\n", rate, maxbits); 
# 169
return stream_bytes; 
# 170
} 
# 172
template< class Scalar> size_t 
# 173
encode2(uint2 dims, int2 
# 174
stride, Scalar *
# 175
d_data, Word *
# 176
stream, const int 
# 177
maxbits) 
# 178
{ 
# 179
return encode2launch< Scalar> (dims, stride, d_data, stream, maxbits); 
# 180
} 
# 182
}
# 10 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode3.cuh"
namespace cuZFP { 
# 12
template< class Scalar> inline void 
# 14
gather_partial3(Scalar *q, const Scalar *p, int nx, int ny, int nz, int sx, int sy, int sz) 
# 15
{ 
# 16
uint x, y, z; 
# 17
for (z = (0); z < nz; (z++), (p += (sz - (ny * sy)))) { 
# 18
for (y = (0); y < ny; (y++), (p += (sy - (nx * sx)))) { 
# 19
for (x = (0); x < nx; (x++), (p += sx)) { 
# 20
(q[(((16) * z) + ((4) * y)) + x]) = (*p); }  
# 21
pad_block((q + ((16) * z)) + ((4) * y), nx, 1); 
# 22
}  
# 23
for (x = (0); x < (4); x++) { 
# 24
pad_block((q + ((16) * z)) + x, ny, 4); }  
# 25
}  
# 26
for (y = (0); y < (4); y++) { 
# 27
for (x = (0); x < (4); x++) { 
# 28
pad_block((q + ((4) * y)) + x, nz, 16); }  }  
# 29
} 
# 31
template< class Scalar> inline void 
# 33
gather3(Scalar *q, const Scalar *p, int sx, int sy, int sz) 
# 34
{ 
# 35
uint x, y, z; 
# 36
for (z = (0); z < (4); (z++), (p += (sz - (4 * sy)))) { 
# 37
for (y = (0); y < (4); (y++), (p += (sy - (4 * sx)))) { 
# 38
for (x = (0); x < (4); (x++), (p += sx)) { 
# 39
(*(q++)) = (*p); }  }  }  
# 40
} 
# 42
template< class Scalar> static void 
# 45
__wrapper__device_stub_cudaEncode(const uint &maxbits, const Scalar *&
# 46
scalars, Word *&
# 47
stream, const uint3 &
# 48
dims, const int3 &
# 49
stride, const uint3 &
# 50
padded_dims, const uint &
# 51
tot_blocks) { ::cudaLaunchKernel(0, 0, 0, 0, 0, 0);}
#if 0
# 52
{ 
# 54
typedef unsigned long long ull; 
# 55
typedef long long ll; 
# 56
const ull blockId = ((__device_builtin_variable_blockIdx.x) + ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_gridDim.x))) + (((__device_builtin_variable_gridDim.x) * (__device_builtin_variable_gridDim.y)) * (__device_builtin_variable_blockIdx.z)); 
# 62
const uint block_idx = (blockId * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 64
if (block_idx >= tot_blocks) 
# 65
{ 
# 68
return; 
# 69
}  
# 71
uint3 block_dims; 
# 72
(block_dims.x) = ((padded_dims.x) >> 2); 
# 73
(block_dims.y) = ((padded_dims.y) >> 2); 
# 74
(block_dims.z) = ((padded_dims.z) >> 2); 
# 77
uint3 block; 
# 78
(block.x) = ((block_idx % (block_dims.x)) * (4)); 
# 79
(block.y) = (((block_idx / (block_dims.x)) % (block_dims.y)) * (4)); 
# 80
(block.z) = ((block_idx / ((block_dims.x) * (block_dims.y))) * (4)); 
# 83
ll offset = ((((ll)(block.x)) * (stride.x)) + (((ll)(block.y)) * (stride.y))) + (((ll)(block.z)) * (stride.z)); 
# 84
Scalar fblock[64]; 
# 86
bool partial = false; 
# 87
if (((block.x) + (4)) > (dims.x)) { partial = true; }  
# 88
if (((block.y) + (4)) > (dims.y)) { partial = true; }  
# 89
if (((block.z) + (4)) > (dims.z)) { partial = true; }  
# 91
if (partial) 
# 92
{ 
# 93
const uint nx = (((block.x) + (4)) > (dims.x)) ? (dims.x) - (block.x) : (4); 
# 94
const uint ny = (((block.y) + (4)) > (dims.y)) ? (dims.y) - (block.y) : (4); 
# 95
const uint nz = (((block.z) + (4)) > (dims.z)) ? (dims.z) - (block.z) : (4); 
# 96
gather_partial3(fblock, scalars + offset, nx, ny, nz, stride.x, stride.y, stride.z); 
# 98
} else 
# 100
{ 
# 101
gather3(fblock, scalars + offset, stride.x, stride.y, stride.z); 
# 102
}  
# 105
} 
#endif
# 42 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode3.cuh"
template< class Scalar> void 
# 45
cudaEncode(const uint maxbits, const Scalar *
# 46
scalars, Word *
# 47
stream, const uint3 
# 48
dims, const int3 
# 49
stride, const uint3 
# 50
padded_dims, const uint 
# 51
tot_blocks) 
# 52
{__wrapper__device_stub_cudaEncode<Scalar>(maxbits,scalars,stream,dims,stride,padded_dims,tot_blocks);
# 105
return;}
#if 0
# 52
{ 
# 54
typedef unsigned long long ull; 
# 55
typedef long long ll; 
# 56
const ull blockId = ((__device_builtin_variable_blockIdx.x) + ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_gridDim.x))) + (((__device_builtin_variable_gridDim.x) * (__device_builtin_variable_gridDim.y)) * (__device_builtin_variable_blockIdx.z)); 
# 62
const uint block_idx = (blockId * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 64
if (block_idx >= tot_blocks) 
# 65
{ 
# 68
return; 
# 69
}  
# 71
uint3 block_dims; 
# 72
(block_dims.x) = ((padded_dims.x) >> 2); 
# 73
(block_dims.y) = ((padded_dims.y) >> 2); 
# 74
(block_dims.z) = ((padded_dims.z) >> 2); 
# 77
uint3 block; 
# 78
(block.x) = ((block_idx % (block_dims.x)) * (4)); 
# 79
(block.y) = (((block_idx / (block_dims.x)) % (block_dims.y)) * (4)); 
# 80
(block.z) = ((block_idx / ((block_dims.x) * (block_dims.y))) * (4)); 
# 83
ll offset = ((((ll)(block.x)) * (stride.x)) + (((ll)(block.y)) * (stride.y))) + (((ll)(block.z)) * (stride.z)); 
# 84
Scalar fblock[64]; 
# 86
bool partial = false; 
# 87
if (((block.x) + (4)) > (dims.x)) { partial = true; }  
# 88
if (((block.y) + (4)) > (dims.y)) { partial = true; }  
# 89
if (((block.z) + (4)) > (dims.z)) { partial = true; }  
# 91
if (partial) 
# 92
{ 
# 93
const uint nx = (((block.x) + (4)) > (dims.x)) ? (dims.x) - (block.x) : (4); 
# 94
const uint ny = (((block.y) + (4)) > (dims.y)) ? (dims.y) - (block.y) : (4); 
# 95
const uint nz = (((block.z) + (4)) > (dims.z)) ? (dims.z) - (block.z) : (4); 
# 96
gather_partial3(fblock, scalars + offset, nx, ny, nz, stride.x, stride.y, stride.z); 
# 98
} else 
# 100
{ 
# 101
gather3(fblock, scalars + offset, stride.x, stride.y, stride.z); 
# 102
}  
# 105
} 
#endif
# 110 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/encode3.cuh"
template< class Scalar> size_t 
# 111
encode3launch(uint3 dims, int3 
# 112
stride, const Scalar *
# 113
d_data, Word *
# 114
stream, const int 
# 115
maxbits) 
# 116
{ 
# 118
const int cuda_block_size = 128; 
# 119
dim3 block_size = dim3(cuda_block_size, 1, 1); 
# 121
uint3 zfp_pad(dims); 
# 122
if (((zfp_pad.x) % (4)) != (0)) { (zfp_pad.x) += ((4) - ((dims.x) % (4))); }  
# 123
if (((zfp_pad.y) % (4)) != (0)) { (zfp_pad.y) += ((4) - ((dims.y) % (4))); }  
# 124
if (((zfp_pad.z) % (4)) != (0)) { (zfp_pad.z) += ((4) - ((dims.z) % (4))); }  
# 126
const uint zfp_blocks = (((zfp_pad.x) * (zfp_pad.y)) * (zfp_pad.z)) / (64); 
# 132
int block_pad = 0; 
# 133
if ((zfp_blocks % cuda_block_size) != (0)) 
# 134
{ 
# 135
block_pad = (cuda_block_size - (zfp_blocks % cuda_block_size)); 
# 136
}  
# 138
size_t total_blocks = block_pad + zfp_blocks; 
# 140
dim3 grid_size = calculate_grid_size(total_blocks, cuda_block_size); 
# 142
size_t stream_bytes = calc_device_mem3d(zfp_pad, maxbits); 
# 144
cudaMemset(stream, 0, stream_bytes); 
# 147
cudaEvent_t start, stop; 
# 148
cudaEventCreate(&start); 
# 149
cudaEventCreate(&stop); 
# 150
cudaEventRecord(start); 
# 153
(__cudaPushCallConfiguration(grid_size, block_size)) ? (void)0 : cudaEncode< Scalar> (maxbits, d_data, stream, dims, stride, zfp_pad, zfp_blocks); 
# 163
cudaEventRecord(stop); 
# 164
cudaEventSynchronize(stop); 
# 165
cudaStreamSynchronize(0); 
# 167
float miliseconds = (0); 
# 168
cudaEventElapsedTime(&miliseconds, start, stop); 
# 169
float seconds = miliseconds / (1000.0F); 
# 170
float rate = (((float)(((dims.x) * (dims.y)) * (dims.z))) * (sizeof(Scalar))) / seconds; 
# 171
rate /= (1024.0F); 
# 172
rate /= (1024.0F); 
# 173
rate /= (1024.0F); 
# 174
printf("Encode elapsed time: %.5f (s)\n", seconds); 
# 175
printf("# encode3 rate: %.2f (GB / sec) \n", rate); 
# 177
return stream_bytes; 
# 178
} 
# 183
template< class Scalar> size_t 
# 184
encode(uint3 dims, int3 
# 185
stride, Scalar *
# 186
d_data, Word *
# 187
stream, const int 
# 188
bits_per_block) 
# 189
{ 
# 190
return encode3launch< Scalar> (dims, stride, d_data, stream, bits_per_block); 
# 191
} 
# 193
}
# 6 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode.cuh"
namespace cuZFP { 
# 11
__attribute__((unused)) inline long long uint2int(unsigned long long x) 
# 12
{int volatile ___ = 1;(void)x;
# 14
::exit(___);}
#if 0
# 12
{ 
# 13
return (x ^ 12297829382473034410ULL) - 12297829382473034410ULL; 
# 14
} 
#endif
# 17 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode.cuh"
__attribute__((unused)) inline int uint2int(unsigned x) 
# 18
{int volatile ___ = 1;(void)x;
# 20
::exit(___);}
#if 0
# 18
{ 
# 19
return (x ^ 2863311530U) - 2863311530U; 
# 20
} 
#endif
# 22 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode.cuh"
template< int block_size> 
# 23
class BlockReader { 
# 26
const int m_maxbits; 
# 27
int m_current_bit; 
# 28
Word *m_words; 
# 29
Word m_buffer; 
# 30
bool m_valid_block; 
# 31
int m_block_idx; 
# 33
BlockReader() : m_maxbits(0) 
# 35
{int *volatile ___ = 0;
# 36
::free(___);}
#if 0
# 35
{ 
# 36
} 
#endif
# 39 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode.cuh"
public: BlockReader(Word *b, const int &maxbits, const int &block_idx, const int &num_blocks) : m_maxbits(maxbits), m_valid_block(true) 
# 41
{int *volatile ___ = 0;(void)b;(void)maxbits;(void)block_idx;(void)num_blocks;
# 51
::free(___);}
#if 0
# 41
{ 
# 42
if (block_idx >= num_blocks) { (m_valid_block) = false; }  
# 43
int word_index = (block_idx * maxbits) / (sizeof(Word) * (8)); 
# 44
(m_words) = (b + word_index); 
# 45
(m_buffer) = (*(m_words)); 
# 46
(m_current_bit) = ((block_idx * maxbits) % (sizeof(Word) * (8))); 
# 48
(m_buffer) >>= (m_current_bit); 
# 49
(m_block_idx) = block_idx; 
# 51
} 
#endif
# 53 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode.cuh"
void print() 
# 54
{int volatile ___ = 1;
# 56
::exit(___);}
#if 0
# 54
{ 
# 55
print_bits(m_buffer); 
# 56
} 
#endif
# 59 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode.cuh"
uint read_bit() 
# 60
{int volatile ___ = 1;
# 72
::exit(___);}
#if 0
# 60
{ 
# 61
uint bit = (m_buffer) & (1); 
# 62
++(m_current_bit); 
# 63
(m_buffer) >>= 1; 
# 65
if ((m_current_bit) >= (sizeof(Word) * (8))) 
# 66
{ 
# 67
(m_current_bit) = 0; 
# 68
++(m_words); 
# 69
(m_buffer) = (*(m_words)); 
# 70
}  
# 71
return bit; 
# 72
} 
#endif
# 77 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode.cuh"
uint64 read_bits(const uint &n_bits) 
# 78
{int volatile ___ = 1;(void)n_bits;
# 106
::exit(___);}
#if 0
# 78
{ 
# 79
uint64 bits; 
# 81
int rem_bits = (sizeof(Word) * (8)) - (m_current_bit); 
# 83
int first_read = min(rem_bits, n_bits); 
# 85
Word mask = (((Word)1) << first_read) - (1); 
# 86
bits = ((m_buffer) & mask); 
# 87
(m_buffer) >>= n_bits; 
# 88
(m_current_bit) += first_read; 
# 89
int next_read = 0; 
# 90
if (n_bits >= rem_bits) 
# 91
{ 
# 92
++(m_words); 
# 93
(m_buffer) = (*(m_words)); 
# 94
(m_current_bit) = 0; 
# 95
next_read = (n_bits - first_read); 
# 96
}  
# 101
mask = ((((Word)1) << next_read) - (1)); 
# 102
bits += (((m_buffer) & mask) << first_read); 
# 103
(m_buffer) >>= next_read; 
# 104
(m_current_bit) += next_read; 
# 105
return bits; 
# 106
} 
#endif
# 108 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode.cuh"
}; 
# 110
template< class Scalar, int Size, class UInt> __attribute__((unused)) inline void 
# 112
decode_ints(BlockReader< Size>  &reader, uint &max_bits, UInt *data) 
# 113
{int volatile ___ = 1;(void)reader;(void)max_bits;(void)data;
# 140
::exit(___);}
#if 0
# 113
{ 
# 114
const int intprec = get_precision< Scalar> (); 
# 115
memset(data, 0, sizeof(UInt) * (Size)); 
# 116
uint64 x; 
# 118
const uint kmin = (0); 
# 119
int bits = max_bits; 
# 120
for (uint k = (intprec), n = (0); bits && ((k--) > kmin);) 
# 121
{ 
# 123
uint m = (n < bits) ? n : (bits); 
# 124
bits -= m; 
# 125
x = (reader.read_bits(m)); 
# 126
for (; (n < (Size)) && bits && ((bits--), (reader.read_bit())); x += (((Word)1) << (n++))) { 
# 127
for (; (n < (Size - 1)) && bits && ((bits--), (!(reader.read_bit()))); n++) { ; }  }  
# 135
#pragma unroll Size
for (
# 135
int i = 0; i < Size; (i++), (x >>= 1)) 
# 136
{ 
# 137
(data[i]) += (((UInt)(x & (1U))) << k); 
# 138
}  
# 139
}  
# 140
} 
#endif
# 143 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode.cuh"
template< int BlockSize> struct inv_transform; 
# 147
template<> struct inv_transform< 64>  { 
# 149
template< class Int> void 
# 150
inv_xform(Int *p) 
# 151
{int volatile ___ = 1;(void)p;
# 165
::exit(___);}
#if 0
# 151
{ 
# 152
uint x, y, z; 
# 154
for (y = (0); y < (4); y++) { 
# 155
for (x = (0); x < (4); x++) { 
# 156
inv_lift< Int, 16> ((p + ((1) * x)) + ((4) * y)); }  }  
# 158
for (x = (0); x < (4); x++) { 
# 159
for (z = (0); z < (4); z++) { 
# 160
inv_lift< Int, 4> ((p + ((16) * z)) + ((1) * x)); }  }  
# 162
for (z = (0); z < (4); z++) { 
# 163
for (y = (0); y < (4); y++) { 
# 164
inv_lift< Int, 1> ((p + ((4) * y)) + ((16) * z)); }  }  
# 165
} 
#endif
# 167 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode.cuh"
}; 
# 170
template<> struct inv_transform< 16>  { 
# 172
template< class Int> void 
# 173
inv_xform(Int *p) 
# 174
{int volatile ___ = 1;(void)p;
# 184
::exit(___);}
#if 0
# 174
{ 
# 176
for (int x = 0; x < 4; ++x) 
# 177
{ 
# 178
inv_lift< Int, 4> (p + (1 * x)); 
# 179
}  
# 180
for (int y = 0; y < 4; ++y) 
# 181
{ 
# 182
inv_lift< Int, 1> (p + (4 * y)); 
# 183
}  
# 184
} 
#endif
# 186 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode.cuh"
}; 
# 189
template<> struct inv_transform< 4>  { 
# 191
template< class Int> void 
# 192
inv_xform(Int *p) 
# 193
{int volatile ___ = 1;(void)p;
# 195
::exit(___);}
#if 0
# 193
{ 
# 194
inv_lift< Int, 1> (p); 
# 195
} 
#endif
# 197 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode.cuh"
}; 
# 199
template< class Scalar, int BlockSize> __attribute__((unused)) void 
# 200
zfp_decode(BlockReader< BlockSize>  &reader, Scalar *fblock, uint maxbits) 
# 201
{int volatile ___ = 1;(void)reader;(void)fblock;(void)maxbits;
# 264
::exit(___);}
#if 0
# 201
{ 
# 202
typedef typename zfp_traits< Scalar> ::UInt UInt; 
# 203
typedef typename zfp_traits< Scalar> ::Int Int; 
# 205
uint s_cont = (1); 
# 209
if (!is_int< Scalar> ()) 
# 210
{ 
# 211
s_cont = (reader.read_bit()); 
# 212
}  
# 214
if (s_cont) 
# 215
{ 
# 216
uint ebits = get_ebits< Scalar> () + 1; 
# 218
uint emax; 
# 219
if (!is_int< Scalar> ()) 
# 220
{ 
# 222
emax = ((reader.read_bits(ebits - (1))) - get_ebias< Scalar> ()); 
# 223
} else 
# 225
{ 
# 227
ebits = (0); 
# 228
}  
# 230
maxbits -= ebits; 
# 232
UInt ublock[BlockSize]; 
# 234
decode_ints< Scalar, BlockSize, typename zfp_traits< Scalar> ::UInt> (reader, maxbits, ublock); 
# 236
Int iblock[BlockSize]; 
# 237
unsigned char *perm = get_perm< BlockSize> (); 
# 243
#pragma unroll BlockSize
for (
# 243
int i = 0; i < BlockSize; ++i) 
# 244
{ 
# 245
(iblock[perm[i]]) = uint2int(ublock[i]); 
# 246
}  
# 248
inv_transform< BlockSize>  trans; 
# 249
(trans.inv_xform(iblock)); 
# 251
Scalar inv_w = dequantize< typename zfp_traits< Scalar> ::Int, Scalar> (1, emax); 
# 258
#pragma unroll BlockSize
for (
# 258
int i = 0; i < BlockSize; ++i) 
# 259
{ 
# 260
(fblock[i]) = (inv_w * ((Scalar)(iblock[i]))); 
# 261
}  
# 263
}  
# 264
} 
#endif
# 267 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode.cuh"
}
# 8 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode1.cuh"
namespace cuZFP { 
# 11
template< class Scalar> inline void 
# 13
scatter_partial1(const Scalar *q, Scalar *p, int nx, int sx) 
# 14
{ 
# 15
uint x; 
# 16
for (x = (0); x < nx; (x++), (p += sx)) { 
# 17
(*p) = (*(q++)); }  
# 18
} 
# 20
template< class Scalar> inline void 
# 22
scatter1(const Scalar *q, Scalar *p, int sx) 
# 23
{ 
# 24
uint x; 
# 25
for (x = (0); x < (4); (x++), (p += sx)) { 
# 26
(*p) = (*(q++)); }  
# 27
} 
# 29
template< class Scalar> static void 
# 32
__wrapper__device_stub_cudaDecode1(Word *&blocks, Scalar *&
# 33
out, const uint &
# 34
dim, const int &
# 35
stride, const uint &
# 36
padded_dim, const uint &
# 37
total_blocks, uint &
# 38
maxbits) { ::cudaLaunchKernel(0, 0, 0, 0, 0, 0);}
#if 0
# 39
{ 
# 40
typedef unsigned long long ull; 
# 41
typedef long long ll; 
# 42
typedef typename zfp_traits< Scalar> ::UInt UInt; 
# 43
typedef typename zfp_traits< Scalar> ::Int Int; 
# 45
const int intprec = get_precision< Scalar> (); 
# 47
const ull blockId = ((__device_builtin_variable_blockIdx.x) + ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_gridDim.x))) + (((__device_builtin_variable_gridDim.x) * (__device_builtin_variable_gridDim.y)) * (__device_builtin_variable_blockIdx.z)); 
# 53
const ull block_idx = (blockId * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 55
if (block_idx >= total_blocks) { return; }  
# 57
BlockReader< 4>  reader(blocks, maxbits, block_idx, total_blocks); 
# 58
Scalar result[4] = {(0), (0), (0), (0)}; 
# 60
zfp_decode(reader, result, maxbits); 
# 62
uint block; 
# 63
block = (block_idx * 4ULL); 
# 64
const ll offset = ((ll)block) * stride; 
# 66
bool partial = false; 
# 67
if ((block + (4)) > dim) { partial = true; }  
# 68
if (partial) 
# 69
{ 
# 70
const uint nx = 4U - (padded_dim - dim); 
# 71
scatter_partial1(result, out + offset, nx, stride); 
# 72
} else 
# 74
{ 
# 75
scatter1(result, out + offset, stride); 
# 76
}  
# 77
} 
#endif
# 29 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode1.cuh"
template< class Scalar> void 
# 32
cudaDecode1(Word *blocks, Scalar *
# 33
out, const uint 
# 34
dim, const int 
# 35
stride, const uint 
# 36
padded_dim, const uint 
# 37
total_blocks, uint 
# 38
maxbits) 
# 39
{__wrapper__device_stub_cudaDecode1<Scalar>(blocks,out,dim,stride,padded_dim,total_blocks,maxbits);
# 77
return;}
#if 0
# 39
{ 
# 40
typedef unsigned long long ull; 
# 41
typedef long long ll; 
# 42
typedef typename zfp_traits< Scalar> ::UInt UInt; 
# 43
typedef typename zfp_traits< Scalar> ::Int Int; 
# 45
const int intprec = get_precision< Scalar> (); 
# 47
const ull blockId = ((__device_builtin_variable_blockIdx.x) + ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_gridDim.x))) + (((__device_builtin_variable_gridDim.x) * (__device_builtin_variable_gridDim.y)) * (__device_builtin_variable_blockIdx.z)); 
# 53
const ull block_idx = (blockId * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 55
if (block_idx >= total_blocks) { return; }  
# 57
BlockReader< 4>  reader(blocks, maxbits, block_idx, total_blocks); 
# 58
Scalar result[4] = {(0), (0), (0), (0)}; 
# 60
zfp_decode(reader, result, maxbits); 
# 62
uint block; 
# 63
block = (block_idx * 4ULL); 
# 64
const ll offset = ((ll)block) * stride; 
# 66
bool partial = false; 
# 67
if ((block + (4)) > dim) { partial = true; }  
# 68
if (partial) 
# 69
{ 
# 70
const uint nx = 4U - (padded_dim - dim); 
# 71
scatter_partial1(result, out + offset, nx, stride); 
# 72
} else 
# 74
{ 
# 75
scatter1(result, out + offset, stride); 
# 76
}  
# 77
} 
#endif
# 79 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode1.cuh"
template< class Scalar> size_t 
# 80
decode1launch(uint dim, int 
# 81
stride, Word *
# 82
stream, Scalar *
# 83
d_data, uint 
# 84
maxbits) 
# 85
{ 
# 86
const int cuda_block_size = 128; 
# 88
uint zfp_pad(dim); 
# 89
if ((zfp_pad % (4)) != (0)) { zfp_pad += ((4) - (dim % (4))); }  
# 91
uint zfp_blocks = zfp_pad / (4); 
# 93
if ((dim % (4)) != (0)) { zfp_blocks = ((dim + ((4) - (dim % (4)))) / (4)); }  
# 95
int block_pad = 0; 
# 96
if ((zfp_blocks % cuda_block_size) != (0)) 
# 97
{ 
# 98
block_pad = (cuda_block_size - (zfp_blocks % cuda_block_size)); 
# 99
}  
# 101
size_t total_blocks = block_pad + zfp_blocks; 
# 102
size_t stream_bytes = calc_device_mem1d(zfp_pad, maxbits); 
# 104
dim3 block_size = dim3(cuda_block_size, 1, 1); 
# 105
dim3 grid_size = calculate_grid_size(total_blocks, cuda_block_size); 
# 109
cudaEvent_t start, stop; 
# 110
cudaEventCreate(&start); 
# 111
cudaEventCreate(&stop); 
# 113
cudaEventRecord(start); 
# 116
(__cudaPushCallConfiguration(grid_size, block_size)) ? (void)0 : cudaDecode1< Scalar> (stream, d_data, dim, stride, zfp_pad, zfp_blocks, maxbits); 
# 126
cudaEventRecord(stop); 
# 127
cudaEventSynchronize(stop); 
# 128
cudaStreamSynchronize(0); 
# 130
float miliseconds = (0); 
# 131
cudaEventElapsedTime(&miliseconds, start, stop); 
# 132
float seconds = miliseconds / (1000.0F); 
# 133
float rate = (((float)dim) * (sizeof(Scalar))) / seconds; 
# 134
rate /= (1024.0F); 
# 135
rate /= (1024.0F); 
# 136
rate /= (1024.0F); 
# 137
printf("Decode elapsed time: %.5f (s)\n", seconds); 
# 138
printf("# decode1 rate: %.2f (GB / sec) %d\n", rate, maxbits); 
# 140
return stream_bytes; 
# 141
} 
# 143
template< class Scalar> size_t 
# 144
decode1(int dim, int 
# 145
stride, Word *
# 146
stream, Scalar *
# 147
d_data, uint 
# 148
maxbits) 
# 149
{ 
# 150
return decode1launch< Scalar> (dim, stride, stream, d_data, maxbits); 
# 151
} 
# 153
}
# 8 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode2.cuh"
namespace cuZFP { 
# 10
template< class Scalar> inline void 
# 12
scatter_partial2(const Scalar *q, Scalar *p, int nx, int ny, int sx, int sy) 
# 13
{ 
# 14
uint x, y; 
# 15
for (y = (0); y < ny; ((y++), (p += (sy - (nx * sx)))), (q += (4 - nx))) { 
# 16
for (x = (0); x < nx; ((x++), (p += sx)), (q++)) { 
# 17
(*p) = (*q); }  }  
# 18
} 
# 20
template< class Scalar> inline void 
# 22
scatter2(const Scalar *q, Scalar *p, int sx, int sy) 
# 23
{ 
# 24
uint x, y; 
# 25
for (y = (0); y < (4); (y++), (p += (sy - (4 * sx)))) { 
# 26
for (x = (0); x < (4); (x++), (p += sx)) { 
# 27
(*p) = (*(q++)); }  }  
# 28
} 
# 31
template< class Scalar, int BlockSize> static void 
# 34
__wrapper__device_stub_cudaDecode2(Word *&blocks, Scalar *&
# 35
out, const uint2 &
# 36
dims, const int2 &
# 37
stride, const uint2 &
# 38
padded_dims, uint &
# 39
maxbits) { ::cudaLaunchKernel(0, 0, 0, 0, 0, 0);}
#if 0
# 40
{ 
# 41
typedef unsigned long long ull; 
# 42
typedef long long ll; 
# 43
const ull blockId = ((__device_builtin_variable_blockIdx.x) + ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_gridDim.x))) + (((__device_builtin_variable_gridDim.x) * (__device_builtin_variable_gridDim.y)) * (__device_builtin_variable_blockIdx.z)); 
# 49
const ull block_idx = (blockId * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 51
const int total_blocks = ((padded_dims.x) * (padded_dims.y)) / (16); 
# 53
if (block_idx >= total_blocks) 
# 54
{ 
# 55
return; 
# 56
}  
# 58
BlockReader< BlockSize>  reader(blocks, maxbits, block_idx, total_blocks); 
# 60
Scalar result[BlockSize]; 
# 61
memset(result, 0, sizeof(Scalar) * (BlockSize)); 
# 63
zfp_decode(reader, result, maxbits); 
# 66
uint2 block_dims; 
# 67
(block_dims.x) = ((padded_dims.x) >> 2); 
# 68
(block_dims.y) = ((padded_dims.y) >> 2); 
# 70
uint2 block; 
# 71
(block.x) = ((block_idx % (block_dims.x)) * (4)); 
# 72
(block.y) = (((block_idx / (block_dims.x)) % (block_dims.y)) * (4)); 
# 74
const ll offset = (((ll)(block.x)) * (stride.x)) + (((ll)(block.y)) * (stride.y)); 
# 76
bool partial = false; 
# 77
if (((block.x) + (4)) > (dims.x)) { partial = true; }  
# 78
if (((block.y) + (4)) > (dims.y)) { partial = true; }  
# 79
if (partial) 
# 80
{ 
# 81
const uint nx = (((block.x) + (4)) > (dims.x)) ? (dims.x) - (block.x) : (4); 
# 82
const uint ny = (((block.y) + (4)) > (dims.y)) ? (dims.y) - (block.y) : (4); 
# 83
scatter_partial2(result, out + offset, nx, ny, stride.x, stride.y); 
# 84
} else 
# 86
{ 
# 87
scatter2(result, out + offset, stride.x, stride.y); 
# 88
}  
# 89
} 
#endif
# 31 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode2.cuh"
template< class Scalar, int BlockSize> void 
# 34
cudaDecode2(Word *blocks, Scalar *
# 35
out, const uint2 
# 36
dims, const int2 
# 37
stride, const uint2 
# 38
padded_dims, uint 
# 39
maxbits) 
# 40
{__wrapper__device_stub_cudaDecode2<Scalar,BlockSize>(blocks,out,dims,stride,padded_dims,maxbits);
# 89
return;}
#if 0
# 40
{ 
# 41
typedef unsigned long long ull; 
# 42
typedef long long ll; 
# 43
const ull blockId = ((__device_builtin_variable_blockIdx.x) + ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_gridDim.x))) + (((__device_builtin_variable_gridDim.x) * (__device_builtin_variable_gridDim.y)) * (__device_builtin_variable_blockIdx.z)); 
# 49
const ull block_idx = (blockId * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 51
const int total_blocks = ((padded_dims.x) * (padded_dims.y)) / (16); 
# 53
if (block_idx >= total_blocks) 
# 54
{ 
# 55
return; 
# 56
}  
# 58
BlockReader< BlockSize>  reader(blocks, maxbits, block_idx, total_blocks); 
# 60
Scalar result[BlockSize]; 
# 61
memset(result, 0, sizeof(Scalar) * (BlockSize)); 
# 63
zfp_decode(reader, result, maxbits); 
# 66
uint2 block_dims; 
# 67
(block_dims.x) = ((padded_dims.x) >> 2); 
# 68
(block_dims.y) = ((padded_dims.y) >> 2); 
# 70
uint2 block; 
# 71
(block.x) = ((block_idx % (block_dims.x)) * (4)); 
# 72
(block.y) = (((block_idx / (block_dims.x)) % (block_dims.y)) * (4)); 
# 74
const ll offset = (((ll)(block.x)) * (stride.x)) + (((ll)(block.y)) * (stride.y)); 
# 76
bool partial = false; 
# 77
if (((block.x) + (4)) > (dims.x)) { partial = true; }  
# 78
if (((block.y) + (4)) > (dims.y)) { partial = true; }  
# 79
if (partial) 
# 80
{ 
# 81
const uint nx = (((block.x) + (4)) > (dims.x)) ? (dims.x) - (block.x) : (4); 
# 82
const uint ny = (((block.y) + (4)) > (dims.y)) ? (dims.y) - (block.y) : (4); 
# 83
scatter_partial2(result, out + offset, nx, ny, stride.x, stride.y); 
# 84
} else 
# 86
{ 
# 87
scatter2(result, out + offset, stride.x, stride.y); 
# 88
}  
# 89
} 
#endif
# 91 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode2.cuh"
template< class Scalar> size_t 
# 92
decode2launch(uint2 dims, int2 
# 93
stride, Word *
# 94
stream, Scalar *
# 95
d_data, uint 
# 96
maxbits) 
# 97
{ 
# 98
const int cuda_block_size = 128; 
# 99
dim3 block_size; 
# 100
block_size = dim3(cuda_block_size, 1, 1); 
# 102
uint2 zfp_pad(dims); 
# 105
if (((zfp_pad.x) % (4)) != (0)) { (zfp_pad.x) += ((4) - ((dims.x) % (4))); }  
# 106
if (((zfp_pad.y) % (4)) != (0)) { (zfp_pad.y) += ((4) - ((dims.y) % (4))); }  
# 108
const int zfp_blocks = ((zfp_pad.x) * (zfp_pad.y)) / (16); 
# 115
int block_pad = 0; 
# 116
if ((zfp_blocks % cuda_block_size) != 0) 
# 117
{ 
# 118
block_pad = (cuda_block_size - (zfp_blocks % cuda_block_size)); 
# 119
}  
# 122
size_t stream_bytes = calc_device_mem2d(zfp_pad, maxbits); 
# 123
size_t total_blocks = block_pad + zfp_blocks; 
# 124
dim3 grid_size = calculate_grid_size(total_blocks, cuda_block_size); 
# 128
cudaEvent_t start, stop; 
# 129
cudaEventCreate(&start); 
# 130
cudaEventCreate(&stop); 
# 131
cudaEventRecord(start); 
# 134
(__cudaPushCallConfiguration(grid_size, block_size)) ? (void)0 : cudaDecode2< Scalar, 16> (stream, d_data, dims, stride, zfp_pad, maxbits); 
# 143
cudaEventRecord(stop); 
# 144
cudaEventSynchronize(stop); 
# 145
cudaStreamSynchronize(0); 
# 147
float miliseconds = (0); 
# 148
cudaEventElapsedTime(&miliseconds, start, stop); 
# 149
float seconds = miliseconds / (1000.0F); 
# 150
float rate = (((float)((dims.x) * (dims.y))) * (sizeof(Scalar))) / seconds; 
# 151
rate /= (1024.0F); 
# 152
rate /= (1024.0F); 
# 153
rate /= (1024.0F); 
# 154
printf("Decode elapsed time: %.5f (s)\n", seconds); 
# 155
printf("# decode2 rate: %.2f (GB / sec) %d\n", rate, maxbits); 
# 157
return stream_bytes; 
# 158
} 
# 160
template< class Scalar> size_t 
# 161
decode2(uint2 dims, int2 
# 162
stride, Word *
# 163
stream, Scalar *
# 164
d_data, uint 
# 165
maxbits) 
# 166
{ 
# 167
return decode2launch< Scalar> (dims, stride, stream, d_data, maxbits); 
# 168
} 
# 170
}
# 8 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode3.cuh"
namespace cuZFP { 
# 10
template< class Scalar> inline void 
# 12
scatter_partial3(const Scalar *q, Scalar *p, int nx, int ny, int nz, int sx, int sy, int sz) 
# 13
{ 
# 14
uint x, y, z; 
# 15
for (z = (0); z < nz; ((z++), (p += (sz - (ny * sy)))), (q += (4 * (4 - ny)))) { 
# 16
for (y = (0); y < ny; ((y++), (p += (sy - (nx * sx)))), (q += (4 - nx))) { 
# 17
for (x = (0); x < nx; ((x++), (p += sx)), (q++)) { 
# 18
(*p) = (*q); }  }  }  
# 19
} 
# 21
template< class Scalar> inline void 
# 23
scatter3(const Scalar *q, Scalar *p, int sx, int sy, int sz) 
# 24
{ 
# 25
uint x, y, z; 
# 26
for (z = (0); z < (4); (z++), (p += (sz - (4 * sy)))) { 
# 27
for (y = (0); y < (4); (y++), (p += (sy - (4 * sx)))) { 
# 28
for (x = (0); x < (4); (x++), (p += sx)) { 
# 29
(*p) = (*(q++)); }  }  }  
# 30
} 
# 33
template< class Scalar, int BlockSize> static void 
# 36
__wrapper__device_stub_cudaDecode3(Word *&blocks, Scalar *&
# 37
out, const uint3 &
# 38
dims, const int3 &
# 39
stride, const uint3 &
# 40
padded_dims, uint &
# 41
maxbits) { ::cudaLaunchKernel(0, 0, 0, 0, 0, 0);}
#if 0
# 42
{ 
# 44
typedef unsigned long long ull; 
# 45
typedef long long ll; 
# 47
const ull blockId = ((__device_builtin_variable_blockIdx.x) + ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_gridDim.x))) + (((__device_builtin_variable_gridDim.x) * (__device_builtin_variable_gridDim.y)) * (__device_builtin_variable_blockIdx.z)); 
# 52
const ull block_idx = (blockId * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 54
const int total_blocks = (((padded_dims.x) * (padded_dims.y)) * (padded_dims.z)) / (64); 
# 56
if (block_idx >= total_blocks) 
# 57
{ 
# 58
return; 
# 59
}  
# 61
BlockReader< BlockSize>  reader(blocks, maxbits, block_idx, total_blocks); 
# 63
Scalar result[BlockSize]; 
# 64
memset(result, 0, sizeof(Scalar) * (BlockSize)); 
# 66
zfp_decode< Scalar, BlockSize> (reader, result, maxbits); 
# 69
uint3 block_dims; 
# 70
(block_dims.x) = ((padded_dims.x) >> 2); 
# 71
(block_dims.y) = ((padded_dims.y) >> 2); 
# 72
(block_dims.z) = ((padded_dims.z) >> 2); 
# 74
uint3 block; 
# 75
(block.x) = ((block_idx % (block_dims.x)) * (4)); 
# 76
(block.y) = (((block_idx / (block_dims.x)) % (block_dims.y)) * (4)); 
# 77
(block.z) = ((block_idx / ((block_dims.x) * (block_dims.y))) * (4)); 
# 80
const ll offset = ((((ll)(block.x)) * (stride.x)) + (((ll)(block.y)) * (stride.y))) + (((ll)(block.z)) * (stride.z)); 
# 82
bool partial = false; 
# 83
if (((block.x) + (4)) > (dims.x)) { partial = true; }  
# 84
if (((block.y) + (4)) > (dims.y)) { partial = true; }  
# 85
if (((block.z) + (4)) > (dims.z)) { partial = true; }  
# 86
if (partial) 
# 87
{ 
# 88
const uint nx = (((block.x) + 4U) > (dims.x)) ? (dims.x) - (block.x) : (4); 
# 89
const uint ny = (((block.y) + 4U) > (dims.y)) ? (dims.y) - (block.y) : (4); 
# 90
const uint nz = (((block.z) + 4U) > (dims.z)) ? (dims.z) - (block.z) : (4); 
# 92
scatter_partial3(result, out + offset, nx, ny, nz, stride.x, stride.y, stride.z); 
# 93
} else 
# 95
{ 
# 96
scatter3(result, out + offset, stride.x, stride.y, stride.z); 
# 97
}  
# 98
} 
#endif
# 33 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode3.cuh"
template< class Scalar, int BlockSize> void 
# 36
cudaDecode3(Word *blocks, Scalar *
# 37
out, const uint3 
# 38
dims, const int3 
# 39
stride, const uint3 
# 40
padded_dims, uint 
# 41
maxbits) 
# 42
{__wrapper__device_stub_cudaDecode3<Scalar,BlockSize>(blocks,out,dims,stride,padded_dims,maxbits);
# 98
return;}
#if 0
# 42
{ 
# 44
typedef unsigned long long ull; 
# 45
typedef long long ll; 
# 47
const ull blockId = ((__device_builtin_variable_blockIdx.x) + ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_gridDim.x))) + (((__device_builtin_variable_gridDim.x) * (__device_builtin_variable_gridDim.y)) * (__device_builtin_variable_blockIdx.z)); 
# 52
const ull block_idx = (blockId * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 54
const int total_blocks = (((padded_dims.x) * (padded_dims.y)) * (padded_dims.z)) / (64); 
# 56
if (block_idx >= total_blocks) 
# 57
{ 
# 58
return; 
# 59
}  
# 61
BlockReader< BlockSize>  reader(blocks, maxbits, block_idx, total_blocks); 
# 63
Scalar result[BlockSize]; 
# 64
memset(result, 0, sizeof(Scalar) * (BlockSize)); 
# 66
zfp_decode< Scalar, BlockSize> (reader, result, maxbits); 
# 69
uint3 block_dims; 
# 70
(block_dims.x) = ((padded_dims.x) >> 2); 
# 71
(block_dims.y) = ((padded_dims.y) >> 2); 
# 72
(block_dims.z) = ((padded_dims.z) >> 2); 
# 74
uint3 block; 
# 75
(block.x) = ((block_idx % (block_dims.x)) * (4)); 
# 76
(block.y) = (((block_idx / (block_dims.x)) % (block_dims.y)) * (4)); 
# 77
(block.z) = ((block_idx / ((block_dims.x) * (block_dims.y))) * (4)); 
# 80
const ll offset = ((((ll)(block.x)) * (stride.x)) + (((ll)(block.y)) * (stride.y))) + (((ll)(block.z)) * (stride.z)); 
# 82
bool partial = false; 
# 83
if (((block.x) + (4)) > (dims.x)) { partial = true; }  
# 84
if (((block.y) + (4)) > (dims.y)) { partial = true; }  
# 85
if (((block.z) + (4)) > (dims.z)) { partial = true; }  
# 86
if (partial) 
# 87
{ 
# 88
const uint nx = (((block.x) + 4U) > (dims.x)) ? (dims.x) - (block.x) : (4); 
# 89
const uint ny = (((block.y) + 4U) > (dims.y)) ? (dims.y) - (block.y) : (4); 
# 90
const uint nz = (((block.z) + 4U) > (dims.z)) ? (dims.z) - (block.z) : (4); 
# 92
scatter_partial3(result, out + offset, nx, ny, nz, stride.x, stride.y, stride.z); 
# 93
} else 
# 95
{ 
# 96
scatter3(result, out + offset, stride.x, stride.y, stride.z); 
# 97
}  
# 98
} 
#endif
# 99 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/decode3.cuh"
template< class Scalar> size_t 
# 100
decode3launch(uint3 dims, int3 
# 101
stride, Word *
# 102
stream, Scalar *
# 103
d_data, uint 
# 104
maxbits) 
# 105
{ 
# 106
const int cuda_block_size = 128; 
# 107
dim3 block_size; 
# 108
block_size = dim3(cuda_block_size, 1, 1); 
# 110
uint3 zfp_pad(dims); 
# 113
if (((zfp_pad.x) % (4)) != (0)) { (zfp_pad.x) += ((4) - ((dims.x) % (4))); }  
# 114
if (((zfp_pad.y) % (4)) != (0)) { (zfp_pad.y) += ((4) - ((dims.y) % (4))); }  
# 115
if (((zfp_pad.z) % (4)) != (0)) { (zfp_pad.z) += ((4) - ((dims.z) % (4))); }  
# 117
const int zfp_blocks = (((zfp_pad.x) * (zfp_pad.y)) * (zfp_pad.z)) / (64); 
# 124
int block_pad = 0; 
# 125
if ((zfp_blocks % cuda_block_size) != 0) 
# 126
{ 
# 127
block_pad = (cuda_block_size - (zfp_blocks % cuda_block_size)); 
# 128
}  
# 130
size_t total_blocks = block_pad + zfp_blocks; 
# 131
size_t stream_bytes = calc_device_mem3d(zfp_pad, maxbits); 
# 133
dim3 grid_size = calculate_grid_size(total_blocks, cuda_block_size); 
# 137
cudaEvent_t start, stop; 
# 138
cudaEventCreate(&start); 
# 139
cudaEventCreate(&stop); 
# 141
cudaEventRecord(start); 
# 144
(__cudaPushCallConfiguration(grid_size, block_size)) ? (void)0 : cudaDecode3< Scalar, 64> (stream, d_data, dims, stride, zfp_pad, maxbits); 
# 153
cudaEventRecord(stop); 
# 154
cudaEventSynchronize(stop); 
# 155
cudaStreamSynchronize(0); 
# 157
float miliseconds = (0); 
# 158
cudaEventElapsedTime(&miliseconds, start, stop); 
# 159
float seconds = miliseconds / (1000.0F); 
# 160
float rate = (((float)(((dims.x) * (dims.y)) * (dims.z))) * (sizeof(Scalar))) / seconds; 
# 161
rate /= (1024.0F); 
# 162
rate /= (1024.0F); 
# 163
rate /= (1024.0F); 
# 164
printf("Decode elapsed time: %.5f (s)\n", seconds); 
# 165
printf("# decode3 rate: %.2f (GB / sec) %d\n", rate, maxbits); 
# 168
return stream_bytes; 
# 169
} 
# 171
template< class Scalar> size_t 
# 172
decode3(uint3 dims, int3 
# 173
stride, Word *
# 174
stream, Scalar *
# 175
d_data, uint 
# 176
maxbits) 
# 177
{ 
# 178
return decode3launch< Scalar> (dims, stride, stream, d_data, maxbits); 
# 179
} 
# 181
}
# 4 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/constants.h"
namespace cuZFP { 
# 9
static const unsigned char perm_3d[64] = {(0 + (4 * (0 + (4 * 0)))), (1 + (4 * (0 + (4 * 0)))), (0 + (4 * (1 + (4 * 0)))), (0 + (4 * (0 + (4 * 1)))), (0 + (4 * (1 + (4 * 1)))), (1 + (4 * (0 + (4 * 1)))), (1 + (4 * (1 + (4 * 0)))), (2 + (4 * (0 + (4 * 0)))), (0 + (4 * (2 + (4 * 0)))), (0 + (4 * (0 + (4 * 2)))), (1 + (4 * (1 + (4 * 1)))), (2 + (4 * (1 + (4 * 0)))), (2 + (4 * (0 + (4 * 1)))), (0 + (4 * (2 + (4 * 1)))), (1 + (4 * (2 + (4 * 0)))), (1 + (4 * (0 + (4 * 2)))), (0 + (4 * (1 + (4 * 2)))), (3 + (4 * (0 + (4 * 0)))), (0 + (4 * (3 + (4 * 0)))), (0 + (4 * (0 + (4 * 3)))), (2 + (4 * (1 + (4 * 1)))), (1 + (4 * (2 + (4 * 1)))), (1 + (4 * (1 + (4 * 2)))), (0 + (4 * (2 + (4 * 2)))), (2 + (4 * (0 + (4 * 2)))), (2 + (4 * (2 + (4 * 0)))), (3 + (4 * (1 + (4 * 0)))), (3 + (4 * (0 + (4 * 1)))), (0 + (4 * (3 + (4 * 1)))), (1 + (4 * (3 + (4 * 0)))), (1 + (4 * (0 + (4 * 3)))), (0 + (4 * (1 + (4 * 3)))), (1 + (4 * (2 + (4 * 2)))), (2 + (4 * (1 + (4 * 2)))), (2 + (4 * (2 + (4 * 1)))), (3 + (4 * (1 + (4 * 1)))), (1 + (4 * (3 + (4 * 1)))), (1 + (4 * (1 + (4 * 3)))), (3 + (4 * (2 + (4 * 0)))), (3 + (4 * (0 + (4 * 2)))), (0 + (4 * (3 + (4 * 2)))), (2 + (4 * (3 + (4 * 0)))), (2 + (4 * (0 + (4 * 3)))), (0 + (4 * (2 + (4 * 3)))), (2 + (4 * (2 + (4 * 2)))), (3 + (4 * (2 + (4 * 1)))), (3 + (4 * (1 + (4 * 2)))), (1 + (4 * (3 + (4 * 2)))), (2 + (4 * (3 + (4 * 1)))), (2 + (4 * (1 + (4 * 3)))), (1 + (4 * (2 + (4 * 3)))), (0 + (4 * (3 + (4 * 3)))), (3 + (4 * (0 + (4 * 3)))), (3 + (4 * (3 + (4 * 0)))), (3 + (4 * (2 + (4 * 2)))), (2 + (4 * (3 + (4 * 2)))), (2 + (4 * (2 + (4 * 3)))), (1 + (4 * (3 + (4 * 3)))), (3 + (4 * (1 + (4 * 3)))), (3 + (4 * (3 + (4 * 1)))), (2 + (4 * (3 + (4 * 3)))), (3 + (4 * (2 + (4 * 3)))), (3 + (4 * (3 + (4 * 2)))), (3 + (4 * (3 + (4 * 3))))}; 
# 97
static const unsigned char perm_1[4] = {(0), (1), (2), (3)}; 
# 105
static const unsigned char perm_2[16] = {(0 + (4 * 0)), (1 + (4 * 0)), (0 + (4 * 1)), (1 + (4 * 1)), (2 + (4 * 0)), (0 + (4 * 2)), (2 + (4 * 1)), (1 + (4 * 2)), (3 + (4 * 0)), (0 + (4 * 3)), (2 + (4 * 2)), (3 + (4 * 1)), (1 + (4 * 3)), (3 + (4 * 2)), (2 + (4 * 3)), (3 + (4 * 3))}; 
# 135
}
# 9 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/constant_setup.cuh"
namespace cuZFP { 
# 11
class ConstantSetup { 
# 14
public: static void setup_3d() 
# 15
{ 
# 16
ErrorCheck ec; 
# 17
cudaMemcpyToSymbol(c_perm, perm_3d, sizeof(unsigned char) * (64), 0); 
# 18
ec.chk("setupConst: c_perm"); 
# 19
} 
# 21
static void setup_2d() 
# 22
{ 
# 23
ErrorCheck ec; 
# 24
cudaMemcpyToSymbol(c_perm_2, perm_2, sizeof(unsigned char) * (16), 0); 
# 25
ec.chk("setupConst: c_perm_2"); 
# 26
} 
# 28
static void setup_1d() 
# 29
{ 
# 30
ErrorCheck ec; 
# 31
cudaMemcpyToSymbol(c_perm_1, perm_1, sizeof(unsigned char) * (4), 0); 
# 33
ec.chk("setupConst: c_perm_1"); 
# 34
} 
# 35
}; 
# 38
}
# 8 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/pointers.cuh"
namespace cuZFP { 
# 11
bool is_gpu_ptr(const void *ptr) 
# 12
{ 
# 17
cudaPointerAttributes atts; 
# 18
const cudaError_t perr = cudaPointerGetAttributes(&atts, ptr); 
# 23
cudaError_t error = cudaGetLastError(); 
# 26
int result = (perr == (cudaSuccess)) && (((atts.type) == (cudaMemoryTypeDevice)) || ((atts.type) == (cudaMemoryTypeManaged))); 
# 37 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/pointers.cuh"
return result; 
# 38
} 
# 40
}
# 121 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/../inline/bitstream.c"
typedef uint64 word; 
# 128
struct bitstream { 
# 129
uint bits; 
# 130
word buffer; 
# 131
word *ptr; 
# 132
word *begin; 
# 133
word *end; 
# 138
}; 
# 144
static word stream_read_word(bitstream *s) 
# 145
{ 
# 148
word w = *((s->ptr)++); 
# 153
return w; 
# 154
} 
# 158
static void stream_write_word(bitstream *s, word value) 
# 159
{ 
# 162
(*((s->ptr)++)) = value; 
# 167
} 
# 173
inline void *stream_data(const bitstream *s) 
# 174
{ 
# 176
; 
# 177
return s->begin; 
# 178
} 
# 182
inline size_t stream_size(const bitstream *s) 
# 183
{ 
# 185
; 
# 186
return sizeof(word) * ((s->ptr) - (s->begin)); 
# 187
} 
# 191
inline size_t stream_capacity(const bitstream *s) 
# 192
{ 
# 194
; 
# 195
return sizeof(word) * ((s->end) - (s->begin)); 
# 196
} 
# 200
inline size_t stream_stride_block(const bitstream *s) 
# 201
{ 
# 203
; 
# 207
(void)s; 
# 208
return 1; 
# 210
} 
# 214
inline ptrdiff_t stream_stride_delta(const bitstream *s) 
# 215
{ 
# 217
; 
# 221
(void)s; 
# 222
return 0; 
# 224
} 
# 228
inline uint stream_read_bit(bitstream *s) 
# 229
{ 
# 232
uint bit; 
# 233
if (!(s->bits)) { 
# 234
(s->buffer) = stream_read_word(s); 
# 235
(s->bits) = ((uint)((8) * sizeof(word))); 
# 236
}  
# 237
(s->bits)--; 
# 238
bit = (((uint)(s->buffer)) & 1U); 
# 239
(s->buffer) >>= 1; 
# 240
return bit; 
# 241
} 
# 245
inline uint stream_write_bit(bitstream *s, uint bit) 
# 246
{ 
# 249
(s->buffer) += (((word)bit) << (s->bits)); 
# 250
if ((++(s->bits)) == ((uint)((8) * sizeof(word)))) { 
# 251
stream_write_word(s, s->buffer); 
# 252
(s->buffer) = (0); 
# 253
(s->bits) = (0); 
# 254
}  
# 255
return bit; 
# 256
} 
# 260
inline uint64 stream_read_bits(bitstream *s, uint n) 
# 261
{ 
# 264
uint64 value = s->buffer; 
# 265
if ((s->bits) < n) { 
# 267
do { 
# 269
(s->buffer) = stream_read_word(s); 
# 270
value += (((uint64)(s->buffer)) << (s->bits)); 
# 271
(s->bits) += ((uint)((8) * sizeof(word))); 
# 272
} while ((sizeof (s->buffer) < sizeof value) && ((s->bits) < n)); 
# 274
(s->bits) -= n; 
# 275
if (!(s->bits)) { 
# 277
(s->buffer) = (0); 
# 278
} else 
# 279
{ 
# 281
(s->buffer) >>= (((uint)((8) * sizeof(word))) - (s->bits)); 
# 283
value &= ((((uint64)2) << (n - (1))) - (1)); 
# 284
}  
# 285
} else 
# 286
{ 
# 288
(s->bits) -= n; 
# 289
(s->buffer) >>= n; 
# 290
value &= ((((uint64)1) << n) - (1)); 
# 291
}  
# 292
return value; 
# 293
} 
# 297
inline uint64 stream_write_bits(bitstream *s, uint64 value, uint n) 
# 298
{ 
# 302
(s->buffer) += ((word)(value << (s->bits))); 
# 303
(s->bits) += n; 
# 305
if ((s->bits) >= ((uint)((8) * sizeof(word)))) { 
# 307
value >>= 1; 
# 308
n--; 
# 310
do { 
# 312
(s->bits) -= ((uint)((8) * sizeof(word))); 
# 314
stream_write_word(s, s->buffer); 
# 316
(s->buffer) = ((word)(value >> (n - (s->bits)))); 
# 317
} while ((sizeof (s->buffer) < sizeof value) && ((s->bits) >= ((uint)((8) * sizeof(word))))); 
# 318
}  
# 320
(s->buffer) &= ((((word)1) << (s->bits)) - (1)); 
# 322
return value >> n; 
# 323
} 
# 327
inline size_t stream_rtell(const bitstream *s) 
# 328
{ 
# 330
; 
# 331
return (((uint)((8) * sizeof(word))) * ((s->ptr) - (s->begin))) - (s->bits); 
# 332
} 
# 336
inline size_t stream_wtell(const bitstream *s) 
# 337
{ 
# 339
; 
# 340
return (((uint)((8) * sizeof(word))) * ((s->ptr) - (s->begin))) + (s->bits); 
# 341
} 
# 345
inline void stream_rewind(bitstream *s) 
# 346
{ 
# 348
; 
# 349
(s->ptr) = (s->begin); 
# 350
(s->buffer) = (0); 
# 351
(s->bits) = (0); 
# 352
} 
# 356
inline void stream_rseek(bitstream *s, size_t offset) 
# 357
{ 
# 359
; 
# 360
uint n = offset % ((uint)((8) * sizeof(word))); 
# 361
(s->ptr) = ((s->begin) + (offset / ((uint)((8) * sizeof(word))))); 
# 362
if (n) { 
# 363
(s->buffer) = (stream_read_word(s) >> n); 
# 364
(s->bits) = (((uint)((8) * sizeof(word))) - n); 
# 365
} else 
# 366
{ 
# 367
(s->buffer) = (0); 
# 368
(s->bits) = (0); 
# 369
}  
# 370
} 
# 374
inline void stream_wseek(bitstream *s, size_t offset) 
# 375
{ 
# 377
; 
# 378
uint n = offset % ((uint)((8) * sizeof(word))); 
# 379
(s->ptr) = ((s->begin) + (offset / ((uint)((8) * sizeof(word))))); 
# 380
if (n) { 
# 381
word buffer = *(s->ptr); 
# 382
buffer &= ((((word)1) << n) - (1)); 
# 383
(s->buffer) = buffer; 
# 384
(s->bits) = n; 
# 385
} else 
# 386
{ 
# 387
(s->buffer) = (0); 
# 388
(s->bits) = (0); 
# 389
}  
# 390
} 
# 394
inline void stream_skip(bitstream *s, uint n) 
# 395
{ 
# 397
; 
# 398
stream_rseek(s, stream_rtell(s) + n); 
# 399
} 
# 403
inline void stream_pad(bitstream *s, uint n) 
# 404
{ 
# 406
; 
# 407
for ((s->bits) += n; (s->bits) >= ((uint)((8) * sizeof(word))); (s->bits) -= ((uint)((8) * sizeof(word)))) { 
# 408
stream_write_word(s, s->buffer); 
# 409
(s->buffer) = (0); 
# 410
}  
# 411
} 
# 415
inline size_t stream_align(bitstream *s) 
# 416
{ 
# 418
; 
# 419
uint bits = s->bits; 
# 420
if (bits) { 
# 421
stream_skip(s, bits); }  
# 422
return bits; 
# 423
} 
# 427
inline size_t stream_flush(bitstream *s) 
# 428
{ 
# 430
; 
# 431
uint bits = (((uint)((8) * sizeof(word))) - (s->bits)) % ((uint)((8) * sizeof(word))); 
# 432
if (bits) { 
# 433
stream_pad(s, bits); }  
# 434
return bits; 
# 435
} 
# 439
inline void stream_copy(bitstream *dst, bitstream *src, size_t n) 
# 440
{ 
# 442
; 
# 443
while (n > ((uint)((8) * sizeof(word)))) { 
# 444
word w = (word)stream_read_bits(src, (uint)((8) * sizeof(word))); 
# 445
stream_write_bits(dst, w, (uint)((8) * sizeof(word))); 
# 446
n -= ((uint)((8) * sizeof(word))); 
# 447
}  
# 448
if (n) { 
# 449
word w = (word)stream_read_bits(src, (uint)n); 
# 450
stream_write_bits(dst, w, (uint)n); 
# 451
}  
# 452
} 
# 472 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/../inline/bitstream.c"
inline bitstream *stream_open(void *buffer, size_t bytes) 
# 473
{ 
# 475
; 
# 476
bitstream *s = (bitstream *)malloc(sizeof(bitstream)); 
# 477
if (s) { 
# 478
(s->begin) = ((word *)buffer); 
# 479
(s->end) = ((s->begin) + (bytes / sizeof(word))); 
# 483
stream_rewind(s); 
# 484
}  
# 485
return s; 
# 486
} 
# 490
inline void stream_close(bitstream *s) 
# 491
{ 
# 493
; 
# 494
free(s); 
# 495
} 
# 499
inline bitstream *stream_clone(const bitstream *s) 
# 500
{ 
# 502
; 
# 503
bitstream *c = (bitstream *)malloc(sizeof(bitstream)); 
# 504
if (c) { 
# 505
(*c) = (*s); }  
# 506
return c; 
# 507
} 
# 28 "/gpfs/alpine/proj-shared/csc143/jwang/local-build/zfp/src/cuda_zfp/cuZFP.cu"
namespace internal { 
# 31
bool is_contigous3d(const uint dims[3], const int3 &stride, long long &offset) 
# 32
{ 
# 33
typedef long long int64; 
# 34
int64 idims[3]; 
# 35
(idims[0]) = (dims[0]); 
# 36
(idims[1]) = (dims[1]); 
# 37
(idims[2]) = (dims[2]); 
# 39
int64 imin = (((std::min(stride.x, 0)) * ((idims[0]) - (1))) + ((std::min(stride.y, 0)) * ((idims[1]) - (1)))) + ((std::min(stride.z, 0)) * ((idims[2]) - (1))); 
# 43
int64 imax = (((std::max(stride.x, 0)) * ((idims[0]) - (1))) + ((std::max(stride.y, 0)) * ((idims[1]) - (1)))) + ((std::max(stride.z, 0)) * ((idims[2]) - (1))); 
# 46
offset = imin; 
# 47
int64 ns = ((idims[0]) * (idims[1])) * (idims[2]); 
# 49
return ((imax - imin) + (1)) == ns; 
# 50
} 
# 52
bool is_contigous2d(const uint dims[3], const int3 &stride, long long &offset) 
# 53
{ 
# 54
typedef long long int64; 
# 55
int64 idims[2]; 
# 56
(idims[0]) = (dims[0]); 
# 57
(idims[1]) = (dims[1]); 
# 59
int64 imin = ((std::min(stride.x, 0)) * ((idims[0]) - (1))) + ((std::min(stride.y, 0)) * ((idims[1]) - (1))); 
# 62
int64 imax = ((std::max(stride.x, 0)) * ((idims[0]) - (1))) + ((std::max(stride.y, 0)) * ((idims[1]) - (1))); 
# 65
offset = imin; 
# 66
return ((imax - imin) + (1)) == ((idims[0]) * (idims[1])); 
# 67
} 
# 69
bool is_contigous1d(uint dim, const int &stride, long long &offset) 
# 70
{ 
# 71
offset = (0); 
# 72
if (stride < 0) { offset = (stride * (((int)dim) - 1)); }  
# 73
return std::abs(stride) == 1; 
# 74
} 
# 76
bool is_contigous(const uint dims[3], const int3 &stride, long long &offset) 
# 77
{ 
# 78
int d = 0; 
# 80
if ((dims[0]) != (0)) { d++; }  
# 81
if ((dims[1]) != (0)) { d++; }  
# 82
if ((dims[2]) != (0)) { d++; }  
# 84
if (d == 3) 
# 85
{ 
# 86
return is_contigous3d(dims, stride, offset); 
# 87
} else { 
# 88
if (d == 2) 
# 89
{ 
# 90
return is_contigous2d(dims, stride, offset); 
# 91
} else 
# 93
{ 
# 94
return is_contigous1d(dims[0], stride.x, offset); 
# 95
}  }  
# 97
} 
# 101
template< class T> size_t 
# 102
encode(uint dims[3], int3 stride, int bits_per_block, T *d_data, Word *d_stream) 
# 103
{ 
# 104
int d = 0; 
# 105
size_t len = (1); 
# 106
for (int i = 0; i < 3; ++i) 
# 107
{ 
# 108
if ((dims[i]) != (0)) 
# 109
{ 
# 110
d++; 
# 111
len *= (dims[i]); 
# 112
}  
# 113
}  
# 115
ErrorCheck errors; 
# 116
size_t stream_size = (0); 
# 117
if (d == 1) 
# 118
{ 
# 119
int dim = dims[0]; 
# 120
int sx = stride.x; 
# 121
cuZFP::ConstantSetup::setup_1d(); 
# 122
stream_size = cuZFP::encode1< T> (dim, sx, d_data, d_stream, bits_per_block); 
# 123
} else { 
# 124
if (d == 2) 
# 125
{ 
# 126
uint2 ndims = make_uint2(dims[0], dims[1]); 
# 127
int2 s; 
# 128
(s.x) = (stride.x); 
# 129
(s.y) = (stride.y); 
# 130
cuZFP::ConstantSetup::setup_2d(); 
# 131
stream_size = cuZFP::encode2< T> (ndims, s, d_data, d_stream, bits_per_block); 
# 132
} else { 
# 133
if (d == 3) 
# 134
{ 
# 135
int3 s; 
# 136
(s.x) = (stride.x); 
# 137
(s.y) = (stride.y); 
# 138
(s.z) = (stride.z); 
# 139
uint3 ndims = make_uint3(dims[0], dims[1], dims[2]); 
# 140
cuZFP::ConstantSetup::setup_3d(); 
# 141
stream_size = cuZFP::encode< T> (ndims, s, d_data, d_stream, bits_per_block); 
# 142
}  }  }  
# 144
errors.chk("Encode"); 
# 146
return stream_size; 
# 147
} 
# 149
template< class T> size_t 
# 150
decode(uint ndims[3], int3 stride, int bits_per_block, Word *stream, T *out) 
# 151
{ 
# 153
int d = 0; 
# 154
size_t out_size = (1); 
# 155
size_t stream_bytes = (0); 
# 156
for (int i = 0; i < 3; ++i) 
# 157
{ 
# 158
if ((ndims[i]) != (0)) 
# 159
{ 
# 160
d++; 
# 161
out_size *= (ndims[i]); 
# 162
}  
# 163
}  
# 165
if (d == 3) 
# 166
{ 
# 167
uint3 dims = make_uint3(ndims[0], ndims[1], ndims[2]); 
# 169
int3 s; 
# 170
(s.x) = (stride.x); 
# 171
(s.y) = (stride.y); 
# 172
(s.z) = (stride.z); 
# 174
cuZFP::ConstantSetup::setup_3d(); 
# 175
stream_bytes = cuZFP::decode3< T> (dims, s, stream, out, bits_per_block); 
# 176
} else { 
# 177
if (d == 1) 
# 178
{ 
# 179
uint dim = ndims[0]; 
# 180
int sx = stride.x; 
# 182
cuZFP::ConstantSetup::setup_1d(); 
# 183
stream_bytes = cuZFP::decode1< T> (dim, sx, stream, out, bits_per_block); 
# 185
} else { 
# 186
if (d == 2) 
# 187
{ 
# 188
uint2 dims; 
# 189
(dims.x) = (ndims[0]); 
# 190
(dims.y) = (ndims[1]); 
# 192
int2 s; 
# 193
(s.x) = (stride.x); 
# 194
(s.y) = (stride.y); 
# 196
cuZFP::ConstantSetup::setup_2d(); 
# 197
stream_bytes = cuZFP::decode2< T> (dims, s, stream, out, bits_per_block); 
# 198
} else { 
# 199
(((((std::cerr << (" d ==  "))) << d)) << (" not implemented\n")); }  }  }  
# 201
return stream_bytes; 
# 202
} 
# 204
Word *setup_device_stream(zfp_stream *stream, const zfp_field *field) 
# 205
{ 
# 207
bool stream_device = cuZFP::is_gpu_ptr((stream->stream)->begin); 
# 209
static_cast< void>(0); 
# 211
if (stream_device) 
# 212
{ 
# 213
return (Word *)((stream->stream)->begin); 
# 214
}  
# 216
Word *d_stream = (__null); 
# 218
size_t max_size = zfp_stream_maximum_size(stream, field); 
# 220
cudaMalloc(&d_stream, max_size); 
# 221
cudaMemcpy(d_stream, (stream->stream)->begin, max_size, cudaMemcpyHostToDevice); 
# 222
return d_stream; 
# 223
} 
# 225
void *offset_void(zfp_type type, void *ptr, long long offset) 
# 226
{ 
# 227
void *offset_ptr = (__null); 
# 228
if (type == (zfp_type_float)) 
# 229
{ 
# 230
float *data = (float *)ptr; 
# 231
offset_ptr = ((void *)(&(data[offset]))); 
# 232
} else { 
# 233
if (type == (zfp_type_double)) 
# 234
{ 
# 235
double *data = (double *)ptr; 
# 236
offset_ptr = ((void *)(&(data[offset]))); 
# 237
} else { 
# 238
if (type == (zfp_type_int32)) 
# 239
{ 
# 240
int *data = (int *)ptr; 
# 241
offset_ptr = ((void *)(&(data[offset]))); 
# 242
} else { 
# 243
if (type == (zfp_type_int64)) 
# 244
{ 
# 245
long long *data = (long long *)ptr; 
# 246
offset_ptr = ((void *)(&(data[offset]))); 
# 247
}  }  }  }  
# 248
return offset_ptr; 
# 249
} 
# 251
void *setup_device_field(const zfp_field *field, const int3 &stride, long long &offset) 
# 252
{ 
# 253
bool field_device = false; 
# 255
if (field_device) 
# 256
{ 
# 257
offset = (0); 
# 258
return field->data; 
# 259
}  
# 260
uint dims[3]; 
# 261
(dims[0]) = (field->nx); 
# 262
(dims[1]) = (field->ny); 
# 263
(dims[2]) = (field->nz); 
# 265
size_t type_size = zfp_type_size(field->type); 
# 267
size_t field_size = (1); 
# 268
for (int i = 0; i < 3; ++i) 
# 269
{ 
# 270
if ((dims[i]) != (0)) 
# 271
{ 
# 272
field_size *= (dims[i]); 
# 273
}  
# 274
}  
# 276
bool contig = internal::is_contigous(dims, stride, offset); 
# 278
void *host_ptr = offset_void(field->type, field->data, offset); ; 
# 280
void *d_data = (__null); 
# 281
if (contig) 
# 282
{ 
# 283
size_t field_bytes = type_size * field_size; 
# 284
cudaMalloc(&d_data, field_bytes); 
# 287
cudaError_t err_ = cudaHostRegister(host_ptr, field_bytes, 0); 
# 289
cudaMemcpy(d_data, host_ptr, field_bytes, cudaMemcpyHostToDevice); 
# 290
}  
# 292
return offset_void(field->type, d_data, -offset); 
# 293
} 
# 295
void cleanup_device_ptr(void *orig_ptr, void *d_ptr, size_t bytes, long long offset, zfp_type type) 
# 296
{ 
# 297
bool device = cuZFP::is_gpu_ptr(orig_ptr); 
# 299
if (device) 
# 300
{ 
# 301
return; 
# 302
}  
# 304
void *d_offset_ptr = offset_void(type, d_ptr, offset); 
# 305
void *h_offset_ptr = offset_void(type, orig_ptr, offset); 
# 307
if (bytes > (0)) 
# 308
{ 
# 309
cudaError_t err_ = cudaHostRegister(h_offset_ptr, bytes, 0); 
# 310
cudaMemcpy(h_offset_ptr, d_offset_ptr, bytes, cudaMemcpyDeviceToHost); 
# 311
}  
# 313
cudaFree(d_offset_ptr); 
# 314
} 
# 316
}
# 319
size_t cuda_compress(zfp_stream *stream, const zfp_field *field) 
# 320
{ 
# 322
cudaSetDevice(0); 
# 323
void *dev_ptr = malloc(8); 
# 324
cudaPointerAttributes atts; 
# 327
cudaError_t perr = cudaPointerGetAttributes(&atts, dev_ptr); 
# 329
uint dims[3]; 
# 330
(dims[0]) = (field->nx); 
# 331
(dims[1]) = (field->ny); 
# 332
(dims[2]) = (field->nz); 
# 334
size_t type_size = zfp_type_size(field->type); 
# 335
size_t field_size = (1); 
# 336
for (int i = 0; i < 3; ++i) 
# 337
{ 
# 338
if ((dims[i]) != (0)) 
# 339
{ 
# 340
field_size *= (dims[i]); 
# 341
}  
# 342
}  
# 343
unsigned long field_bytes = type_size * field_size; 
# 345
int3 stride; 
# 346
(stride.x) = ((field->sx) ? field->sx : 1); 
# 347
(stride.y) = ((field->sy) ? field->sy : (field->nx)); 
# 348
(stride.z) = ((field->sz) ? field->sz : ((field->nx) * (field->ny))); 
# 350
size_t stream_bytes = (0); 
# 351
long long offset = (0); 
# 353
void *d_data = internal::setup_device_field(field, stride, offset); 
# 355
if (d_data == (__null)) 
# 356
{ 
# 358
return 0; 
# 359
}  
# 360
Word *d_stream = internal::setup_device_stream(stream, field); 
# 363
if ((field->type) == (zfp_type_float)) 
# 364
{ 
# 365
float *data = (float *)d_data; 
# 366
stream_bytes = internal::encode< float> (dims, stride, (int)(stream->maxbits), data, d_stream); 
# 367
} else { 
# 368
if ((field->type) == (zfp_type_double)) 
# 369
{ 
# 370
double *data = (double *)d_data; 
# 371
stream_bytes = internal::encode< double> (dims, stride, (int)(stream->maxbits), data, d_stream); 
# 372
} else { 
# 373
if ((field->type) == (zfp_type_int32)) 
# 374
{ 
# 375
int *data = (int *)d_data; 
# 376
stream_bytes = internal::encode< int> (dims, stride, (int)(stream->maxbits), data, d_stream); 
# 377
} else { 
# 378
if ((field->type) == (zfp_type_int64)) 
# 379
{ 
# 380
long long *data = (long long *)d_data; 
# 381
stream_bytes = internal::encode< long long> (dims, stride, (int)(stream->maxbits), data, d_stream); 
# 382
}  }  }  }  
# 385
internal::cleanup_device_ptr(field->data, d_data, 0, offset, field->type); 
# 386
internal::cleanup_device_ptr((stream->stream)->begin, d_stream, stream_bytes, 0, field->type); 
# 389
size_t compressed_size = stream_bytes / sizeof(Word); 
# 390
((stream->stream)->bits) = ((uint)((8) * sizeof(word))); 
# 392
((stream->stream)->ptr) = (((stream->stream)->begin) + compressed_size); 
# 394
return stream_bytes; 
# 395
} 
# 398
void cuda_decompress(zfp_stream *stream, zfp_field *field) 
# 399
{ 
# 400
uint dims[3]; 
# 401
(dims[0]) = (field->nx); 
# 402
(dims[1]) = (field->ny); 
# 403
(dims[2]) = (field->nz); 
# 405
int3 stride; 
# 406
(stride.x) = ((field->sx) ? field->sx : 1); 
# 407
(stride.y) = ((field->sy) ? field->sy : (field->nx)); 
# 408
(stride.z) = ((field->sz) ? field->sz : ((field->nx) * (field->ny))); 
# 410
size_t decoded_bytes = (0); 
# 411
long long offset = (0); 
# 412
void *d_data = internal::setup_device_field(field, stride, offset); 
# 414
if (d_data == (__null)) 
# 415
{ 
# 417
return; 
# 418
}  
# 420
Word *d_stream = internal::setup_device_stream(stream, field); 
# 422
if ((field->type) == (zfp_type_float)) 
# 423
{ 
# 424
float *data = (float *)d_data; 
# 425
decoded_bytes = internal::decode(dims, stride, (int)(stream->maxbits), d_stream, data); 
# 426
d_data = ((void *)data); 
# 427
} else { 
# 428
if ((field->type) == (zfp_type_double)) 
# 429
{ 
# 430
double *data = (double *)d_data; 
# 431
decoded_bytes = internal::decode(dims, stride, (int)(stream->maxbits), d_stream, data); 
# 432
d_data = ((void *)data); 
# 433
} else { 
# 434
if ((field->type) == (zfp_type_int32)) 
# 435
{ 
# 436
int *data = (int *)d_data; 
# 437
decoded_bytes = internal::decode(dims, stride, (int)(stream->maxbits), d_stream, data); 
# 438
d_data = ((void *)data); 
# 439
} else { 
# 440
if ((field->type) == (zfp_type_int64)) 
# 441
{ 
# 442
long long *data = (long long *)d_data; 
# 443
decoded_bytes = internal::decode(dims, stride, (int)(stream->maxbits), d_stream, data); 
# 444
d_data = ((void *)data); 
# 445
} else 
# 447
{ 
# 448
(std::cerr << ("Cannot decompress: type unknown\n")); 
# 449
}  }  }  }  
# 452
size_t type_size = zfp_type_size(field->type); 
# 454
size_t field_size = (1); 
# 455
for (int i = 0; i < 3; ++i) 
# 456
{ 
# 457
if ((dims[i]) != (0)) 
# 458
{ 
# 459
field_size *= (dims[i]); 
# 460
}  
# 461
}  
# 463
size_t bytes = type_size * field_size; 
# 464
internal::cleanup_device_ptr((stream->stream)->begin, d_stream, 0, 0, field->type); 
# 465
internal::cleanup_device_ptr(field->data, d_data, bytes, offset, field->type); 
# 468
size_t words_read = decoded_bytes / sizeof(Word); 
# 469
((stream->stream)->bits) = ((uint)((8) * sizeof(word))); 
# 471
((stream->stream)->ptr) = (((stream->stream)->begin) + words_read); 
# 472
} 

# 1 "cuZFP.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__13_cuZFP_cpp1_ii_368b9503
# 1 "cuZFP.cudafe1.stub.c"
#include "cuZFP.cudafe1.stub.c"
# 1 "cuZFP.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
